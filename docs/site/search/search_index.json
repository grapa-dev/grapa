{"config": {"lang": ["en"], "separator": "\\s\\-,:!=\\[\\]()\"/`|]+'", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Welcome to Grapa Documentation", "text": "<p>Tip: Use the search bar (top right) to quickly find functions, guides, and examples. The search automatically filters to show only user documentation.</p>"}, {"location": "#getting-started", "title": "Getting Started", "text": "<ul> <li>Quickstart Guide</li> <li>API Reference</li> <li>Migration Guides</li> <li>Examples</li> </ul>"}, {"location": "#advanced-topics", "title": "Advanced Topics", "text": "<ul> <li>Grammar Design - Create your own languages with Grapa</li> </ul>"}, {"location": "#key-features", "title": "Key Features", "text": "<ul> <li>Dynamic Code Execution: Compile and execute code at runtime with <code>op()(&lt;string&gt;)()</code> and <code>$sys().eval()</code></li> <li>Execution Trees: Direct manipulation of <code>$OP</code> objects for advanced meta-programming</li> <li>Parallel Processing: Built-in parallel data operations with <code>.map()</code>, <code>.filter()</code>, <code>.reduce()</code></li> <li>Unlimited Precision: Native support for arbitrary-precision arithmetic</li> <li>Cross-Platform: Runs on Windows, macOS, and Linux</li> </ul>"}, {"location": "#new-features", "title": "New Features", "text": "<ul> <li>Searchable API Reference: Find all built-in functions, types, and methods in one place.</li> <li>Tag-based Filtering: Use tags in the API Reference and throughout the docs to filter by topic, type, or use case.</li> <li>Mobile-Friendly: This site is fully responsive\u2014try it on your phone or tablet!</li> </ul>"}, {"location": "#need-help", "title": "Need Help?", "text": "<ul> <li>Troubleshooting</li> </ul> <p>Grapa: High-performance scripting for data, ETL, and automation.</p>"}, {"location": "API_REFERENCE/", "title": "Grapa API Reference", "text": "<p>For High-Level Grapa Programmers: This reference covers the functions and types you'll use most often when writing Grapa scripts and applications.</p> <p>For Advanced Users: See System Functions (Advanced) for low-level functions, grammar development, and internal APIs.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#table-of-contents", "title": "Table of Contents", "text": "<ul> <li>Core Language</li> <li>Dynamic Code Execution</li> <li>Variables &amp; Scope</li> <li>Data Structures</li> <li>Search &amp; Analysis</li> <li>Control Flow</li> <li>Functional Programming</li> <li>Type &amp; I/O</li> <li>Math Operations</li> <li>String Operations</li> <li>Array/Matrix Operations</li> <li>File System</li> <li>Time &amp; Date</li> <li>Usage Examples</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#core-language", "title": "Core Language", "text": "<p>Essential language constructs for writing Grapa scripts.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#comments", "title": "Comments", "text": "<p>Grapa only supports block comments (<code>/* ... */</code>). Line comments (<code>// ...</code>) are not supported.</p> <p>Comment Rules: - Outside <code>{}</code> blocks: Comments can be at the end of lines - Inside <code>{}</code> blocks: Comments must be on their own line - Class/function definitions: Comments must be on their own line</p> <pre><code>/* \u2705 Correct */\nx = 5;  /* This works outside {} */\n\nif (condition) {\n    /* This comment is correct */\n    x = 5;\n}\n\n/* \u274c Incorrect */\nif (condition) {\n    x = 5;  /* This will cause a syntax error */\n}\n</code></pre>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#type-system", "title": "Type System", "text": "<p>Grapa uses dynamic typing with rich runtime type introspection. Everything in Grapa is data - functions, classes, primitives, and everything else are just different data types that can be manipulated, stored, and passed around.</p> <ul> <li><code>.type()</code> - Get the type of an object (returns <code>$STR</code>)</li> <li><code>.str()</code> - Convert to string</li> <li><code>.int()</code> - Convert to integer</li> <li><code>.float()</code> - Convert to float</li> <li><code>.bool()</code> - Convert to boolean</li> </ul> <pre><code>/* Type checking */\nif (value.type() == $INT) { ... }\nif (value.type() == $STR) { ... }\nif (value.type() == $ARRAY) { ... }\nif (value.type() == $OP) { ... }    /* Functions are data */\nif (value.type() == $CLASS) { ... } /* Classes are data */\n\n/* Type conversion */\ntext = number.str();\nnumber = text.int();\n\n/* Functions as data */\nmy_func = op(x) { x * 2; };\nmy_func.type().echo();  /* $OP */\n</code></pre>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#namespace-system", "title": "Namespace System", "text": "<p>Grapa has a dynamic namespace system managed by the execution tree:</p> <ul> <li><code>$global</code> - Global namespace for persistent variables</li> <li><code>$local</code> - Local namespace (automatic for each function)</li> <li>Automatic namespace creation for each execution context</li> <li>Hierarchical access to variables from parent namespaces</li> </ul> <pre><code>/* Global variables */\n$global.config = {\"debug\": true};\n\n/* Function with local namespace */\nfunc = op(x) {\n    local_var = x * 2;  /* In function's local namespace */\n    global_var = config;  /* Access global namespace */\n    local_var.echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#basic-operations", "title": "Basic Operations", "text": "<ul> <li><code>.echo()</code> - Output text to console (method on strings/values)</li> <li><code>.\\n</code> - Exit console (in interactive mode)</li> <li><code>sleep(seconds)</code> - Pause execution</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#comments_1", "title": "Comments", "text": "<pre><code>/* This is a block comment */\n/* Line comments are not supported in Grapa */\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#dynamic-code-execution", "title": "Dynamic Code Execution", "text": "<p>Grapa's most powerful feature is its ability to compile and execute code at runtime. This enables advanced meta-programming patterns.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#core-functions", "title": "Core Functions", "text": "<ul> <li><code>op()(script)</code> - Compile string to executable function</li> <li><code>$sys().eval(script, params)</code> - Evaluate script with parameters</li> <li><code>$sys().compile(script)</code> - Pre-compile script for performance</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples", "title": "Examples", "text": "<pre><code>/* Direct string execution */\nop()(\"'Hello, World!'.echo();\")();\n/* Output: Hello, World! */\n\n/* With parameters */\nfunc = op(\"name\"=0)(\"'Hello, ' + name + '!'.echo();\");\nfunc(\"Grapa\");\n/* Output: Hello, Grapa! */\n\n/* System-level evaluation */\nresult = $sys().eval(\"x + y\", {\"x\": 5, \"y\": 3});\nresult.echo();  /* 8 */\n\n/* Compiled execution for performance */\ncompiled = $sys().compile(\"input * 2 + offset\");\nresult = $sys().eval(compiled, {\"input\": 10, \"offset\": 5});\nresult.echo();  /* 25 */\n\n/* Dynamic function generation */\noperations = [\"add\", \"sub\", \"mul\"];\nfuncs = {};\ni = 0;\nwhile (i &lt; operations.len()) {\n    op_name = operations.get(i);\n    code = \"a \" + op_name + \" b\";\n    funcs[op_name] = op(\"a\"=0, \"b\"=0)(code);\n    i += 1;\n}\n\n/* Execute generated functions */\nfuncs[\"add\"](5, 3).echo();  /* 8 */\nfuncs[\"mul\"](5, 3).echo();  /* 15 */\n</code></pre> <p>Note: This is Grapa's core meta-programming capability, making it superior to most languages for dynamic code execution.</p> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#variables-scope", "title": "Variables &amp; Scope", "text": "<p>Variable declaration, assignment, and scope management.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#assignment", "title": "Assignment", "text": "<ul> <li><code>=</code> - Basic assignment</li> <li><code>+=</code> - Append to arrays</li> <li><code>global</code> - Declare global variable</li> <li><code>local</code> - Declare local variable</li> <li><code>const</code> - Declare constant</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_1", "title": "Examples", "text": "<pre><code>name = \"Grapa\";\ncount = 42;\nnumbers = [1, 2, 3];\nnumbers += 4;  /* Append to array */\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#data-structures", "title": "Data Structures", "text": "<p>Create and manipulate arrays, lists, and objects.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#array-operations", "title": "Array Operations", "text": "<ul> <li><code>[item1, item2, ...]</code> - Create array</li> <li><code>+=</code> - Append to array</li> <li><code>len()</code> - Get array length</li> <li><code>sum()</code> - Sum array elements</li> <li><code>mean()</code> - Calculate mean</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#listobject-operations", "title": "List/Object Operations", "text": "<ul> <li><code>{key: value, ...}</code> - Create list/object</li> <li><code>.key</code> - Access object property</li> <li><code>.keys()</code> - Get object keys</li> <li><code>.values()</code> - Get object values</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#object-merging-operators", "title": "Object Merging Operators", "text": "<ul> <li><code>+=</code> - Append/nest second object within first</li> <li><code>++=</code> - Merge/flatten properties from both objects</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_2", "title": "Examples", "text": "<pre><code>/* Arrays */\nnumbers = [1, 2, 3, 4, 5];\nnumbers += 6;\ntotal = numbers.sum();\naverage = numbers.mean();\n\n/* Objects */\nconfig = {\"host\": \"localhost\", \"port\": 8080};\nhost = config.host;\n\n/* Object merging */\nuser = {\"name\": \"John\"};\nprofile = {\"age\": 30, \"email\": \"john@example.com\"};\n\n/* Append (nested) */\nuser += profile;\nuser.echo();  /* {\"name\":\"John\",{\"age\":30,\"email\":\"john@example.com\"}} */\n\n/* Merge (flattened) */\nuser = {\"name\": \"John\"};\nuser ++= profile;\nuser.echo();  /* {\"name\":\"John\",\"age\":30,\"email\":\"john@example.com\"} */\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#search-analysis", "title": "Search &amp; Analysis", "text": "<p>Search, sort, and analyze data.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#search-functions", "title": "Search Functions", "text": "<ul> <li><code>grep(pattern, options)</code> - Search text with regex</li> <li><code>search(data, pattern)</code> - Search in data structures</li> <li><code>findall(text, pattern)</code> - Find all matches</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#analysis-functions", "title": "Analysis Functions", "text": "<ul> <li><code>sort(data)</code> - Sort data</li> <li><code>unique(data)</code> - Remove duplicates</li> <li><code>group(data, key)</code> - Group data by key</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_3", "title": "Examples", "text": "<pre><code>text = \"Hello world\\nGoodbye world\";\nmatches = text.grep(\"world\", \"o\");  /* [\"world\", \"world\"] */\n\ndata = [3, 1, 4, 1, 5];\nsorted_data = data.sort();  /* [1, 1, 3, 4, 5] */\nunique_data = data.unique();  /* [3, 1, 4, 5] */\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#control-flow", "title": "Control Flow", "text": "<p>Control program execution and logic flow.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#conditionals", "title": "Conditionals", "text": "<pre><code>if (condition) {\n    /* code */\n} else {\n    /* code */\n}\n</code></pre>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#loops", "title": "Loops", "text": "<pre><code>/* While loop */\ni = 0;\nwhile (i &lt; 5) {\n    (\"Iteration \" + i.str()).echo();\n    i += 1;\n};\n\n/* For-loop equivalent with range and map */\n(5).range(0,1).map(op(i) { (\"Iteration \" + i.str()).echo(); });\n</code></pre>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#functions", "title": "Functions", "text": "<pre><code>/* Define function */\nmy_function = op(a, b) {\n    a + b;\n};\n\n/* Call function */\nresult = my_function(10, 20);\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#functional-programming", "title": "Functional Programming", "text": "<p>Parallel and sequential data processing functions.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#map-filter-reduce", "title": "Map, Filter, Reduce", "text": "<ul> <li><code>map(data, function)</code> - Apply function to each element (parallel)</li> <li><code>filter(data, function)</code> - Filter elements (parallel)</li> <li><code>reduce(data, function, initial)</code> - Reduce to single value (sequential)</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_4", "title": "Examples", "text": "<pre><code>data = [1, 2, 3, 4, 5];\n\n/* Map (parallel) */\ndoubled = data.map(op(x) { x * 2; });\n\n/* Filter (parallel) */\nevans = data.filter(op(x) { x % 2 == 0; });\n\n/* Reduce (sequential) */\nsum = data.reduce(op(acc, x) { acc + x; }, 0);\n</code></pre> <p>Note: <code>map</code> and <code>filter</code> are parallel by default and production-ready for high-throughput data processing.</p> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#type-io", "title": "Type &amp; I/O", "text": "<p>Type checking, conversion, and input/output operations.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#type-functions", "title": "Type Functions", "text": "<ul> <li><code>type(value)</code> - Get type of value</li> <li><code>int(value)</code> - Convert to integer</li> <li><code>float(value)</code> - Convert to float</li> <li><code>str(value)</code> - Convert to string</li> <li><code>bool(value)</code> - Convert to boolean</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#io-functions", "title": "I/O Functions", "text": "<ul> <li><code>.echo()</code> - Output to console (method on strings/values)</li> <li><code>prompt(message)</code> - Get user input</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_5", "title": "Examples", "text": "<pre><code>value = \"42\";\nnumber = int(value);\ntext = str(number);\n\nname = prompt(\"Enter your name: \");\n(\"Hello, \" + name).echo();\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#math-operations", "title": "Math Operations", "text": "<p>Mathematical functions and operations.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#basic-math", "title": "Basic Math", "text": "<ul> <li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> - Arithmetic operators</li> <li><code>pow(base, exponent)</code> - Power function</li> <li><code>abs(value)</code> - Absolute value</li> <li><code>mod(value, divisor)</code> - Modulo operation</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#constants", "title": "Constants", "text": "<ul> <li><code>pi</code> - Pi constant</li> <li><code>e</code> - Euler's number</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_6", "title": "Examples", "text": "<pre><code>result = 4 * 3;\npower = pow(2, 10);\nabsolute = abs(-42);\nremainder = mod(17, 5);\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#string-operations", "title": "String Operations", "text": "<p>String manipulation and analysis.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#string-methods", "title": "String Methods", "text": "<ul> <li><code>.len()</code> - Get string length</li> <li><code>.upper()</code> - Convert to uppercase</li> <li><code>.lower()</code> - Convert to lowercase</li> <li><code>.trim()</code> - Remove whitespace</li> <li><code>.split(delimiter)</code> - Split string</li> <li><code>.join(array)</code> - Join array into string</li> <li><code>.replace(old, new)</code> - Replace text</li> <li><code>.grep(pattern, options)</code> - Search with regex</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_7", "title": "Examples", "text": "<pre><code>text = \"  Hello, World!  \";\nlength = text.len();\nupper = text.trim().upper();\nwords = text.split(\", \");\njoined = words.join(\" - \");\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#arraymatrix-operations", "title": "Array/Matrix Operations", "text": "<p>Array and matrix manipulation.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#array-functions", "title": "Array Functions", "text": "<ul> <li><code>shape(array)</code> - Get array dimensions</li> <li><code>reshape(array, dimensions)</code> - Reshape array</li> <li><code>sum(array)</code> - Sum elements</li> <li><code>mean(array)</code> - Calculate mean</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#matrix-functions", "title": "Matrix Functions", "text": "<ul> <li><code>dot(matrix1, matrix2)</code> - Matrix multiplication</li> <li><code>t(matrix)</code> - Transpose matrix</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_8", "title": "Examples", "text": "<pre><code>data = [1, 2, 3, 4, 5, 6];\nmatrix = reshape(data, [2, 3]);\ntransposed = t(matrix);\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#file-system", "title": "File System", "text": "<p>File and directory operations.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#file-operations", "title": "File Operations", "text": "<ul> <li><code>$file().get(path)</code> - Read file content</li> <li><code>$file().set(path, content)</code> - Write to file</li> <li><code>$file().ls(path)</code> - List directory contents</li> <li><code>$file().info(path)</code> - Get file information</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_9", "title": "Examples", "text": "<pre><code>/* Read file */\ncontent = $file().get(\"data.txt\").str();\n\n/* Write file */\n$file().set(\"output.txt\", \"Hello from Grapa!\");\n\n/* List files */\nfiles = $file().ls(\".\");\nfor (file in files) {\n    (\"File: \" + file.name).echo();\n}\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#time-date", "title": "Time &amp; Date", "text": "<p>Time and date utilities.</p>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#time-functions", "title": "Time Functions", "text": "<ul> <li><code>$time()</code> - Get current timestamp</li> <li><code>$time().format(format)</code> - Format timestamp</li> <li><code>$time().add(seconds)</code> - Add time</li> <li><code>$time().sub(seconds)</code> - Subtract time</li> </ul>", "tags": ["user", "highlevel", "api"]}, {"location": "API_REFERENCE/#examples_10", "title": "Examples", "text": "<pre><code>now = $time();\nformatted = now.format(\"%Y-%m-%d %H:%M:%S\");\ntomorrow = now.add(86400);  /* Add 24 hours */\n</code></pre> <p>Back to Top</p>", "tags": ["user", "highlevel", "api"]}, {"location": "CLI_QUICKSTART/", "title": "Grapa CLI Quickstart Guide", "text": "<p>For High-Level Grapa Programmers: This guide is for users who want to write and run Grapa scripts (<code>.grc</code> files) from the command line.</p>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#installation", "title": "Installation", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#step-1-download-and-extract", "title": "Step 1: Download and Extract", "text": "<ol> <li>Download the appropriate binary for your system from the <code>bin/</code> directory:</li> <li>macOS (Intel): <code>grapa-mac-amd64.tar.gz</code></li> <li>macOS (Apple Silicon): <code>grapa-mac-arm64.tar.gz</code></li> <li>Linux (Intel): <code>grapa-linux-amd64.tar.gz</code></li> <li>Linux (ARM): <code>grapa-linux-arm64.tar.gz</code></li> <li> <p>Windows: <code>grapa-win-amd64.zip</code></p> </li> <li> <p>Extract the archive to a location of your choice:    <pre><code># macOS/Linux\ntar -xzf grapa-mac-amd64.tar.gz\n\n# Windows\n# Extract the .zip file using your preferred tool\n</code></pre></p> </li> </ol>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#step-2-make-executable-macoslinux", "title": "Step 2: Make Executable (macOS/Linux)", "text": "<pre><code>chmod +x grapa\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#step-3-add-to-path-optional", "title": "Step 3: Add to PATH (Optional)", "text": "<p>Move the <code>grapa</code> binary to a directory in your PATH, or add its location to your PATH: <pre><code># Option 1: Move to /usr/local/bin\nsudo mv grapa /usr/local/bin/\n\n# Option 2: Add to PATH in your shell profile\nexport PATH=\"$PATH:/path/to/grapa/directory\"\n</code></pre></p>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#your-first-grapa-script", "title": "Your First Grapa Script", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#step-1-create-a-script-file", "title": "Step 1: Create a Script File", "text": "<p>Create a file named <code>hello.grc</code>: <pre><code>/* Simple hello world */\n\"Hello, Grapa!\".echo();\n\n/* Basic arithmetic */\nresult = 4 * 3;\n(\"4 * 3 = \" + result).echo();\n</code></pre></p>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#step-2-run-the-script", "title": "Step 2: Run the Script", "text": "<pre><code>grapa -cfile hello.grc\n</code></pre> <p>Output: <pre><code>Hello, Grapa!\n4 * 3 = 12\n</code></pre></p>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#basic-syntax-and-patterns", "title": "Basic Syntax and Patterns", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#variables-and-assignment", "title": "Variables and Assignment", "text": "<pre><code>/* Simple assignment */\nname = \"Grapa\";\ncount = 42;\n\n/* Array creation */\nnumbers = [1, 2, 3, 4, 5];\n\n/* List (JSON object) */\nconfig = { \"host\": \"localhost\", \"port\": 8080 };\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#control-flow", "title": "Control Flow", "text": "<pre><code>/* If statements */\nif (count &gt; 10) {\n    \"Count is high\".echo();\n} else {\n    \"Count is low\".echo();\n}\n\n/* While loops */\ni = 0;\nwhile (i &lt; 5) {\n    (\"Iteration \" + i).echo();\n    i = i + 1;\n}\n\n/* For loops (using range) */\nfor (i in range(5)) {\n    (\"For loop iteration \" + i).echo();\n}\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#functions", "title": "Functions", "text": "<pre><code>/* Define a function */\nfunction = op(a, b) {\n    return a + b;\n};\n\n/* Call the function */\nresult = function(10, 20);\n(\"Sum: \" + result).echo();\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#file-operations", "title": "File Operations", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#reading-files", "title": "Reading Files", "text": "<pre><code>/* Read entire file */\ncontent = $file().get(\"data.txt\").str();\n(\"File content: \" + content).echo();\n\n/* Read file as lines */\nlines = $file().get(\"data.txt\").str().split(\"\\n\");\nfor (line in lines) {\n    (\"Line: \" + line).echo();\n}\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#writing-files", "title": "Writing Files", "text": "<pre><code>/* Write to file */\n$file().set(\"output.txt\", \"Hello from Grapa!\");\n\n/* Append to file */\n$file().set(\"log.txt\", \"New entry\\n\", \"a\");\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#data-processing", "title": "Data Processing", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#working-with-arrays", "title": "Working with Arrays", "text": "<pre><code>/* Create array */\ndata = [1, 2, 3, 4, 5];\n\n/* Map operation (parallel by default) */\ndoubled = data.map(op(x) { return x * 2; });\n(\"Doubled: \" + doubled).echo();\n\n/* Filter operation */\nevens = data.filter(op(x) { return x % 2 == 0; });\n(\"Evens: \" + evens).echo();\n\n/* Reduce operation */\nsum = data.reduce(op(acc, x) { return acc + x; }, 0);\n(\"Sum: \" + sum).echo();\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#string-operations", "title": "String Operations", "text": "<pre><code>text = \"Hello, World!\";\n\n/* String methods */\nupper = text.upper();\nlower = text.lower();\nlength = text.len();\n\n(\"Upper: \" + upper).echo();\n(\"Lower: \" + lower).echo();\n(\"Length: \" + length).echo();\n\n/* String splitting and joining */\nwords = text.split(\", \");\njoined = words.join(\" - \");\n(\"Joined: \" + joined).echo();\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#command-line-options", "title": "Command Line Options", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#basic-usage", "title": "Basic Usage", "text": "<pre><code># Run a script file\ngrapa -cfile script.grc\n\n# Run with arguments\ngrapa -cfile script.grc arg1 arg2\n\n# Interactive mode\ngrapa\n\n# Help\ngrapa -h\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#script-arguments", "title": "Script Arguments", "text": "<p>Access command line arguments in your script: <pre><code>/* Get all arguments */\nargs = $sys.argv;\n\n/* Get specific argument */\nfirst_arg = args[1];\n(\"First argument: \" + first_arg).echo();\n</code></pre></p>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#common-patterns", "title": "Common Patterns", "text": "", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#configuration-files", "title": "Configuration Files", "text": "<pre><code>/* Read JSON config */\nconfig_text = $file().get(\"config.json\").str();\nconfig = config_text.json();\n\n/* Use configuration */\nhost = config.host;\nport = config.port;\n(\"Connecting to \" + host + \":\" + port).echo();\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#error-handling", "title": "Error Handling", "text": "<pre><code>/* Try-catch equivalent */\niferr {\n    result = 10 / 0;\n    \"This won't print\".echo();\n} {\n    (\"Error occurred: \" + $sys.error).echo();\n}\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#working-with-directories", "title": "Working with Directories", "text": "<pre><code>/* List files in directory */\nfiles = $file().ls(\".\");\nfor (file in files) {\n    if (file.type == \"file\") {\n        (\"File: \" + file.name).echo();\n    } else {\n        (\"Directory: \" + file.name).echo();\n    }\n}\n</code></pre>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#next-steps", "title": "Next Steps", "text": "<ul> <li>API Reference: See Function Quick Reference for all available functions</li> <li>Examples: Check out Examples for more complex use cases</li> <li>Python Integration: If you also use Python, see Python Integration Guide</li> <li>Troubleshooting: For common issues, see Troubleshooting</li> </ul>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "CLI_QUICKSTART/#tips", "title": "Tips", "text": "<ul> <li>Parallel Operations: <code>map</code> and <code>filter</code> are parallel by default and great for data processing</li> <li>File Extensions: Use <code>.grc</code> extension for Grapa script files</li> <li>Interactive Mode: Run <code>grapa</code> without arguments for interactive experimentation</li> <li>Error Messages: Grapa provides detailed error messages to help debug issues</li> </ul>", "tags": ["user", "highlevel", "cli", "quickstart"]}, {"location": "EXAMPLES/", "title": "Grapa Examples", "text": "<p>This document provides practical examples of Grapa usage, organized from basic to advanced.</p> <p>For Python Users: See the Python Integration Guide and Migration Tips for Python Users for help translating Python code and using Grapa from Python.</p> <p>See Also: - Getting Started - Python-to-Grapa Migration Guide - JS-to-Grapa Migration Guide - Language Reference</p>"}, {"location": "EXAMPLES/#how-to-use-this-file", "title": "How to use this file", "text": "<ul> <li>Start with the basic examples and work your way down.</li> <li>Copy/paste examples into the Grapa REPL or a <code>.grc</code> file to experiment.</li> <li>For syntax rules, see the Syntax Quick Reference.</li> </ul>"}, {"location": "EXAMPLES/#syntax-reminders", "title": "Syntax Reminders", "text": "<ul> <li>Every statement and every block (including after closing braces) must end with a semicolon (<code>;</code>).</li> <li>Use block comments (<code>/* ... */</code>), not line comments (<code>// ...</code>).</li> <li>To append to arrays, use the <code>+=</code> operator (not <code>.push()</code> or <code>.append()</code>).</li> <li>See Syntax Quick Reference for more.</li> </ul>"}, {"location": "EXAMPLES/#table-of-contents", "title": "Table of Contents", "text": "<ul> <li>Basic Examples</li> <li>Data Processing</li> <li>Dynamic Code Execution</li> <li>Pattern Matching (Grep)</li> </ul>"}, {"location": "EXAMPLES/#basic-examples", "title": "Basic Examples", "text": ""}, {"location": "EXAMPLES/#hello-world", "title": "Hello World", "text": "<pre><code>/* Hello World */\n\"Hello, Grapa!\".echo();\n</code></pre>"}, {"location": "EXAMPLES/#basic-arithmetic", "title": "Basic Arithmetic", "text": "<pre><code>/* Unlimited precision arithmetic */\nresult = 123456789012345678901234567890 * 987654321098765432109876543210;\nresult.echo();\n</code></pre>"}, {"location": "EXAMPLES/#working-with-lists", "title": "Working with Lists", "text": "<pre><code>numbers = [1, 2, 3, 4, 5];\nsum = numbers.reduce(op(a, b) { a + b; }, 0);\n(\"Sum: \" + sum).echo();\n</code></pre>"}, {"location": "EXAMPLES/#generating-a-sequence-range", "title": "Generating a Sequence (Range)", "text": "<pre><code>/* Generate an array of numbers 0..9 */\nseq = (10).range(0,1);\nseq.echo();  /* Output: [0,1,2,3,4,5,6,7,8,9] */\n</code></pre>"}, {"location": "EXAMPLES/#for-loop-equivalent-with-range-and-reduce", "title": "For-Loop Equivalent with range() and reduce()", "text": "<p>You can use <code>.range()</code> and <code>.reduce()</code> together to replicate most for-loop behaviors, especially for accumulation or collecting values.</p> <p>Sum numbers 0..9: <pre><code>sum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);\nsum.echo();  /* Output: 45 */\n</code></pre></p> <p>Collect even numbers 0..9: <pre><code>evens = (10).range(0,1).reduce(op(acc, x) {\n    if (x % 2 == 0) { acc += x; };\n}, []);\nevens.echo();  /* Output: [0,2,4,6,8] */\n</code></pre></p> <p>Note: This is the idiomatic Grapa alternative to a classic for loop for accumulation and transformation tasks.</p>"}, {"location": "EXAMPLES/#parallel-sequence-processing-with-range-and-mapfilter", "title": "Parallel Sequence Processing with range() and map()/filter()", "text": "<p>You can use <code>.range()</code> with <code>.map()</code> or <code>.filter()</code> to generate or filter sequences in parallel. This is useful for data generation, transformation, or extracting subsets.</p> <p>Example: Squares of 0..9 <pre><code>squares = (10).range(0,1).map(op(x) { x * x; });\nsquares.echo();  /* Output: [0,1,4,9,16,25,36,49,64,81] */\n</code></pre></p> <p>Example: Even numbers 0..9 <pre><code>evens = (10).range(0,1).filter(op(x) { x % 2 == 0; });\nevens.echo();  /* Output: [0,2,4,6,8] */\n</code></pre></p> <p>Warning: <code>.map()</code> and <code>.filter()</code> are parallel by default and will create one thread per item. For large arrays, always specify a thread count to avoid resource exhaustion: <pre><code>big = (1000000).range(0,1).map(op(x) { x * x; }, 8);  // Limit to 8 threads\n</code></pre></p>"}, {"location": "EXAMPLES/#data-processing", "title": "Data Processing", "text": "<p>Best Practices: - Use <code>.range()</code> to generate a sequence array: e.g., <code>(10).range(0,1)</code> gives <code>[0,1,2,3,4,5,6,7,8,9]</code>. - Use functional chaining: <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> for processing lists, arrays, and parsed data. - Always check for <code>$ERR</code> when accessing keys or attributes that may not exist (e.g., <code>if (item.type() != $ERR)</code>). - Use <code>[]</code> for list/array access, not <code>.get()</code> (which is for objects/tables). - Handle errors explicitly; Grapa does not support <code>try/catch</code>\u2014check return values and use <code>if</code> statements for error handling. - See docs/obj/transform.md for advanced range/sequence usage. Parallel ETL Advantage: Grapa's parallel data processing (e.g., with <code>.map()</code>, <code>.filter()</code>, <code>.reduce()</code>) is a core, production-ready feature. Parallelism is well tested and hardened for real-world ETL workloads, making Grapa especially powerful for high-throughput data tasks.</p>"}, {"location": "EXAMPLES/#string-word-length", "title": "String Word Length", "text": "<p>The following returns the length of each word in a string: <pre><code>/* Returns the length of each word in a string */\n\"this is a test\".split(\" \").reduce(op(a,b){a+=b.len();},[]);\n// Output: [4,2,1,4]\n</code></pre></p>"}, {"location": "EXAMPLES/#file-processing", "title": "File Processing", "text": "<pre><code>/* Read and process a file */\ncontent = $file().read(\"data.txt\");\nlines = content.split(\"\\n\");\nfiltered = lines.filter(op(line) { line.len() &gt; 0; });\nresult = filtered.map(op(line) { line.upper(); });\nresult.echo();\n</code></pre>"}, {"location": "EXAMPLES/#json-processing", "title": "JSON Processing", "text": "<pre><code>/* Parse and process JSON data */\njson_data = $file().read(\"data.json\").json();\nusers = json_data.users;\nactive_users = users.filter(op(user) { user.active == true; });\nnames = active_users.map(op(user) { user.name; });\nnames.echo();\n</code></pre>"}, {"location": "EXAMPLES/#dynamic-code-execution", "title": "Dynamic Code Execution", "text": "<p>Grapa's most powerful feature is its ability to compile and execute code at runtime. This enables advanced meta-programming patterns:</p>"}, {"location": "EXAMPLES/#basic-dynamic-execution", "title": "Basic Dynamic Execution", "text": "<pre><code>/* Direct string execution */\nop()(\"'Hello, World!'.echo();\")();\n/* Output: Hello, World! */\n\n/* With parameters */\nfunc = op(\"name\"=0)(\"'Hello, ' + name + '!'.echo();\");\nfunc(\"Grapa\");\n/* Output: Hello, Grapa! */\n</code></pre>"}, {"location": "EXAMPLES/#dynamic-function-generation", "title": "Dynamic Function Generation", "text": "<pre><code>/* Generate functions from configuration */\noperations = [\"add\", \"sub\", \"mul\", \"div\"];\nfuncs = {};\ni = 0;\nwhile (i &lt; operations.len()) {\n    op_name = operations.get(i);\n    code = \"a \" + op_name + \" b\";\n    funcs[op_name] = op(\"a\"=0, \"b\"=0)(code);\n    i += 1;\n}\n\n/* Execute generated functions */\nfuncs[\"add\"](10, 5).echo();  /* 15 */\nfuncs[\"sub\"](10, 5).echo();  /* 5 */\nfuncs[\"mul\"](10, 5).echo();  /* 50 */\nfuncs[\"div\"](10, 5).echo();  /* 2 */\n</code></pre>"}, {"location": "EXAMPLES/#template-based-code-generation", "title": "Template-Based Code Generation", "text": "<pre><code>/* Create reusable templates */\ntemplate = \"result = base * multiplier + offset; result\";\nprocess = op(\"base\"=0, \"multiplier\"=1, \"offset\"=0)(template);\nprocess(10, 2, 5).echo();  /* 25 */\n\n/* Dynamic script evaluation */\nuser_input = \"2 * (3 + 4)\";\nresult = $sys().eval(user_input);\n(\"Result: \" + result).echo();  /* Result: 14 */\n</code></pre>"}, {"location": "EXAMPLES/#compiled-execution-for-performance", "title": "Compiled Execution for Performance", "text": "<pre><code>/* Compile once, execute many times */\ncompiled = $sys().compile(\"x = input * 2; y = x + offset; y\");\n\n/* Execute with different parameters */\nresult1 = $sys().eval(compiled, {\"input\": 10, \"offset\": 5});\nresult1.echo();  /* 25 */\n\nresult2 = $sys().eval(compiled, {\"input\": 20, \"offset\": 10});\nresult2.echo();  /* 50 */\n</code></pre>"}, {"location": "EXAMPLES/#system-level-evaluation", "title": "System-Level Evaluation", "text": "<pre><code>/* Evaluate expressions with parameters */\nresult = $sys().eval(\"x + y\", {\"x\": 5, \"y\": 3});\nresult.echo();  /* 8 */\n\n/* Complex expressions */\nresult = $sys().eval(\"(a + b) * c\", {\"a\": 2, \"b\": 3, \"c\": 4});\nresult.echo();  /* 20 */\n</code></pre>"}, {"location": "EXAMPLES/#grep-pattern-matching", "title": "Grep - Pattern Matching", "text": ""}, {"location": "EXAMPLES/#basic-pattern-matching", "title": "Basic Pattern Matching", "text": "<pre><code>\"Hello world\".grep(\"world\")\n[\"Hello world\"]\n</code></pre>"}, {"location": "EXAMPLES/#match-only-output", "title": "Match-Only Output", "text": "<pre><code>\"Hello world\".grep(\"world\", \"o\")\n[\"world\"]\n</code></pre>"}, {"location": "EXAMPLES/#case-insensitive-matching", "title": "Case-Insensitive Matching", "text": "<pre><code>\"Hello WORLD\".grep(\"world\", \"i\")\n[\"Hello WORLD\"]\n\n// Unicode case folding examples\n\"\u0130stanbul \u0131stanbul\".grep(\"istanbul\", \"i\")\n[\"\u0130stanbul \u0131stanbul\"]  // Turkish I characters\n\n\"Stra\u00dfe\".grep(\"strasse\", \"i\")\n[\"Stra\u00dfe\"]  // German sharp S\n\n\"\u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\".grep(\"\u0393\u03a1\u0391\u039c\u039c\u0391\", \"i\")\n[\"\u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\"]  // Greek final sigma\n\n\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\".grep(\"CAFE RESUME NAIVE\", \"i\")\n[\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\"]  // Accented characters\n</code></pre>"}, {"location": "EXAMPLES/#context-lines", "title": "Context Lines", "text": "<pre><code>input = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\";\n\n// After context (2 lines after match)\ninput.grep(\"Line 2\", \"A2\")\n[\"Line 2\\n\", \"Line 3\\n\", \"Line 4\\n\"]\n\n// Before context (2 lines before match)\ninput.grep(\"Line 5\", \"B2\")\n[\"Line 3\\n\", \"Line 4\\n\", \"Line 5\\n\"]\n\n// Combined context (1 line before and after)\ninput.grep(\"Line 4\", \"A1B1\")\n[\"Line 3\\n\", \"Line 4\\n\", \"Line 5\\n\"]\n\n// Context merging example - overlapping regions are merged\ninput2 = \"a\\nb\\nc\\nd\\ne\\nf\";\ninput2.grep(\"c|d\", \"A1B1\")\n[\"b\\n\", \"c\\n\", \"d\\n\", \"e\\n\"]  // Overlapping context merged into single block\n\n// Context separators between non-overlapping blocks\ninput3 = \"a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\";\ninput3.grep(\"c|i\", \"A1B1\")\n[\"b\\n\", \"c\\n\", \"d\\n\", \"--\\n\", \"h\\n\", \"i\\n\", \"j\\n\"]  // -- separator between blocks\n</code></pre>"}, {"location": "EXAMPLES/#context-separators", "title": "Context Separators", "text": "<pre><code>// Multiple non-overlapping context blocks are separated by -- lines\ninput = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\";\ninput.grep(\"Line 2|Line 6\", \"A1B1\")\n[\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\", \"--\\n\", \"Line 5\\n\", \"Line 6\\n\", \"Line 7\"]\n\n// Context separators are not output in match-only mode\ninput.grep(\"Line 2|Line 6\", \"oA1B1\")\n[\"Line 2\", \"Line 6\"]  // Only matches, no context or separators\n\n// JSON output uses --- as separator\ninput.grep(\"Line 2|Line 6\", \"jA1B1\")\n[\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\", \"---\", \"Line 5\\n\", \"Line 6\\n\", \"Line 7\"]\n</code></pre>"}, {"location": "EXAMPLES/#column-numbers", "title": "Column Numbers", "text": "<pre><code>// Get column positions of matches\n\"foo bar baz\\nbar foo baz\\nbaz bar foo\".grep(\"foo\", \"oT\")\n[\"1:foo\", \"5:foo\", \"9:foo\"]\n\n// Multiple matches on same line\n\"foofoo bar\".grep(\"foo\", \"oT\")\n[\"1:foo\", \"4:foo\"]\n\n// Column numbers with other options\n\"Hello world\".grep(\"world\", \"oTL\")\n[\"7:\\x1b[1;31mworld\\x1b[0m\"]\n</code></pre>"}, {"location": "EXAMPLES/#color-output", "title": "Color Output", "text": "<pre><code>// Add ANSI color codes around matches\n\"Hello world\".grep(\"world\", \"oL\")\n[\"\\x1b[1;31mworld\\x1b[0m\"]\n\n// Color with case-insensitive matching\n\"Hello WORLD\".grep(\"world\", \"oiL\")\n[\"\\x1b[1;31mWORLD\\x1b[0m\"]\n\n// Color with column numbers\n\"Hello world\".grep(\"world\", \"oTL\")\n[\"7:\\x1b[1;31mworld\\x1b[0m\"]\n</code></pre>"}, {"location": "EXAMPLES/#unicode-support", "title": "Unicode Support", "text": "<pre><code>\"caf\u00e9 r\u00e9sum\u00e9\".grep(\"cafe\", \"d\")\n[\"caf\u00e9 r\u00e9sum\u00e9\"]\n</code></pre>"}, {"location": "EXAMPLES/#grapheme-cluster-patterns", "title": "Grapheme Cluster Patterns", "text": "<pre><code>// Extract individual grapheme clusters\n\"e\\u0301\\n\ud83d\ude00\\u2764\\ufe0f\".grep(\"\\\\X\", \"o\")\n[\"\u00e9\", \"\\n\", \"\ud83d\ude00\", \"\u2764\ufe0f\"]\n\n// Complex grapheme clusters with combining marks\n\"caf\u00e9 r\u00e9sum\u00e9\".grep(\"\\\\X\", \"o\")\n[\"c\", \"a\", \"f\", \"\u00e9\", \" \", \"r\", \"\u00e9\", \"s\", \"u\", \"m\", \"\u00e9\"]\n\n// Emoji with modifiers\n\"\ud83d\ude00\\u2764\\ufe0f\".grep(\"\\\\X\", \"o\")\n[\"\ud83d\ude00\", \"\u2764\ufe0f\"]\n</code></pre>"}, {"location": "EXAMPLES/#error-handling", "title": "Error Handling", "text": "<pre><code>// Invalid patterns return empty arrays instead of crashing\n\"Hello world\".grep(\"(\", \"o\")\n[]\n\n\"Hello world\".grep(\")\", \"o\")\n[]\n\n\"Hello world\".grep(\"a{\", \"o\")\n[]\n\n// Safe pattern testing\npatterns = [\"(\", \")\", \"a{\", \"\", \"\\\\\"];\nfor (i = 0; i &lt; patterns.len(); i = i + 1) {\n    result = \"test\".grep(patterns[i], \"o\");\n    (\"Pattern '\" + patterns[i] + \"' result: \" + result.str() + \"\\n\").echo();\n}\n</code></pre>"}, {"location": "EXAMPLES/#unicode-edge-cases", "title": "Unicode Edge Cases", "text": "<pre><code>// Zero-length matches (now working correctly)\n\"abc\".grep(\"^\", \"o\")\n[\"\"]  // Empty string for each line\n\n// Unicode boundary handling\n\"\u00c9\u00d1\u00dc\".grep(\".\", \"o\")\n[\"\u00c9\", \"\u00d1\", \"\u00dc\"]\n\n// Case-insensitive Unicode (may group characters due to Unicode complexity)\n\"\u00c9\u00d1\u00dc\".grep(\".\", \"oi\")\n[\"\u00c9\u00d1\", \"\u00dc\"]  // \u00c9 and \u00d1 may be grouped together\n</code></pre>"}, {"location": "EXAMPLES/#word-boundaries", "title": "Word Boundaries", "text": "<pre><code>// Match only standalone words\n\"hello world hello123 hello_test hello-world hello\".grep(\"hello\", \"wo\")\n[\"hello\", \"hello\"]\n\n// Word boundaries with different characters\n\"hello_test hello test_hello _hello_ hello\".grep(\"hello\", \"wo\")\n[\"hello\"]\n\n// Word boundaries with case-insensitive matching\n\"Hello WORLD hello123 HELLO_test\".grep(\"HELLO\", \"woi\")\n[\"Hello\", \"HELLO\"]\n\n// Manual vs automatic word boundaries\n\"hello world hello123\".grep(\"\\\\bhello\\\\b\", \"o\")\n[\"hello\"]\n\n\"hello world hello123\".grep(\"hello\", \"wo\")\n[\"hello\"]\n</code></pre>"}, {"location": "EXAMPLES/#custom-delimiters", "title": "Custom Delimiters", "text": "<pre><code>\"Line 1|Line 2|Line 3\".grep(\"Line 2\", \"\", \"|\")\n[\"Line 2\"]\n</code></pre>"}, {"location": "EXAMPLES/#null-data-mode-limited-support", "title": "Null-Data Mode (Limited Support)", "text": "<pre><code>// Note: The \"z\" option is implemented but limited by Grapa's string parser\n// \\x00 escape sequences are not converted to actual null bytes\n\"foo\\x00bar\\x00baz\".grep(\"foo\", \"oz\")\n// Expected: ['foo'] (null-separated records)\n// Current: ['foo\\x00bar\\x00baz'] (treats \\x00 as literal characters)\n\n// Workaround: Use custom delimiters\n\"foo|bar|baz\".grep(\"foo\", \"\", \"|\")\n// Result: ['foo'] (works correctly)\n</code></pre>"}, {"location": "EXAMPLES/#grammer-updating", "title": "Grammer Updating", "text": "<p>The standard grammer loaded by default includes suport for 2 user defined rules that assist in easily modifying the grammer.</p> <p>custom_start - The engine will evaulate the $start rule before evaluating the predefined $start rule. Setting a variable \"start\" with a rule will cause the engine to call the user defined rule first. If this variable is set locally within a function, it will only apply to scripts parsed from within the scope of that function.</p> <p>custom_function - The engine will evaluate the variable \"function\" if it is a $RULE as a part of the $function rule. To verify, check the $function variable. Used in contexts where a value is returned.</p> <p>custom_command - Same as above. Used in contexts where a value is not returned.</p> <p>Alternative, redefine any of the predefined rules for the default grammer. Take caution on changing the global variable, unless the change is inteded for the entire session. Restart the app to revert back. </p> <p>If any of the above is set as a local variable within some scope, such as a class instance or a function, the modification will only apply for exectution within that scope. You can, for example, have muliple threads with unique modifications that apply separately. This is bascially the result of having the rules implemented as variables.</p>"}, {"location": "EXAMPLES/#pca-principal-component-analysis", "title": "PCA - Principal Component Analysis", "text": "<p>Center the data around the mean, calcualte covariance, and than the eigenvalues and eigenvectors. Identify the number of components based on the eigenvalues, and select that number of eigenvectors. Use the eigenvectors to calculate PCA. Use the result for the new feature (replacing the old features). Use the same method for generating the feature from new values (need to save the mean and eigenvectors for this).</p> <pre><code>X=[[3.4,9.1,1.4],[9.1,1.2,8.2],[1.4,8.2,5.2]];\nM=X.mean(1);\nR=(X-M).cov(1).eigh();\n\nR.w;\n[41.7879952005570829404677683153157,4.4920047994429170595322314913591,0.000000000000000000000000193325118422339381744140663363374750345332]\n\nY=R.v.left(1);\n(Y.t() .* (X-M).t()).t();\n\n[[4.3153778898305898473304814235512],[-7.4322629041586428646647322175959],[3.1168850143280530173342507940447]]\n\n(Y.t() .* ([[3.4,9.1,1.4]]-M).t()).t();\n[[4.3153778898305898473304814235512]]\n\n(Y.t() .* ([[3.4,9.23,2.4]]-M).t()).t();\n[[3.9393492470695862312625754586492]]\n</code></pre>"}, {"location": "EXAMPLES/#advanced-context-examples", "title": "Advanced Context Examples", "text": "<pre><code>// Context merging - overlapping regions are automatically merged\ninput = \"a\\nb\\nc\\nd\\ne\\nf\";\ninput.grep(\"c|d\", \"A1B1\")\n[\"b\\n\", \"c\\n\", \"d\\n\", \"e\\n\"]  // Overlapping context merged into single block\n\n// Context separators between non-overlapping blocks\ninput2 = \"a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\";\ninput2.grep(\"c|i\", \"A1B1\")\n[\"b\\n\", \"c\\n\", \"d\\n\", \"--\\n\", \"h\\n\", \"i\\n\", \"j\\n\"]  // -- separator between blocks\n\n// Complex context with multiple options\nlog_content.grep(\"error\", \"A2B1io\")  // 2 lines after, 1 before, match-only, case-insensitive\n</code></pre>"}, {"location": "EXAMPLES/#advanced-unicode-examples", "title": "Advanced Unicode Examples", "text": "<pre><code>// Comprehensive Unicode \"o\" option testing\n\"\u00e9\u00f1\u00fc\".grep(\".\", \"o\")\n[\"\u00e9\", \"\u00f1\", \"\u00fc\"]  // Perfect Unicode character extraction\n\n// Unicode with normalization and \"o\" option\n\"caf\u00e9 r\u00e9sum\u00e9\".grep(\"\\\\X\", \"oN\")\n[\"c\", \"a\", \"f\", \"\u00e9\", \" \", \"r\", \"\u00e9\", \"s\", \"u\", \"m\", \"\u00e9\"]  // Normalized grapheme clusters\n\n// Complex Unicode scenarios with \"o\" option\n\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\".grep(\"\\\\X\", \"o\")\n[\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"]  // Family emoji as single grapheme cluster\n\n// Unicode properties with \"o\" option\n\"Hello \u4e16\u754c 123\".grep(\"\\\\p{L}+\", \"o\")\n[\"Hello\", \"\u4e16\u754c\"]  // Unicode letters only\n\n// Diacritic-insensitive with \"o\" option\n\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\".grep(\"cafe\", \"od\")\n[\"caf\u00e9\"]  // Diacritic-insensitive matching\n</code></pre>"}, {"location": "EXAMPLES/#next-steps", "title": "Next Steps", "text": "<ul> <li>Learn about Testing your Grapa code</li> <li>Check out the Grep functionality for advanced pattern matching</li> <li>Review the Syntax Quick Reference for more syntax rules and tips</li> </ul>"}, {"location": "EXAMPLES/#thread-safety-and-parallelism", "title": "Thread Safety and Parallelism", "text": "<p>Grapa is fully thread safe by design. All variable and data structure updates are internally synchronized at the C++ level, so you will never encounter crashes or corruption from concurrent access. However, if your program logic allows multiple threads to read and write the same variable or data structure, you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>. To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access. Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like an array or scalar) will return an error.</p> <p>Canonical Example: <pre><code>lock_obj = $thread();\nlock_obj.lock();\n// ... perform thread-safe operations on shared data ...\nlock_obj.unlock();\n</code></pre></p> <p>See Threading and Locking and Function Operators: static and const for details and best practices.</p>"}, {"location": "FUNCTION_QUICK_REFERENCE/", "title": "Grapa System Functions Quick Reference", "text": "", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#core-language", "title": "Core Language", "text": "<p><code>rule</code>, <code>ruleval</code>, <code>ruleref</code>, <code>token</code>, <code>grammar</code>, <code>reset</code>, <code>shell</code>, <code>eval</code>, <code>exec</code>, <code>post</code>, <code>sleep</code>, <code>exit</code>, <code>getenv</code>, <code>putenv</code>, <code>include</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#variables-scope", "title": "Variables &amp; Scope", "text": "<p><code>name</code>, <code>getname</code>, <code>lit</code>, <code>ref</code>, <code>setnull</code>, <code>var</code>, <code>assign</code>, <code>assignappend</code>, <code>assignextend</code>, <code>global</code>, <code>parent</code>, <code>this</code>, <code>local</code>, <code>static</code>, <code>const</code>, <code>setconst</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#data-structures", "title": "Data Structures", "text": "<p><code>createarray</code>, <code>createtuple</code>, <code>createlist</code>, <code>createxml</code>, <code>createel</code>, <code>createtag</code>, <code>createop</code>, <code>createcode</code>, <code>createrule</code>, <code>extend</code>, <code>remove</code>, <code>prepend</code>, <code>pop</code>, <code>call</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#search-analysis", "title": "Search &amp; Analysis", "text": "<p><code>search</code>, <code>findall</code>, <code>sort</code>, <code>argsort</code>, <code>unique</code>, <code>group</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#control-flow", "title": "Control Flow", "text": "<p><code>return</code>, <code>break</code>, <code>if</code>, <code>while</code>, <code>scope</code>, <code>switch</code>, <code>case</code>, <code>plan</code>, <code>wrap</code>, <code>op</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#functional-programming", "title": "Functional Programming", "text": "<p><code>map</code>, <code>reduce</code>, <code>filter</code>, <code>range</code></p> <p>Note: <code>map</code> and <code>filter</code> are parallel by default and robust for ETL workloads; <code>reduce</code> is sequential. All are production-ready for high-throughput data processing.</p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#type-io", "title": "Type &amp; I/O", "text": "<p><code>isint</code>, <code>iferr</code>, <code>message</code>, <code>string</code>, <code>echo</code>, <code>console</code>, <code>prompt</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#cryptography", "title": "Cryptography", "text": "<p><code>genprime</code>, <code>staticprime</code>, <code>isprime</code>, <code>isaks</code>, <code>random</code>, <code>setbit</code>, <code>clearbit</code>, <code>genbits</code>, <code>genkeys</code>, <code>encode</code>, <code>encoderaw</code>, <code>decode</code>, <code>sign</code>, <code>signadd</code>, <code>verify</code>, <code>verifyrecover</code>, <code>secret</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#math-basic", "title": "Math - Basic", "text": "<p><code>setfloat</code>, <code>setfix</code>, <code>root</code>, <code>pow</code>, <code>mod</code>, <code>modpow</code>, <code>modinv</code>, <code>abs</code>, <code>gcd</code>, <code>e</code>, <code>pi</code>, <code>ln</code>, <code>log</code>, <code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#math-trigonometry", "title": "Math - Trigonometry", "text": "<p><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>cot</code>, <code>sec</code>, <code>csc</code>, <code>asin</code>, <code>acos</code>, <code>atan</code>, <code>acot</code>, <code>asec</code>, <code>acsc</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#math-hyperbolic", "title": "Math - Hyperbolic", "text": "<p><code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>coth</code>, <code>sech</code>, <code>csch</code>, <code>asinh</code>, <code>acosh</code>, <code>atanh</code>, <code>acoth</code>, <code>asech</code>, <code>acsch</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#math-special", "title": "Math - Special", "text": "<p><code>atan2</code>, <code>hypot</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#bit-operations", "title": "Bit Operations", "text": "<p><code>bsl</code>, <code>bsr</code>, <code>bor</code>, <code>band</code>, <code>or</code>, <code>and</code>, <code>xor</code>, <code>inv</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#matrix-operations", "title": "Matrix Operations", "text": "<p><code>t</code>, <code>rref</code>, <code>det</code>, <code>rank</code>, <code>solve</code>, <code>cov</code>, <code>neg</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#type-conversion", "title": "Type Conversion", "text": "<p><code>bits</code>, <code>bytes</code>, <code>len</code>, <code>bool</code>, <code>not</code>, <code>int</code>, <code>raw</code>, <code>base</code>, <code>str</code>, <code>list</code>, <code>array</code>, <code>vector</code>, <code>xml</code>, <code>float</code>, <code>fix</code>, <code>time</code>, <code>type</code>, <code>describe</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#string-operations", "title": "String Operations", "text": "<p><code>left</code>, <code>right</code>, <code>mid</code>, <code>midtrim</code>, <code>rtrim</code>, <code>ltrim</code>, <code>trim</code>, <code>rrot</code>, <code>lrot</code>, <code>rpad</code>, <code>lpad</code>, <code>reverse</code>, <code>replace</code>, <code>grep</code>, <code>split</code>, <code>join</code>, <code>lower</code>, <code>upper</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#arraymatrix", "title": "Array/Matrix", "text": "<p><code>shape</code>, <code>reshape</code>, <code>dot</code>, <code>identity</code>, <code>diagonal</code>, <code>triu</code>, <code>tril</code>, <code>eigh</code>, <code>sum</code>, <code>mean</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#comparison", "title": "Comparison", "text": "<p><code>eq</code>, <code>neq</code>, <code>gteq</code>, <code>gt</code>, <code>lteq</code>, <code>lt</code>, <code>cmp</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#time", "title": "Time", "text": "<p><code>utc</code>, <code>tz</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#file-system", "title": "File System", "text": "<p>Navigation: <code>file_pwd</code> (working dir), <code>file_cd</code> (change working dir), <code>file_phd</code> (home dir), <code>file_chd</code> (change home dir) Operations: <code>file_ls</code>, <code>file_mk</code>, <code>file_rm</code>, <code>file_set</code>, <code>file_get</code>, <code>file_info</code> (metadata: type, size, existence) Database: <code>file_table</code>, <code>file_mkfield</code>, <code>file_rmfield</code>, <code>file_split</code> (split large files), <code>file_debug</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#networking", "title": "Networking", "text": "<p><code>net_mac</code>, <code>net_interfaces</code>, <code>net_connect</code>, <code>net_bind</code>, <code>net_listen</code>, <code>net_onlisten</code>, <code>net_disconnect</code>, <code>net_proxy</code>, <code>net_certificate</code>, <code>net_private</code>, <code>net_trusted</code>, <code>net_verify</code>, <code>net_chain</code>, <code>net_host</code>, <code>net_send</code>, <code>net_receive</code>, <code>net_pending</code>, <code>net_onreceive</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#http", "title": "HTTP", "text": "<p><code>http_read</code>, <code>http_send</code>, <code>http_message</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#threading", "title": "Threading", "text": "<p><code>thread_trylock</code>, <code>thread_lock</code>, <code>thread_unlock</code>, <code>thread_wait</code>, <code>thread_signal</code>, <code>thread_waiting</code>, <code>thread_start</code>, <code>thread_stop</code>, <code>thread_started</code>, <code>thread_suspend</code>, <code>thread_resume</code>, <code>thread_suspended</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#gui-widgets", "title": "GUI Widgets", "text": "<p><code>widget_new</code>, <code>widget_show</code>, <code>widget_hide</code>, <code>widget_redraw</code>, <code>widget_resizable</code>, <code>widget_resize</code>, <code>widget_parent</code>, <code>widget_child</code>, <code>widget_next</code>, <code>widget_focus</code>, <code>widget_get</code>, <code>widget_set</code>, <code>widget_handle</code>, <code>widget_callback</code>, <code>widget_event_key</code>, <code>widget_append</code>, <code>widget_post</code>, <code>widget_clear</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#oop", "title": "OOP", "text": "<p><code>class</code>, <code>obj</code></p>", "tags": ["user", "highlevel"]}, {"location": "FUNCTION_QUICK_REFERENCE/#usage", "title": "Usage", "text": "<pre><code>// Direct call\nresult = $sys.function_name(params);\n\n// In BNF grammar\nexpression = $sys.add(term, expression);\n\n// In library files\nfunction = op(){@this.$sys.function_name(@var.{params});};\n</code></pre> <p>Total: 200+ system functions available </p> <p>See Also: - Getting Started - JS-to-Grapa Migration Guide - Examples </p>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/", "title": "Getting Started with Grapa", "text": "", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#who-is-this-for", "title": "Who is this for?", "text": "<p>Anyone new to Grapa, or looking for a quick refresher on installation, basic syntax, and first steps.</p>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#quick-start", "title": "Quick Start", "text": "<ol> <li>Install Grapa (see below for platform-specific instructions)</li> <li>Write your first script:</li> </ol> <pre><code>\"Hello, Grapa!\".echo();\n</code></pre> <ol> <li>Run it: <pre><code># Interactive mode\ngrapa\n\n# Run a command directly\ngrapa -ccmd \"'Hello, Grapa!'.echo();\"\n\n# Run from a file\ngrapa -cfile \"my_script.grc\"\n</code></pre></li> </ol> <p>See also: Syntax Quick Reference</p>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#key-syntax-rules-read-this-first", "title": "Key Syntax Rules (Read This First!)", "text": "<ul> <li>Every statement and every block (including after closing braces) must end with a semicolon (<code>;</code>).</li> <li>Use block comments (<code>/* ... */</code>), not line comments (<code>// ...</code>).</li> <li>Within <code>{}</code> blocks, comments must be on their own line, not at the end of a line.</li> <li>To append to arrays, use the <code>+=</code> operator (not <code>.push()</code> or <code>.append()</code>).</li> <li>Grapa uses dynamic typing by design - types are determined at runtime for maximum flexibility.</li> <li>See Syntax Quick Reference for more.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#installation", "title": "Installation", "text": "<ol> <li>Download the appropriate binary for your platform from the releases</li> <li>Extract the archive to a directory</li> <li>Add the directory to your PATH (optional but recommended)</li> </ol>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#your-first-grapa-program", "title": "Your First Grapa Program", "text": "<pre><code>/* Simple hello world */\n\"Hello, Grapa!\".echo();\n\n/* Basic arithmetic with unlimited precision */\nresult = 123456789012345678901234567890 * 987654321098765432109876543210;\nresult.echo();\n\n/* Working with lists */\nnumbers = [1, 2, 3, 4, 5];\nsum = numbers.reduce(op(a, b) { a + b; }, 0);\n(\"Sum: \" + sum).echo();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#core-concepts", "title": "Core Concepts", "text": "", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#everything-is-data", "title": "Everything is Data", "text": "<p>Grapa's most fundamental concept is that everything is data. Unlike traditional programming languages that distinguish between \"data\" and \"code,\" Grapa treats functions, classes, primitives, and everything else as different types of data that can be manipulated, stored, and passed around.</p> <pre><code>/* Functions are data ($OP type) */\nmy_function = op(x) { x * 2; };\nmy_function.type().echo();  /* $OP */\n\n/* Numbers are data ($INT type) */\nmy_number = 42;\nmy_number.type().echo();    /* $INT */\n\n/* Strings are data ($STR type) */\nmy_string = \"hello\";\nmy_string.type().echo();    /* $STR */\n\n/* Classes are data ($CLASS type) */\nMyClass = class { name = \"\"; };\nMyClass.type().echo();      /* $CLASS */\n\n/* You can store functions in variables */\nfunctions = [op(x) { x + 1; }, op(x) { x * 2; }];\nresult1 = functions[0](5);  /* 6 */\nresult2 = functions[1](5);  /* 10 */\n\n/* You can pass functions as parameters */\napply_func = op(func, value) { func(value); };\nresult = apply_func(op(x) { x * 3; }, 7);  /* 21 */\n</code></pre> <p>This unified data model enables powerful metaprogramming, code generation, and flexible data structures that would be complex in other languages.</p>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#dynamic-code-execution", "title": "Dynamic Code Execution", "text": "<p>Grapa's most powerful feature is its ability to compile and execute code at runtime:</p> <pre><code>/* Direct string execution */\nop()(\"'Hello, World!'.echo();\")();\n/* Output: Hello, World! */\n\n/* With parameters */\nfunc = op(\"name\"=0)(\"'Hello, ' + name + '!'.echo();\");\nfunc(\"Grapa\");\n/* Output: Hello, Grapa! */\n\n/* System-level evaluation */\nresult = $sys().eval(\"x + y\", {\"x\": 5, \"y\": 3});\nresult.echo();  /* 8 */\n\n/* Compiled execution for performance */\ncompiled = $sys().compile(\"result = input * 2 + offset; result\");\nresult = $sys().eval(compiled, {\"input\": 10, \"offset\": 5});\nresult.echo();  /* 25 */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#data-types", "title": "Data Types", "text": "<p>Grapa provides rich data types for modern data processing:</p> <pre><code>text = \"Hello, world!\";\nbig_number = 123456789012345678901234567890;\nmy_list = [1, 2, 3, \"hello\", true];\nmy_array = {1, 2, 3, 4, 5};\nmy_table = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"};\nmy_vector = &lt;1, 2, 3, 4, 5&gt;;\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#namespace-system", "title": "Namespace System", "text": "<p>Grapa automatically manages namespaces for variable scoping:</p> <pre><code>/* Global variables persist across function calls */\n$global.config = {\"debug\": true, \"timeout\": 30};\n\n/* Function creates its own local namespace */\nfunc = op(x) {\n    local_var = x * 2;  /* Local to this function */\n    config.echo();      /* Access global variable */\n    local_var.echo();   /* Access local variable */\n};\n\nfunc(5);\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#json-and-xml-support", "title": "JSON and XML Support", "text": "<pre><code>json_text = '{\"name\": \"John\", \"age\": 30, \"hobbies\": [\"reading\", \"coding\"]}';\ndata = json_text.json();\ndata.name.echo();  /* \"John\" */\ndata.hobbies[0].echo();  /* \"reading\" */\n\nxml_text = '&lt;person&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/person&gt;';\nxml_data = xml_text.xml();\nxml_data.findall(\"name\")[0].echo();  /* \"John\" */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#pattern-matching-with-grep", "title": "Pattern Matching with Grep", "text": "<pre><code>text = \"Hello world\\nGoodbye world\\nHello again\";\nmatches = text.grep(\"Hello\");\nmatches.echo();  /* [\"Hello world\", \"Hello again\"] */\n\nmatches = text.grep(\"world\", \"o\");\nmatches.echo();  /* [\"world\", \"world\"] */\n\nmatches = text.grep(\"hello\", \"i\");\nmatches.echo();  /* [\"Hello world\", \"Hello again\"] */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#common-patterns", "title": "Common Patterns", "text": "", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#data-processing", "title": "Data Processing", "text": "<pre><code>/* Data processing example */\ncontent = $file().read(\"data.txt\");\nlines = content.split(\"\\n\");\nfiltered = lines.filter(op(line) { line.len() &gt; 0; });\nresult = filtered.map(op(line) { line.upper(); });\nresult.echo();\n\njson_data = $file().read(\"data.json\").json();\nusers = json_data.users;\nactive_users = users.filter(op(user) { user.active == true; });\nnames = active_users.map(op(user) { user.name; });\nnames.echo();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#mathematical-operations", "title": "Mathematical Operations", "text": "<pre><code>a = 123456789012345678901234567890;\nb = 987654321098765432109876543210;\nproduct = a * b;\nproduct.echo();\n\nv1 = &lt;1, 2, 3&gt;;\nv2 = &lt;4, 5, 6&gt;;\ndot_product = v1.dot(v2);\ndot_product.echo();  /* 32 */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#string-processing", "title": "String Processing", "text": "<pre><code>text = \"  hello world  \";\ntrimmed = text.trim();\nupper = trimmed.upper();\nwords = upper.split(\" \");\nwords.echo();  /* [\"HELLO\", \"WORLD\"] */\n\ntext = \"Hello world, goodbye world\";\nmatches = text.grep(\"world\", \"o\");\nmatches.echo();  /* [\"world\", \"world\"] */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "GETTING_STARTED/#next-steps", "title": "Next Steps", "text": "<ul> <li>Explore Examples for more complex use cases</li> <li>Learn about Testing your Grapa code</li> <li>Dive into System Functions for advanced features</li> <li>Check out the Grep functionality for advanced pattern matching</li> <li>Review the Syntax Quick Reference for more syntax rules and tips </li> </ul> <p>Tip: Use <code>.range()</code> to generate arrays of numbers: <code>(n).range(start, step)</code>. </p> <p>Comment Style: - Only block comments (<code>/* ... */</code>) are supported in Grapa, and must always be on their own line. - <code>//</code> and <code>#</code> comments are not supported and will cause errors. - Within <code>{}</code> blocks, comments must be on their own line, not at the end of a line.</p> <p>Did you know? Grapa's parallel ETL/data processing is a core, production-ready feature. Parallelism is well tested and ideal for real-world, high-throughput data tasks. </p> <p>For Newcomers/Non-Python Users: - JS-to-Grapa Migration Guide - Language Reference - Examples</p> <p>For Python Users: See the Python Integration Guide and Migration Tips for Python Users for essential guidance on using Grapa from Python. </p>", "tags": ["user", "highlevel"]}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/", "title": "GrapaPy Namespace Solution", "text": ""}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#problem-solved", "title": "Problem Solved", "text": "<p>The original issue was that GrapaPy file and table operations were returning <code>{\"error\":-1}</code> when using the <code>$file()</code> object. This was caused by a fundamental misunderstanding of how GrapaPy handles namespaces.</p>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#root-cause", "title": "Root Cause", "text": "<p>GrapaPy maintains separate local and global namespaces: - Local namespace: Cleared between calls to <code>xy.eval()</code> - Global namespace: Persists across calls to <code>xy.eval()</code></p> <p>When we created a <code>$file()</code> object in the local namespace, it was being deleted before we could use it in subsequent calls.</p>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#solution", "title": "Solution", "text": "<p>Use the global namespace for objects that need to persist across calls:</p>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#correct-pattern", "title": "Correct Pattern", "text": "<ol> <li>First time (initialization): Use <code>$global.variable</code> to create/initialize the variable</li> <li>Subsequent times: Use just <code>variable</code> directly - Grapa will find it in the global namespace</li> </ol>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#example", "title": "Example", "text": "<pre><code>import grapapy\n\nxy = grapapy.grapa()\n\n# Initialize file system in global namespace (first time only)\nxy.eval(\"$global.fs = $file();\")\n\n# Use file system (no $global needed)\nxy.eval(\"fs.set('test.txt', 'Hello World');\")\ncontent = xy.eval(\"fs.get('test.txt');\")\nprint(content)  # Hello World\n</code></pre>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#variable-resolution-order", "title": "Variable Resolution Order", "text": "<p>Grapa searches for variables in this order: 1. Current context (within <code>{ }</code> brackets) 2. Function scope 3. Local namespace 4. Call stack namespaces 5. Global namespace</p>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#key-insights", "title": "Key Insights", "text": "<ol> <li>The <code>$</code> character is NOT the problem - It works correctly in GrapaPy</li> <li>Namespace management is the key - Use global namespace for persistent objects</li> <li>Only use <code>$global</code> for initialization - After that, just use the variable name</li> <li>All Grapa operations work - File system, database, grep, etc.</li> </ol>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#test-results", "title": "Test Results", "text": "<p>Our comprehensive test shows that with the global namespace approach:</p> <ul> <li>\u2705 File operations work perfectly</li> <li>\u2705 Table operations work perfectly  </li> <li>\u2705 Directory operations work perfectly</li> <li>\u2705 File splitting works perfectly</li> <li>\u2705 Performance operations work perfectly</li> <li>\u2705 Error handling works correctly</li> </ul>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#best-practices", "title": "Best Practices", "text": "<ol> <li>Initialize objects in global namespace: <code>$global.fs = $file();</code></li> <li>Use simple variable names: <code>fs.set()</code> instead of <code>$global.fs.set()</code></li> <li>Handle binary data properly: Check for bytes and decode if needed</li> <li>Use batch operations: Leverage Grapa's built-in loops for performance</li> </ol>"}, {"location": "GRAPAPY_NAMESPACE_SOLUTION/#conclusion", "title": "Conclusion", "text": "<p>The GrapaPy extension works perfectly for all Grapa operations when using the correct namespace management approach. The original <code>{\"error\":-1}</code> issues were entirely due to namespace scope, not fundamental problems with the extension.</p> <p>This solution enables full Python integration with Grapa's powerful file system, database, and grep capabilities. </p>"}, {"location": "GREP/", "title": "Grapa Grep Documentation", "text": "<p>Tip: Use the tabs below to switch between CLI and Python examples throughout this documentation.</p>"}, {"location": "GREP/#recent-fixes-and-known-gaps", "title": "Recent Fixes and Known Gaps", "text": "<ul> <li>Invert match and empty pattern logic now match ripgrep/grep (see test suite for details).</li> <li>Structured array output is a deliberate design choice and affects edge cases (see notes below).</li> <li>Remaining advanced gaps:<ul> <li>Multiline patterns with custom delimiters (Grapa extension, may not be fully ripgrep-compatible)</li> <li>Full Unicode grapheme cluster support (\\X)</li> <li>Parallel processing for very large inputs</li> <li>Deduplication (<code>d</code> option) in all modes</li> </ul> </li> <li>See <code>maintainers/BINARY_GREP.md</code> for internal details and future work.</li> </ul>"}, {"location": "GREP/#thread-safety-and-parallelism", "title": "Thread Safety and Parallelism", "text": "<p>Grapa is fully thread safe by design. All variable and data structure updates are internally synchronized at the C++ level, so you will never encounter crashes or corruption from concurrent access. However, if your program logic allows multiple threads to read and write the same variable or data structure (for example, when using parallel grep features), you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>. To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access. Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like an array or scalar) will return an error.</p> <p>Canonical Example:</p> CLIPython <pre><code>lock_obj = $thread();\nlock_obj.lock();\n/* ... perform thread-safe operations on shared data ... */\nlock_obj.unlock();\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\nxy.eval(\"\"\"\nlock_obj = $thread();\nlock_obj.lock();\n/* ... perform thread-safe operations on shared data ... */\nlock_obj.unlock();\n\"\"\")\n</code></pre> <p>See Threading and Locking and Function Operators: static and const for details and best practices.</p>"}, {"location": "GREP/#who-is-this-for", "title": "Who is this for?", "text": "<p>Anyone who wants to use Grapa's advanced pattern matching, achieve ripgrep parity, or understand Unicode/PCRE2 grep features in Grapa.</p>"}, {"location": "GREP/#key-syntax-rules", "title": "Key Syntax Rules", "text": "CLIPython <ul> <li>Use block comments (<code>/* ... */</code>), not line comments (<code>// ...</code>).</li> <li>To append to arrays, use the <code>+=</code> operator (not <code>.push()</code> or <code>.append()</code>).</li> <li>All statements and blocks must end with a semicolon (<code>;</code>).</li> </ul> <ul> <li>Use raw strings (<code>r\"...\"</code>) for regex patterns to avoid escaping issues</li> <li>Convert binary data using <code>.decode('latin-1')</code> for Grapa processing</li> <li>Use the <code>xy.eval()</code> method to execute Grapa code from Python</li> </ul>"}, {"location": "GREP/#basic-usage", "title": "Basic Usage", "text": ""}, {"location": "GREP/#pattern-matching", "title": "Pattern Matching", "text": "CLIPython <pre><code>/* Basic pattern matching */\ntext = \"Hello world\\nGoodbye world\";\nmatches = text.grep(\"world\");\nmatches.echo();  /* [\"Hello world\", \"Goodbye world\"] */\n\n/* Match-only output */\nmatches = text.grep(\"world\", \"o\");\nmatches.echo();  /* [\"world\", \"world\"] */\n\n/* Case-insensitive matching */\nmatches = text.grep(\"hello\", \"i\");\nmatches.echo();  /* [\"Hello world\"] */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Basic pattern matching\ntext = \"Hello world\\nGoodbye world\"\nmatches = xy.eval(\"text.grep('world');\", {\"text\": text})\nprint(matches)  # ['Hello world', 'Goodbye world']\n\n# Match-only output\nmatches = xy.eval(\"text.grep('world', 'o');\", {\"text\": text})\nprint(matches)  # ['world', 'world']\n\n# Case-insensitive matching\nmatches = xy.eval(\"text.grep('hello', 'i');\", {\"text\": text})\nprint(matches)  # ['Hello world']\n</code></pre>"}, {"location": "GREP/#unicode-and-normalization", "title": "Unicode and Normalization", "text": "<p>Grapa's grep supports full Unicode processing with normalization options:</p> CLIPython <pre><code>/* NFC normalization (default) */\nmatches = text.grep(\"caf\u00e9\", \"N\");\n\n/* NFD normalization */\nmatches = text.grep(\"caf\u00e9\", \"NFD\");\n\n/* NFKC normalization */\nmatches = text.grep(\"caf\u00e9\", \"NFKC\");\n\n/* NFKD normalization */\nmatches = text.grep(\"caf\u00e9\", \"NFKD\");\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# NFC normalization (default)\nmatches = xy.eval(\"text.grep('caf\u00e9', 'N');\", {\"text\": \"caf\u00e9\"})\n\n# NFD normalization\nmatches = xy.eval(\"text.grep('caf\u00e9', 'NFD');\", {\"text\": \"caf\u00e9\"})\n\n# NFKC normalization\nmatches = xy.eval(\"text.grep('caf\u00e9', 'NFKC');\", {\"text\": \"caf\u00e9\"})\n\n# NFKD normalization\nmatches = xy.eval(\"text.grep('caf\u00e9', 'NFKD');\", {\"text\": \"caf\u00e9\"})\n</code></pre>"}, {"location": "GREP/#unicode-properties", "title": "Unicode Properties", "text": "CLIPython <pre><code>/* Match letters */\nmatches = text.grep(\"\\\\p{L}+\");\n\n/* Match numbers */\nmatches = text.grep(\"\\\\p{N}+\");\n\n/* Match word characters */\nmatches = text.grep(\"\\\\w+\");\n\n/* Match grapheme clusters (Unicode extended grapheme clusters) */\nmatches = text.grep(\"\\\\X+\");\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Match letters\nmatches = xy.eval(\"text.grep(r'\\\\p{L}+');\", {\"text\": \"Hello \u4e16\u754c 123\"})\n\n# Match numbers\nmatches = xy.eval(\"text.grep(r'\\\\p{N}+');\", {\"text\": \"Hello \u4e16\u754c 123\"})\n\n# Match word characters\nmatches = xy.eval(\"text.grep(r'\\\\w+');\", {\"text\": \"Hello \u4e16\u754c 123\"})\n\n# Match grapheme clusters\nmatches = xy.eval(\"text.grep(r'\\\\X+');\", {\"text\": \"Hello \u4e16\u754c 123\"})\n</code></pre>"}, {"location": "GREP/#grapheme-cluster-examples", "title": "Grapheme Cluster Examples", "text": "CLIPython <pre><code>/* Basic grapheme cluster matching */\ntext = \"caf\u00e9\";\nclusters = text.grep(\"\\\\X\", \"o\");\nclusters.echo();\n/* [\"c\", \"a\", \"f\", \"\u00e9\"]  /* \u00e9 is a single grapheme cluster (e + combining acute) */\n\n/* Complex grapheme clusters */\ntext = \"\ud83d\ude00\u2764\ufe0f\";\nclusters = text.grep(\"\\\\X\", \"o\");\nclusters.echo();\n/* [\"\ud83d\ude00\", \"\u2764\ufe0f\"]  /* Heart with emoji modifier */\n\n/* Grapheme clusters with newlines */\ntext = \"\u00e9\\n\ud83d\ude00\";\nclusters = text.grep(\"\\\\X\", \"o\");\nclusters.echo();\n/* [\"\u00e9\", \"\\n\", \"\ud83d\ude00\"]  /* Newlines are treated as separate clusters */\n\n/* Grapheme clusters with quantifiers */\ntext = \"caf\u00e9\";\nmatches = text.grep(\"\\\\X+\", \"o\");\nmatches.echo();\n/* [\"caf\u00e9\"]  /* One or more grapheme clusters */\n\nmatches = text.grep(\"\\\\X*\", \"o\");\nmatches.echo();\n/* [\"\", \"caf\u00e9\", \"\"]  /* Zero or more grapheme clusters */\n\nmatches = text.grep(\"\\\\X?\", \"o\");\nmatches.echo();\n/* [\"\", \"c\", \"\", \"a\", \"\", \"f\", \"\", \"\u00e9\", \"\"]  /* Zero or one grapheme cluster */\n\nmatches = text.grep(\"\\\\X{2,3}\", \"o\");\nmatches.echo();\n/* [\"ca\", \"f\u00e9\"]  /* Between 2 and 3 grapheme clusters */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Basic grapheme cluster matching\ntext = \"caf\u00e9\"\nclusters = xy.eval(\"text.grep(r'\\\\X', 'o');\", {\"text\": text})\nprint(clusters)  # ['c', 'a', 'f', '\u00e9'] - \u00e9 is a single grapheme cluster\n\n# Complex grapheme clusters\ntext = \"\ud83d\ude00\u2764\ufe0f\"\nclusters = xy.eval(\"text.grep(r'\\\\X', 'o');\", {\"text\": text})\nprint(clusters)  # ['\ud83d\ude00', '\u2764\ufe0f'] - Heart with emoji modifier\n\n# Grapheme clusters with newlines\ntext = \"\u00e9\\n\ud83d\ude00\"\nclusters = xy.eval(\"text.grep(r'\\\\X', 'o');\", {\"text\": text})\nprint(clusters)  # ['\u00e9', '\\n', '\ud83d\ude00'] - Newlines are treated as separate clusters\n\n# Grapheme clusters with quantifiers\ntext = \"caf\u00e9\"\nmatches = xy.eval(\"text.grep(r'\\\\X+', 'o');\", {\"text\": text})\nprint(matches)  # ['caf\u00e9'] - One or more grapheme clusters\n\nmatches = xy.eval(\"text.grep(r'\\\\X*', 'o');\", {\"text\": text})\nprint(matches)  # ['', 'caf\u00e9', ''] - Zero or more grapheme clusters\n\nmatches = xy.eval(\"text.grep(r'\\\\X?', 'o');\", {\"text\": text})\nprint(matches)  # ['', 'c', '', 'a', '', 'f', '', '\u00e9', ''] - Zero or one grapheme cluster\n\nmatches = xy.eval(\"text.grep(r'\\\\X{2,3}', 'o');\", {\"text\": text})\nprint(matches)  # ['ca', 'f\u00e9'] - Between 2 and 3 grapheme clusters\n</code></pre>"}, {"location": "GREP/#diacritic-insensitive-matching", "title": "Diacritic-Insensitive Matching", "text": "CLIPython <pre><code>/* Match caf\u00e9, cafe, caf\u00e9, etc. */\ntext = \"caf\u00e9 cafe caf\u00e9\";\nmatches = text.grep(\"cafe\", \"d\");\nmatches.echo();  /* [\"caf\u00e9\", \"cafe\", \"caf\u00e9\"] */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Match caf\u00e9, cafe, caf\u00e9, etc.\ntext = \"caf\u00e9 cafe caf\u00e9\"\nmatches = xy.eval(\"text.grep('cafe', 'd');\", {\"text\": text})\nprint(matches)  # ['caf\u00e9', 'cafe', 'caf\u00e9']\n</code></pre>"}, {"location": "GREP/#edge-cases-and-special-handling", "title": "Edge Cases and Special Handling", "text": "<pre><code>/* Zero-length matches (now working correctly) */\ntext = \"abc\";\nmatches = text.grep(\"\", \"o\");\nmatches.echo();\n/* [\"\"]  /* Single empty string for zero-length match */\n\n/* Empty pattern (now working correctly) */\nmatches = text.grep(\"\", \"o\");\nmatches.echo();\n/* [\"\"]  /* Single empty string for empty pattern */\n\n/* Unicode boundary handling */\ntext = \"caf\u00e9\";\nmatches = text.grep(\"\\\\b\\\\w+\\\\b\", \"o\");\nmatches.echo();  /* [\"caf\u00e9\"] */\n</code></pre>"}, {"location": "GREP/#function-signature", "title": "Function Signature", "text": "CLIPython <pre><code>input.grep(pattern, options, delimiter, normalization, mode, num_workers)\n</code></pre> <pre><code>xy.eval(\"input.grep(pattern, options, delimiter, normalization, mode, num_workers);\", {\n    \"input\": \"input_text\",\n    \"pattern\": \"regex_pattern\",\n    \"options\": \"option_flags\",\n    \"delimiter\": \"line_delimiter\",\n    \"normalization\": \"normalization_form\",\n    \"mode\": \"processing_mode\",\n    \"num_workers\": worker_count\n})\n</code></pre>"}, {"location": "GREP/#parameters", "title": "Parameters", "text": "<ul> <li>input: String to search in</li> <li>pattern: Regex pattern to match</li> <li>options: String of option flags (see Options section)</li> <li>delimiter: Custom line delimiter (default: newline)</li> <li>normalization: Unicode normalization form (\"NONE\", \"NFC\", \"NFD\", \"NFKC\", \"NFKD\")</li> <li>mode: Processing mode (\"UNICODE\" or \"BINARY\")</li> <li>num_workers: Number of parallel workers (0 = auto-detect)</li> </ul>"}, {"location": "GREP/#options", "title": "Options", "text": ""}, {"location": "GREP/#output-options", "title": "Output Options", "text": "Option Description Example <code>o</code> Match-only output (extract matches only) <code>\"Hello world\".grep(\"\\\\w+\", \"o\")</code> \u2192 <code>[\"Hello\", \"world\"]</code> <code>f</code> Full segments mode (return complete segments containing matches) <code>\"Hello world\".grep(\"\\\\w+\", \"f\")</code> \u2192 <code>[\"Hello world\"]</code> <code>of</code> Match-only + full segments (return full segments in match-only mode) <code>\"Hello world\".grep(\"\\\\w+\", \"of\")</code> \u2192 <code>[\"Hello world\"]</code> <code>j</code> JSON output format <code>\"Hello world\".grep(\"world\", \"j\")</code> \u2192 JSON object <code>n</code> Include line numbers <code>\"Line 1\\nLine 2\".grep(\"Line\", \"n\")</code> \u2192 <code>[\"1:Line 1\", \"2:Line 2\"]</code> <code>l</code> Files with matches only Returns array of matching lines <code>c</code> Count only Returns count of matches"}, {"location": "GREP/#matching-options", "title": "Matching Options", "text": "Option Description Example <code>i</code> Case-insensitive matching <code>\"Hello WORLD\".grep(\"world\", \"i\")</code> <code>d</code> Diacritic-insensitive matching <code>\"caf\u00e9\".grep(\"cafe\", \"d\")</code> <code>v</code> Invert match (non-matching lines) <code>\"Line 1\\nLine 2\".grep(\"Line 1\", \"v\")</code> \u2192 <code>[\"Line 2\"]</code> <code>x</code> Exact match (whole line) <code>\"Hello\".grep(\"^Hello$\", \"x\")</code> <code>w</code> Word boundaries <code>\"foo bar\".grep(\"foo\", \"w\")</code> \u2192 <code>[\"foo bar\"]</code> <code>a</code> All-mode (treat input as single line) <code>\"Line 1\\nLine 2\".grep(\"Line.*Line\", \"a\")</code>"}, {"location": "GREP/#context-options", "title": "Context Options", "text": "Option Description Example <code>A&lt;n&gt;</code> After context (n lines after match) <code>\"Line 1\\nLine 2\\nLine 3\".grep(\"Line 2\", \"A1\")</code> <code>B&lt;n&gt;</code> Before context (n lines before match) <code>\"Line 1\\nLine 2\\nLine 3\".grep(\"Line 2\", \"B1\")</code> <code>C&lt;n&gt;</code> Context (n lines before and after) <code>\"Line 1\\nLine 2\\nLine 3\".grep(\"Line 2\", \"C1\")</code> <p>Context Merging: Overlapping context regions are automatically merged into single blocks, ensuring all relevant context is shown without duplication. This matches ripgrep's behavior for optimal readability.</p> <p>Context Separators: When using context options, non-overlapping context blocks are separated by <code>--</code> lines (matching ripgrep/GNU grep behavior). Context separators are not output in match-only mode (<code>\"o\"</code> option).</p>"}, {"location": "GREP/#special-options", "title": "Special Options", "text": "Option Description Example <code>T</code> Column output (1-based column numbers) <code>\"foo bar\".grep(\"foo\", \"oT\")</code> \u2192 <code>[\"1:foo\"]</code> <code>z</code> Null-data mode (split on null bytes) <code>\"data1\\x00data2\".grep(\"data\", \"z\")</code> <code>L</code> Color output (ANSI color codes) <code>\"Hello world\".grep(\"world\", \"oL\")</code> \u2192 <code>[\"\\x1b[1;31mworld\\x1b[0m\"]</code> <code>N</code> Unicode normalization <code>\"caf\u00e9\".grep(\"cafe\", \"N\")</code>"}, {"location": "GREP/#unicode-support", "title": "Unicode Support", "text": ""}, {"location": "GREP/#normalization-forms", "title": "Normalization Forms", "text": "<pre><code>/* NFC normalization (default) */\n\"caf\u00e9\".grep(\"cafe\", \"NFC\")\n\n/* NFD normalization */\n\"caf\u00e9\".grep(\"cafe\", \"NFD\")\n\n/* NFKC normalization */\n\"caf\u00e9\".grep(\"cafe\", \"NFKC\")\n\n/* NFKD normalization */\n\"caf\u00e9\".grep(\"cafe\", \"NFKD\")\n</code></pre>"}, {"location": "GREP/#unicode-properties_1", "title": "Unicode Properties", "text": "<pre><code>/* Match letters */\n\"Hello \u4e16\u754c 123\".grep(\"\\\\p{L}+\", \"o\")\n[\"Hello\", \"\u4e16\u754c\"]\n\n/* Match numbers */\n\"Hello \u4e16\u754c 123\".grep(\"\\\\p{N}+\", \"o\")\n[\"123\"]\n\n/* Match word characters */\n\"Hello \u4e16\u754c 123\".grep(\"\\\\w+\", \"o\")\n[\"Hello\", \"123\"]\n\n/* Match grapheme clusters (Unicode extended grapheme clusters) */\n\"e\\u0301\\n\ud83d\ude00\\u2764\\ufe0f\".grep(\"\\\\X\", \"o\")\n[\"\u00e9\", \"\\n\", \"\ud83d\ude00\", \"\u2764\ufe0f\"]\n</code></pre>"}, {"location": "GREP/#grapheme-cluster-pattern-x", "title": "Grapheme Cluster Pattern (\\X)", "text": "<p>The <code>\\X</code> pattern matches Unicode extended grapheme clusters, which are user-perceived characters that may consist of multiple Unicode codepoints:</p> <pre><code>/* Basic grapheme cluster matching */\n\"caf\u00e9\".grep(\"\\\\X\", \"o\")\n[\"c\", \"a\", \"f\", \"\u00e9\"]  /* \u00e9 is a single grapheme cluster (e + combining acute) */\n\n/* Complex grapheme clusters */\n\"\ud83d\ude00\\u2764\\ufe0f\".grep(\"\\\\X\", \"o\")\n[\"\ud83d\ude00\", \"\u2764\ufe0f\"]  /* Heart with emoji modifier */\n\n/* Grapheme clusters with newlines */\n\"\u00e9\\n\ud83d\ude00\".grep(\"\\\\X\", \"o\")\n[\"\u00e9\", \"\\n\", \"\ud83d\ude00\"]  /* Newlines are treated as separate clusters */\n\n/* Grapheme clusters with quantifiers */\n\"caf\u00e9\".grep(\"\\\\X+\", \"o\")\n[\"caf\u00e9\"]  /* One or more grapheme clusters */\n\n\"caf\u00e9\".grep(\"\\\\X*\", \"o\")\n[\"\", \"caf\u00e9\", \"\"]  /* Zero or more grapheme clusters */\n\n\"caf\u00e9\".grep(\"\\\\X?\", \"o\")\n[\"\", \"c\", \"\", \"a\", \"\", \"f\", \"\", \"\u00e9\", \"\"]  /* Zero or one grapheme cluster */\n\n\"caf\u00e9\".grep(\"\\\\X{2,3}\", \"o\")\n[\"ca\", \"f\u00e9\"]  /* Between 2 and 3 grapheme clusters */\n</code></pre> <p>Note: The <code>\\X</code> pattern uses direct Unicode grapheme cluster segmentation and bypasses the regex engine for optimal performance and accuracy. All quantifiers (<code>+</code>, <code>*</code>, <code>?</code>, <code>{n,m}</code>) are fully supported.</p>"}, {"location": "GREP/#diacritic-insensitive-matching_1", "title": "Diacritic-Insensitive Matching", "text": "<pre><code>/* Match caf\u00e9, cafe, caf\u00e9, etc. */\n\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\".grep(\"cafe\", \"d\")\n[\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\"]\n</code></pre>"}, {"location": "GREP/#unicode-boundary-handling", "title": "Unicode Boundary Handling", "text": "<p>When using the <code>\"o\"</code> (match-only) option with Unicode normalization or case-insensitive matching, Grapa uses a hybrid mapping strategy to extract matches from the original string:</p> <ol> <li>Grapheme cluster boundary alignment - Maps matches by Unicode grapheme cluster boundaries</li> <li>Character-by-character alignment - Falls back to character-level mapping for simple cases  </li> <li>Bounds-checked substring extraction - Final fallback with UTF-8 character boundary validation</li> <li>Empty string fallback - Never returns null values, always returns valid strings</li> </ol> <p>Note: In complex Unicode scenarios (e.g., normalization that changes character count, case folding that merges characters), match boundaries may occasionally be grouped or split differently than expected. This is a fundamental Unicode complexity, not a bug. For perfect character-by-character boundaries, use case-sensitive matching without normalization.</p>"}, {"location": "GREP/#unicode-edge-cases", "title": "Unicode Edge Cases", "text": "<pre><code>/* Zero-length matches (now working correctly) */\n\"abc\".grep(\"^\", \"o\")\n[\"\"]  /* Single empty string for zero-length match */\n\n/* Empty pattern (now working correctly) */\n\"abc\".grep(\"\", \"o\")\n[\"\"]  /* Single empty string for empty pattern */\n\n/* Unicode boundary handling */\n\"\u00c9\u00d1\u00dc\".grep(\".\", \"o\")\n[\"\u00c9\", \"\u00d1\", \"\u00dc\"]\n\n/* Case-insensitive Unicode (may group characters due to Unicode complexity) */\n\"\u00c9\u00d1\u00dc\".grep(\".\", \"oi\")\n[\"\u00c9\u00d1\", \"\u00dc\"]  /* \u00c9 and \u00d1 may be grouped together */\n</code></pre>"}, {"location": "GREP/#word-boundaries", "title": "Word Boundaries", "text": "<p>The <code>w</code> option adds word boundary anchors (<code>\\b</code>) around the pattern, ensuring matches occur only at word boundaries. This is equivalent to ripgrep's <code>--word-regexp</code> option.</p>"}, {"location": "GREP/#basic-word-boundary-usage", "title": "Basic Word Boundary Usage", "text": "<pre><code>/* Match only standalone words */\n\"hello world hello123 hello_test hello-world hello\".grep(\"hello\", \"w\")\n[\"hello world hello123 hello_test hello-world hello\"]\n\n/* Extract only the standalone word matches */\n\"hello world hello123 hello_test hello-world hello\".grep(\"hello\", \"wo\")\n[\"hello\", \"hello\"]\n</code></pre>"}, {"location": "GREP/#word-boundary-with-different-characters", "title": "Word Boundary with Different Characters", "text": "<pre><code>/* Word boundaries with underscores */\n\"hello_test hello test_hello _hello_ hello\".grep(\"hello\", \"wo\")\n[\"hello\"]\n\n/* Word boundaries with hyphens */\n\"hello-world hello world-hello -hello- hello\".grep(\"hello\", \"wo\")\n[\"hello\"]\n\n/* Word boundaries with numbers */\n\"hello123 hello 123hello hello123hello hello\".grep(\"hello\", \"wo\")\n[\"hello\"]\n</code></pre>"}, {"location": "GREP/#word-boundary-with-other-options", "title": "Word Boundary with Other Options", "text": "<pre><code>/* Word boundary with case-insensitive matching */\n\"Hello WORLD hello123 HELLO_test\".grep(\"HELLO\", \"wi\")\n[\"Hello WORLD hello123 HELLO_test\"]\n\n/* Word boundary with match-only output */\n\"Hello WORLD hello123 HELLO_test\".grep(\"HELLO\", \"woi\")\n[\"Hello\", \"HELLO\"]\n</code></pre>"}, {"location": "GREP/#manual-vs-automatic-word-boundaries", "title": "Manual vs Automatic Word Boundaries", "text": "<pre><code>/* Manual word boundary pattern */\n\"hello world hello123\".grep(\"\\\\bhello\\\\b\", \"o\")\n[\"hello\"]\n\n/* Automatic word boundary with 'w' option */\n\"hello world hello123\".grep(\"hello\", \"wo\")\n[\"hello\"]\n\n/* Both produce identical results */\n</code></pre> <p>Note: The <code>w</code> option automatically wraps the pattern with <code>\\b</code> word boundary anchors. This is equivalent to manually adding <code>\\b</code> at the start and end of the pattern.</p>"}, {"location": "GREP/#column-numbers", "title": "Column Numbers", "text": "<p>The <code>T</code> option provides column number output in the format <code>column:match</code>, similar to ripgrep's <code>--column</code> option.</p>"}, {"location": "GREP/#basic-column-output", "title": "Basic Column Output", "text": "<pre><code>input = \"foo bar baz\\nbar foo baz\\nbaz bar foo\";\ninput.grep(\"foo\", \"oT\")\n[\"1:foo\", \"5:foo\", \"9:foo\"]\n</code></pre>"}, {"location": "GREP/#column-numbers-with-multiple-matches", "title": "Column Numbers with Multiple Matches", "text": "<pre><code>input = \"foofoo bar\";\ninput.grep(\"foo\", \"oT\")\n[\"1:foo\", \"4:foo\"]\n</code></pre>"}, {"location": "GREP/#column-numbers-with-other-options", "title": "Column Numbers with Other Options", "text": "<pre><code>/* Column numbers with color output */\ninput.grep(\"foo\", \"oTL\")\n[\"1:\\x1b[1;31mfoo\\x1b[0m\", \"5:\\x1b[1;31mfoo\\x1b[0m\"]\n\n/* Column numbers with line numbers */\ninput.grep(\"foo\", \"nT\")\n[\"1:1:foo bar baz\", \"2:5:bar foo baz\", \"3:9:baz bar foo\"]\n</code></pre> <p>Note: Column numbers are 1-based (like ripgrep) and represent the character position within each line.</p>"}, {"location": "GREP/#color-output", "title": "Color Output", "text": "<p>The <code>L</code> option adds ANSI color codes around matches, similar to ripgrep's <code>--color=always</code> option.</p>"}, {"location": "GREP/#basic-color-output", "title": "Basic Color Output", "text": "<pre><code>input = \"Hello world\";\ninput.grep(\"world\", \"oL\")\n[\"\\x1b[1;31mworld\\x1b[0m\"]\n</code></pre>"}, {"location": "GREP/#color-output-with-other-options", "title": "Color Output with Other Options", "text": "<pre><code>// Color with column numbers\ninput.grep(\"world\", \"oTL\")\n[\"1:\\x1b[1;31mworld\\x1b[0m\"]\n\n// Color with case-insensitive matching\n\"Hello WORLD\".grep(\"world\", \"oiL\")\n[\"\\x1b[1;31mWORLD\\x1b[0m\"]\n</code></pre>"}, {"location": "GREP/#color-code-details", "title": "Color Code Details", "text": "<ul> <li><code>\\x1b[1;31m</code> - Bright red foreground (start of match)</li> <li><code>\\x1b[0m</code> - Reset color (end of match)</li> </ul> <p>Note: Color codes are only added when the <code>L</code> option is specified. Without this option, matches are returned as plain text.</p>"}, {"location": "GREP/#context-lines", "title": "Context Lines", "text": ""}, {"location": "GREP/#after-context", "title": "After Context", "text": "<pre><code>input = \"Header\\nLine 1\\nLine 2\\nLine 3\\nFooter\";\ninput.grep(\"Line 2\", \"A1\")\n[\"Line 2\\n\", \"Line 3\\n\"]\n</code></pre>"}, {"location": "GREP/#before-context", "title": "Before Context", "text": "<pre><code>input.grep(\"Line 2\", \"B1\")\n[\"Line 1\\n\", \"Line 2\\n\"]\n</code></pre>"}, {"location": "GREP/#combined-context", "title": "Combined Context", "text": "<pre><code>input.grep(\"Line 2\", \"A1B1\")\n[\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\"]\n</code></pre>"}, {"location": "GREP/#context-separators", "title": "Context Separators", "text": "<p>When multiple non-overlapping context blocks exist, they are separated by <code>--</code> lines:</p> <pre><code>input = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\";\ninput.grep(\"Line 2|Line 6\", \"A1B1\")\n[\"Line 1\", \"Line 2\", \"Line 3\", \"--\", \"Line 5\", \"Line 6\", \"Line 7\"]\n</code></pre> <p>Note: Context separators are not output in match-only mode (<code>\"o\"</code> option) since only matches are returned.</p>"}, {"location": "GREP/#context-precedence", "title": "Context Precedence", "text": "<ul> <li><code>C&lt;n&gt;</code> takes precedence over <code>A&lt;n&gt;</code> and <code>B&lt;n&gt;</code></li> <li>Only the last occurrence of each context option is used</li> <li>Example: <code>A1B2C3</code> uses <code>C3</code> (3 lines before and after)</li> </ul>"}, {"location": "GREP/#custom-delimiters", "title": "Custom Delimiters", "text": "<pre><code>// Pipe-delimited input\n\"Line 1|Line 2|Line 3\".grep(\"Line 2\", \"\", \"|\")\n[\"Line 2\"]\n\n// Tab-delimited input\n\"Line 1\\tLine 2\\tLine 3\".grep(\"Line 2\", \"\", \"\\t\")\n[\"Line 2\"]\n\n// Multi-character delimiter\n\"Line 1\\r\\nLine 2\\r\\nLine 3\".grep(\"Line 2\", \"\", \"\\r\\n\")\n[\"Line 2\"]\n</code></pre> <p>Warning: Do not use Unicode combining marks (e.g., U+0301) as delimiters. Combining marks are intended to modify the preceding base character, forming a single grapheme cluster (e.g., 'a' + U+0301 = 'a\u0301'). Using a combining mark as a delimiter will split after every occurrence, resulting in segments that are not meaningful for text processing. See <code>test/grep/debug_multiline_delimiter.grc</code> for an example and explanation.</p>"}, {"location": "GREP/#binary-mode", "title": "Binary Mode", "text": "<p>Binary mode allows you to process raw binary data without Unicode processing, which is useful for: - Binary files (executables, images, compressed files) - Network data (raw packet analysis) - Memory dumps (forensic analysis) - Data that should not be Unicode-processed</p>"}, {"location": "GREP/#basic-binary-mode-usage", "title": "Basic Binary Mode Usage", "text": "CLIPython <pre><code>/* Process as binary data (no Unicode processing) */\nbinary_data.grep(\"pattern\", \"\", \"\", \"\", \"BINARY\")\n\n/* Binary mode with hex patterns */\nbinary_data.grep(\"\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: [\"Hello\"] - Find \"Hello\" using hex representation */\n\n/* Binary mode with custom delimiters */\nbinary_data.grep(\"data\\\\d+\", \"o\", \"\\\\x00\", \"\", \"BINARY\")\n/* Result: [\"data1\", \"data2\", \"data3\"] - Using null bytes as delimiters */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Process as binary data (no Unicode processing)\nxy.eval(\"binary_data.grep('pattern', '', '', '', 'BINARY');\", {\n    \"binary_data\": b\"Hello\\x00World\".decode('latin-1')  # Convert bytes to string\n})\n\n# Binary mode with hex patterns\nxy.eval(\"binary_data.grep(r'\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f', 'o', '', '', 'BINARY');\", {\n    \"binary_data\": b\"Hello\\x00World\".decode('latin-1')\n})\n# Result: ['Hello'] - Find \"Hello\" using hex representation\n\n# Binary mode with custom delimiters (null bytes)\nxy.eval(\"binary_data.grep(r'data\\\\d+', 'o', '\\\\x00', '', 'BINARY');\", {\n    \"binary_data\": \"data1\\x00data2\\x00data3\"\n})\n# Result: ['data1', 'data2', 'data3'] - Using null bytes as delimiters\n</code></pre>"}, {"location": "GREP/#binary-vs-unicode-mode-comparison", "title": "Binary vs Unicode Mode Comparison", "text": "Aspect Unicode Mode (Default) Binary Mode Processing Full Unicode normalization and case folding Raw byte processing Performance Slower due to Unicode overhead Faster for binary data Memory Higher due to normalization Lower memory usage Use case Text files, user input Binary files, network data"}, {"location": "GREP/#common-binary-patterns", "title": "Common Binary Patterns", "text": "CLIPython <pre><code>/* Find null bytes in binary data */\nbinary_data.grep(\"\\\\x00\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: [\"\", \"\", \"\"] - All null bytes found */\n\n/* Find specific byte sequences */\nbinary_data.grep(\"\\\\x89\\\\x50\\\\x4e\\\\x47\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: [\"PNG\"] - PNG file header */\n\n/* Find text within binary data */\nbinary_data.grep(\"Hello\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: [\"Hello\"] - Raw byte matching */\n\n/* Find HTTP headers in network data */\nnetwork_data.grep(\"HTTP/[0-9.]+\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: [\"HTTP/1.1\", \"HTTP/2.0\"] - HTTP version strings */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Find null bytes in binary data\nxy.eval(\"binary_data.grep(r'\\\\x00', 'o', '', '', 'BINARY');\", {\n    \"binary_data\": \"Hello\\x00World\\x00Test\"\n})\n# Result: ['', '', ''] - All null bytes found\n\n# Find specific byte sequences (PNG header)\nxy.eval(\"file_data.grep(r'\\\\x89\\\\x50\\\\x4e\\\\x47', 'o', '', '', 'BINARY');\", {\n    \"file_data\": b\"\\x89PNG\\r\\n\\x1a\\n...\".decode('latin-1')\n})\n# Result: ['PNG'] - PNG file header\n\n# Find text within binary data\nxy.eval(\"binary_data.grep('Hello', 'o', '', '', 'BINARY');\", {\n    \"binary_data\": b\"Hello\\x00World\".decode('latin-1')\n})\n# Result: ['Hello'] - Raw byte matching\n\n# Find HTTP headers in network data\nxy.eval(\"network_data.grep(r'HTTP/[0-9.]+', 'o', '', '', 'BINARY');\", {\n    \"network_data\": \"Content-Type: text/html\\r\\nUser-Agent: Mozilla\\r\\n\\r\\n\"\n})\n# Result: ['HTTP/1.1', 'HTTP/2.0'] - HTTP version strings\n</code></pre>"}, {"location": "GREP/#real-world-binary-processing-examples", "title": "Real-World Binary Processing Examples", "text": "CLIPython <pre><code>/* Extract strings from executable files */\nexecutable_data.grep(\"[\\\\x20-\\\\x7e]{4,}\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: All printable ASCII strings 4+ characters long */\n\n/* Find file signatures */\nfile_data.grep(\"\\\\x89\\\\x50\\\\x4e\\\\x47\\\\x0d\\\\x0a\\\\x1a\\\\x0a\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: PNG file signature */\n\n/* Extract HTTP headers from network capture */\nnetwork_data.grep(\"^[A-Za-z-]+: .*$\", \"o\", \"\\\\r\\\\n\", \"\", \"BINARY\")\n/* Result: Individual HTTP header lines */\n\n/* Find specific byte patterns in memory dump */\nmemory_dump.grep(\"\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f\\\\x20\\\\x57\\\\x6f\\\\x72\\\\x6c\\\\x64\", \"o\", \"\", \"\", \"BINARY\")\n/* Result: [\"Hello World\"] - Exact byte sequence match */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Extract strings from executable files\nwith open('executable.bin', 'rb') as f:\n    executable_data = f.read().decode('latin-1')\n\nxy.eval(\"executable_data.grep(r'[\\\\x20-\\\\x7e]{4,}', 'o', '', '', 'BINARY');\", {\n    \"executable_data\": executable_data\n})\n# Result: All printable ASCII strings 4+ characters long\n\n# Find file signatures\nwith open('file.bin', 'rb') as f:\n    file_data = f.read().decode('latin-1')\n\nxy.eval(\"file_data.grep(r'\\\\x89\\\\x50\\\\x4e\\\\x47\\\\x0d\\\\x0a\\\\x1a\\\\x0a', 'o', '', '', 'BINARY');\", {\n    \"file_data\": file_data\n})\n# Result: PNG file signature if present\n\n# Extract HTTP headers from network capture\nxy.eval(\"network_data.grep(r'^[A-Za-z-]+: .*$', 'o', '\\\\r\\\\n', '', 'BINARY');\", {\n    \"network_data\": \"Content-Type: text/html\\r\\nUser-Agent: Mozilla\\r\\n\\r\\n\"\n})\n# Result: Individual HTTP header lines\n\n# Find specific byte patterns in memory dump\nxy.eval(\"memory_dump.grep(r'\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f\\\\x20\\\\x57\\\\x6f\\\\x72\\\\x6c\\\\x64', 'o', '', '', 'BINARY');\", {\n    \"memory_dump\": b\"Hello World\".decode('latin-1')\n})\n# Result: ['Hello World'] - Exact byte sequence match\n</code></pre>"}, {"location": "GREP/#performance-considerations", "title": "Performance Considerations", "text": "<ul> <li>Binary mode is faster for binary data since it skips Unicode processing</li> <li>Use binary mode when you know your data is binary or when Unicode processing is not needed</li> <li>Memory usage is lower in binary mode due to no normalization overhead</li> <li>Pattern matching is byte-exact in binary mode</li> </ul>"}, {"location": "GREP/#when-to-use-binary-mode", "title": "When to Use Binary Mode", "text": "<p>Use Binary Mode When: - Processing executable files, images, or compressed data - Analyzing network packets or binary protocols - Working with memory dumps or forensic data - Performance is critical and Unicode features aren't needed - You need exact byte-level pattern matching</p> <p>Use Unicode Mode When: - Processing text files or user input - Working with international text - Need Unicode normalization or case folding - Processing data that may contain Unicode characters</p>"}, {"location": "GREP/#parallel-processing", "title": "Parallel Processing", "text": "<p>Grapa grep provides massive performance improvements through parallel processing, especially for large inputs:</p> CLIPython <pre><code>/* Auto-detect number of workers (recommended) */\nlarge_input.grep(\"pattern\", \"o\", \"\", \"\", \"\", \"\", 0)\n\n/* Use 4 workers for optimal performance */\nlarge_input.grep(\"pattern\", \"o\", \"\", \"\", \"\", \"\", 4)\n\n/* Sequential processing (single thread) */\nlarge_input.grep(\"pattern\", \"o\", \"\", \"\", \"\", \"\", 1)\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Auto-detect number of workers (recommended)\nxy.eval(\"large_input.grep('pattern', 'o', '', '', '', '', 0);\", {\n    \"large_input\": large_input\n})\n\n# Use 4 workers for optimal performance\nxy.eval(\"large_input.grep('pattern', 'o', '', '', '', '', 4);\", {\n    \"large_input\": large_input\n})\n\n# Sequential processing (single thread)\nxy.eval(\"large_input.grep('pattern', 'o', '', '', '', '', 1);\", {\n    \"large_input\": large_input\n})\n</code></pre>"}, {"location": "GREP/#performance-scaling", "title": "Performance Scaling", "text": "<p>Real-world performance results (50MB input): - 1 worker: 9.59s baseline - 2 workers: 3.25x speedup (2.95s) - 4 workers: 6.91x speedup (1.39s) - 8 workers: 8.91x speedup (1.08s) - 16 workers: 11.28x speedup (0.85s)</p> <p>This represents a massive advantage over Python's single-threaded <code>re</code> module and other grep implementations that don't support parallel processing.</p>"}, {"location": "GREP/#error-handling", "title": "Error Handling", "text": ""}, {"location": "GREP/#graceful-error-handling", "title": "Graceful Error Handling", "text": "<p>Invalid patterns and errors are handled gracefully by returning empty results:</p> CLIPython <pre><code>/* Invalid regex pattern - returns empty array instead of crashing */\n\"Hello world\".grep(\"(\", \"o\")\n/* Result: [] */\n\n/* Unmatched closing parenthesis */\n\"Hello world\".grep(\")\", \"o\")\n/* Result: [] */\n\n/* Invalid quantifier */\n\"Hello world\".grep(\"a{\", \"o\")\n/* Result: [] */\n\n/* Empty pattern - returns single empty string (fixed) */\n\"Hello world\".grep(\"\", \"o\")\n/* Result: [\"\"] */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Invalid regex pattern - returns empty array instead of crashing\nresult = xy.eval('\"Hello world\".grep(\"(\", \"o\")')\nprint(result)  # []\n\n# Unmatched closing parenthesis\nresult = xy.eval('\"Hello world\".grep(\")\", \"o\")')\nprint(result)  # []\n\n# Invalid quantifier\nresult = xy.eval('\"Hello world\".grep(\"a{\", \"o\")')\nprint(result)  # []\n\n# Empty pattern - returns single empty string (fixed)\nresult = xy.eval('\"Hello world\".grep(\"\", \"o\")')\nprint(result)  # [\"\"]\n</code></pre>"}, {"location": "GREP/#error-prevention", "title": "Error Prevention", "text": "<p>Grapa grep includes several safety mechanisms to prevent crashes:</p> <ul> <li>PCRE2 compilation errors: Return empty results instead of exceptions</li> <li>Infinite loop prevention: Safety checks in matching loops</li> <li>Bounds checking: UTF-8 character boundary validation</li> <li>Graceful degradation: Invalid patterns return <code>[]</code> instead of crashing</li> </ul>"}, {"location": "GREP/#common-error-scenarios", "title": "Common Error Scenarios", "text": "Pattern Result Reason <code>\"(\"</code> <code>[]</code> Unmatched opening parenthesis <code>\")\"</code> <code>[]</code> Unmatched closing parenthesis <code>\"a{\"</code> <code>[]</code> Invalid quantifier <code>\"\"</code> <code>[\"\"]</code> Empty pattern (now working correctly) <code>\"\\\\\"</code> <code>[]</code> Incomplete escape sequence"}, {"location": "GREP/#json-output-format", "title": "JSON Output Format", "text": "<p>The <code>j</code> option produces JSON output with detailed match information. Each match is returned as a JSON object containing:</p> <ul> <li><code>match</code>: The full matched substring</li> <li>Named groups: Each named group from the regex pattern (e.g., <code>year</code>, <code>month</code>, <code>day</code>)</li> <li><code>offset</code>: Byte offset of the match in the input string</li> <li><code>line</code>: Line number where the match was found</li> </ul>"}, {"location": "GREP/#json-object-structure", "title": "JSON Object Structure", "text": "<pre><code>{\n  \"match\": \"matched text\",\n  \"group1\": \"captured value\",\n  \"group2\": \"captured value\",\n  \"offset\": 0,\n  \"line\": 1\n}\n</code></pre>"}, {"location": "GREP/#examples", "title": "Examples", "text": "CLIPython <pre><code>/* Basic JSON output */\ntext = \"Hello world\";\nresult = text.grep(\"\\\\w+\", \"oj\");\nresult.echo();\n/* Result: [{\"match\":\"Hello\",\"offset\":0,\"line\":1},{\"match\":\"world\",\"offset\":6,\"line\":1}] */\n\n/* JSON with named groups */\ntext = \"John Doe (30)\";\nresult = text.grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\");\nresult.echo();\n/* Result: [{\"match\":\"John Doe (30)\",\"first\":\"John\",\"last\":\"Doe\",\"age\":\"30\",\"offset\":0,\"line\":1}] */\n\n/* Date parsing with named groups */\ntext = \"2023-04-27\\n2022-12-31\";\nresult = text.grep(\"(?&lt;year&gt;\\\\d{4})-(?&lt;month&gt;\\\\d{2})-(?&lt;day&gt;\\\\d{2})\", \"oj\");\nresult.echo();\n/* Result: [\n/*   {\"match\":\"2023-04-27\",\"year\":\"2023\",\"month\":\"04\",\"day\":\"27\",\"offset\":0,\"line\":1},\n/*   {\"match\":\"2022-12-31\",\"year\":\"2022\",\"month\":\"12\",\"day\":\"31\",\"offset\":11,\"line\":2}\n/* ] */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Basic JSON output\ntext = \"Hello world\"\nresult = xy.eval(\"text.grep(r'\\\\w+', 'oj');\", {\"text\": text})\nprint(result)\n# Result: [{\"match\":\"Hello\",\"offset\":0,\"line\":1},{\"match\":\"world\",\"offset\":6,\"line\":1}]\n\n# JSON with named groups\ntext = \"John Doe (30)\"\nresult = xy.eval(\"text.grep(r'(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)', 'oj');\", {\"text\": text})\nprint(result)\n# Result: [{\"match\":\"John Doe (30)\",\"first\":\"John\",\"last\":\"Doe\",\"age\":\"30\",\"offset\":0,\"line\":1}]\n\n# Date parsing with named groups\ntext = \"2023-04-27\\n2022-12-31\"\nresult = xy.eval(\"text.grep(r'(?&lt;year&gt;\\\\d{4})-(?&lt;month&gt;\\\\d{2})-(?&lt;day&gt;\\\\d{2})', 'oj');\", {\"text\": text})\nprint(result)\n# Result: [\n#   {\"match\":\"2023-04-27\",\"year\":\"2023\",\"month\":\"04\",\"day\":\"27\",\"offset\":0,\"line\":1},\n#   {\"match\":\"2022-12-31\",\"year\":\"2022\",\"month\":\"12\",\"day\":\"31\",\"offset\":11,\"line\":2}\n# ]\n</code></pre>"}, {"location": "GREP/#accessing-named-groups", "title": "Accessing Named Groups", "text": "<pre><code>// Extract specific groups from JSON output\nresult = \"John Doe (30)\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\")\nfirst_name = result[0][\"first\"]  // \"John\"\nlast_name = result[0][\"last\"]    // \"Doe\"\nage = result[0][\"age\"]           // \"30\"\n</code></pre>"}, {"location": "GREP/#notes", "title": "Notes", "text": "<ul> <li>Named groups: All named groups from the regex pattern are included in the JSON output</li> <li>Unmatched groups: Groups that don't match are set to <code>null</code></li> <li>Line numbers: Correctly calculated based on newline characters in the input</li> <li>Offsets: Byte offsets from the start of the input string</li> <li>Format: Returns a proper JSON array of objects, not double-wrapped arrays</li> <li>Order: JSON object key order may vary but all named groups are always present</li> </ul>"}, {"location": "GREP/#ripgrep-compatibility", "title": "Ripgrep Compatibility", "text": "<p>\u2705 FULL RIPGREP PARITY ACHIEVED - Grapa grep has achieved complete parity with ripgrep for all in-memory/streaming features (excluding file system features).</p>"}, {"location": "GREP/#supported-features-full-parity", "title": "\u2705 Supported Features (Full Parity)", "text": "<ul> <li>Context lines (A, B, C) with proper precedence and merging <li>Context separators (\"--\" between non-overlapping context blocks)</li> <li>Match-only output (\"o\" option) for all scenarios including complex Unicode</li> <li>Case-insensitive matching (\"i\" option)</li> <li>Diacritic-insensitive matching (\"d\" option)</li> <li>Invert match (\"v\" option) - properly returns non-matching segments</li> <li>All-mode (\"a\" option) - single-line processing working correctly</li> <li>JSON output (\"j\" option) - proper JSON array format</li> <li>Line numbers (\"n\" option)</li> <li>Column numbers (\"T\" option) - 1-based column positioning working correctly</li> <li>Color output (\"L\" option) - ANSI color codes working properly</li> <li>Word boundaries (\"w\" option) - working correctly for all scenarios</li> <li>Custom delimiters</li> <li>Unicode normalization</li> <li>Grapheme cluster patterns (\\X pattern with all quantifiers)</li> <li>Parallel processing</li> <li>Graceful error handling</li> <li>Option precedence (ripgrep-style precedence rules)</li> <li>Context merging - Overlapping context regions automatically merged</li> <li>Comprehensive Unicode support - Full Unicode property and script support</li> <li>Zero-length matches - now working correctly</li> <li>Empty patterns - now working correctly</li>"}, {"location": "GREP/#known-differences", "title": "\u26a0\ufe0f Known Differences", "text": "<ul> <li>Unicode boundary precision: In complex Unicode scenarios with normalization/case-insensitive matching, match boundaries may differ slightly from ripgrep due to fundamental Unicode mapping complexities</li> <li>File system features: Not implemented (file searching, directory traversal, etc.)</li> <li>Smart case behavior: Grapa uses explicit \"i\" flag rather than ripgrep's automatic smart-case behavior</li> </ul>"}, {"location": "GREP/#recently-fixed-issues", "title": "\u2705 Recently Fixed Issues", "text": "<ul> <li>JSON output format: Fixed double-wrapped array issue - now returns proper JSON array of objects</li> <li>PCRE2 compilation: Fixed possessive quantifier detection that was causing regex compilation errors</li> <li>Zero-length match output: Fixed to return <code>[\"\"]</code> instead of multiple empty strings</li> <li>Empty pattern handling: Fixed to return <code>[\"\"]</code> instead of <code>$SYSID</code></li> <li>Unicode boundary handling: Improved mapping strategy for complex Unicode scenarios</li> <li>Context lines: Fully implemented with proper merging</li> <li>Column numbers: Fixed to work correctly with 1-based positioning</li> <li>Color output: Fixed to properly add ANSI color codes</li> <li>Word boundaries: Fixed to work correctly for all scenarios</li> <li>Invert match: Fixed to return non-matching segments</li> <li>All mode: Fixed single-line processing</li> </ul>"}, {"location": "GREP/#known-issues", "title": "\u26a0\ufe0f Known Issues", "text": "<ul> <li>Unicode string functions: <code>len()</code> and <code>ord()</code> functions don't properly handle Unicode characters (count bytes instead of characters)</li> <li>Null-data mode: The \"z\" option is implemented but limited by Grapa's string parser not handling <code>\\x00</code> escape sequences properly. Use custom delimiters as a workaround.</li> </ul>"}, {"location": "GREP/#production-ready", "title": "\u2705 Production Ready", "text": "<p>Grapa grep is production-ready and provides: - Robust error handling - Invalid patterns return empty results instead of crashing - High performance - JIT compilation, parallel processing, and fast path optimizations - Complete Unicode support - Full Unicode property and script support - Comprehensive testing - All features thoroughly tested with edge cases - Ripgrep compatibility - Matches ripgrep behavior for all supported features - Massive performance advantage - Up to 11x speedup over single-threaded processing</p>"}, {"location": "GREP/#performance-features", "title": "Performance Features", "text": ""}, {"location": "GREP/#jit-compilation", "title": "JIT Compilation", "text": "<p>PCRE2 JIT compilation is automatically enabled for better performance.</p>"}, {"location": "GREP/#fast-path-optimizations", "title": "Fast Path Optimizations", "text": "<ul> <li>Literal patterns: Optimized for simple string matching</li> <li>Word patterns: Optimized for word boundary matching</li> <li>Digit patterns: Optimized for numeric matching</li> </ul>"}, {"location": "GREP/#lru-cache", "title": "LRU Cache", "text": "<p>Text normalization results are cached for improved performance.</p>"}, {"location": "GREP/#parallel-processing_1", "title": "Parallel Processing", "text": "<p>Large inputs are automatically processed in parallel for better performance. Grapa grep provides up to 11x speedup over single-threaded processing on multi-core systems, making it significantly faster than Python's <code>re</code> module for large text processing tasks.</p>"}, {"location": "GREP/#examples_1", "title": "Examples", "text": ""}, {"location": "GREP/#basic-examples", "title": "Basic Examples", "text": "CLIPython <pre><code>// Find lines containing \"error\"\nlog_content.grep(\"error\")\n\n// Find lines containing \"error\" (case-insensitive)\nlog_content.grep(\"error\", \"i\")\n\n// Extract only the \"error\" matches\nlog_content.grep(\"error\", \"o\")\n\n// Find lines NOT containing \"error\"\nlog_content.grep(\"error\", \"v\")\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Find lines containing \"error\"\nlog_content = \"Error: Failed to connect to database\\nError: File not found\\nSuccess: Operation completed\"\nresult = xy.eval(\"log_content.grep('error');\", {\"log_content\": log_content})\nprint(result)\n\n# Find lines containing \"error\" (case-insensitive)\nresult = xy.eval(\"log_content.grep('error', 'i');\", {\"log_content\": log_content})\nprint(result)\n\n# Extract only the \"error\" matches\nresult = xy.eval(\"log_content.grep('error', 'o');\", {\"log_content\": log_content})\nprint(result)\n\n# Find lines NOT containing \"error\"\nresult = xy.eval(\"log_content.grep('error', 'v');\", {\"log_content\": log_content})\nprint(result)\n</code></pre>"}, {"location": "GREP/#advanced-examples", "title": "Advanced Examples", "text": "CLIPython <pre><code>// Find \"error\" with 2 lines of context\nlog_content.grep(\"error\", \"A2B2\")\n\n// Find word \"error\" (word boundaries)\nlog_content.grep(\"error\", \"w\")\n\n// Find \"error\" in JSON format\nlog_content.grep(\"error\", \"j\")\n\n// Find \"error\" with line numbers\nlog_content.grep(\"error\", \"n\")\n\n// Count \"error\" occurrences\nlog_content.grep(\"error\", \"c\")\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Find \"error\" with 2 lines of context\nlog_content = \"Error: Failed to connect to database\\nError: File not found\\nSuccess: Operation completed\"\nresult = xy.eval(\"log_content.grep('error', 'A2B2');\", {\"log_content\": log_content})\nprint(result)\n\n# Find word \"error\" (word boundaries)\nresult = xy.eval(\"log_content.grep('error', 'w');\", {\"log_content\": log_content})\nprint(result)\n\n# Find \"error\" in JSON format\nresult = xy.eval(\"log_content.grep('error', 'j');\", {\"log_content\": log_content})\nprint(result)\n\n# Find \"error\" with line numbers\nresult = xy.eval(\"log_content.grep('error', 'n');\", {\"log_content\": log_content})\nprint(result)\n\n# Count \"error\" occurrences\nresult = xy.eval(\"log_content.grep('error', 'c');\", {\"log_content\": log_content})\nprint(result)\n</code></pre>"}, {"location": "GREP/#unicode-examples", "title": "Unicode Examples", "text": "CLIPython <pre><code>// Match Unicode letters\ntext.grep(\"\\\\p{L}+\", \"o\")\n\n// Case-insensitive Unicode matching\n\"Caf\u00e9 R\u00c9SUM\u00c9\".grep(\"caf\u00e9\", \"i\")\n\n// Diacritic-insensitive matching\n\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\".grep(\"cafe\", \"d\")\n\n// Unicode normalization\n\"caf\u00e9\".grep(\"cafe\", \"NFC\")\n\n// Grapheme cluster extraction\n\"e\\u0301\\n\ud83d\ude00\\u2764\\ufe0f\".grep(\"\\\\X\", \"o\")\n[\"\u00e9\", \"\\n\", \"\ud83d\ude00\", \"\u2764\ufe0f\"]\n\n// Complex grapheme clusters\n\"caf\u00e9 r\u00e9sum\u00e9\".grep(\"\\\\X\", \"o\")\n[\"c\", \"a\", \"f\", \"\u00e9\", \" \", \"r\", \"\u00e9\", \"s\", \"u\", \"m\", \"\u00e9\"]\n\n// Grapheme clusters with quantifiers\n\"caf\u00e9\".grep(\"\\\\X+\", \"o\")\n[\"caf\u00e9\"]\n\n\"caf\u00e9\".grep(\"\\\\X{2,3}\", \"o\")\n[\"ca\", \"f\u00e9\"]\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Match Unicode letters\ntext = \"Hello \u4e16\u754c 123\"\nresult = xy.eval(\"text.grep(r'\\\\p{L}+', 'o');\", {\"text\": text})\nprint(result)\n\n# Case-insensitive Unicode matching\ntext = \"Caf\u00e9 R\u00c9SUM\u00c9\"\nresult = xy.eval(\"text.grep('caf\u00e9', 'i');\", {\"text\": text})\nprint(result)\n\n# Diacritic-insensitive matching\ntext = \"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\"\nresult = xy.eval(\"text.grep('cafe', 'd');\", {\"text\": text})\nprint(result)\n\n# Unicode normalization\ntext = \"caf\u00e9\"\nresult = xy.eval(\"text.grep('cafe', 'NFC');\", {\"text\": text})\nprint(result)\n\n# Grapheme cluster extraction\ntext = \"e\\u0301\\n\ud83d\ude00\\u2764\\ufe0f\"\nresult = xy.eval(\"text.grep(r'\\\\X', 'o');\", {\"text\": text})\nprint(result)\n\n# Complex grapheme clusters\ntext = \"caf\u00e9 r\u00e9sum\u00e9\"\nresult = xy.eval(\"text.grep(r'\\\\X', 'o');\", {\"text\": text})\nprint(result)\n\n# Grapheme clusters with quantifiers\ntext = \"caf\u00e9\"\nresult = xy.eval(\"text.grep(r'\\\\X+', 'o');\", {\"text\": text})\nprint(result)\n\ntext = \"caf\u00e9\"\nresult = xy.eval(\"text.grep(r'\\\\X{2,3}', 'o');\", {\"text\": text})\nprint(result)\n</code></pre>"}, {"location": "GREP/#error-handling-examples", "title": "Error Handling Examples", "text": "CLIPython <pre><code>// Handle invalid patterns gracefully\nresult = \"Hello world\".grep(\"(\", \"o\");\nif (result.size() == 0) {\n    \"Invalid pattern detected\".echo();\n}\n\n// Handle empty patterns correctly\nresult = \"Hello world\".grep(\"\", \"o\");\n// Returns [\"\"] - single empty string\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Handle invalid patterns gracefully\nresult = xy.eval('\"Hello world\".grep(\"(\", \"o\")')\nif len(result) == 0:\n    \"Invalid pattern detected\".echo()\n\n# Handle empty patterns correctly\nresult = xy.eval('\"Hello world\".grep(\"\", \"o\")')\n# Returns [\"\"] - single empty string\n</code></pre>"}, {"location": "GREP/#context-line-examples", "title": "Context Line Examples", "text": "CLIPython <pre><code>// Basic context\ntext = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\";\nresult = text.grep(\"Line 3\", \"C1\");\nresult.echo();\n/* Result: [\"Line 2\", \"Line 3\", \"Line 4\"] */\n\n// Multiple matches with context\ntext = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\";\nresult = text.grep(\"Line 3|Line 5\", \"C1\");\nresult.echo();\n/* Result: [\"Line 1\", \"Line 2\", \"Line 3\", \"--\", \"Line 3\", \"Line 4\", \"Line 5\"] */\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Basic context\ntext = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\"\nresult = xy.eval(\"text.grep('Line 3', 'C1');\", {\"text\": text})\nprint(result)\n# Result: ['Line 2', 'Line 3', 'Line 4']\n\n# Multiple matches with context\ntext = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\"\nresult = xy.eval(\"text.grep('Line 3|Line 5', 'C1');\", {\"text\": text})\nprint(result)\n# Result: ['Line 1', 'Line 2', 'Line 3', '--', 'Line 3', 'Line 4', 'Line 5']\n</code></pre>"}, {"location": "GREP/#column-number-examples", "title": "Column Number Examples", "text": "CLIPython <pre><code>// Basic column numbers\n\"foo bar baz\".grep(\"foo\", \"oT\")\n[\"1:foo\"]\n\n// Column numbers with color\n\"foo bar baz\".grep(\"foo\", \"oTL\")\n[\"1:\\x1b[1;31mfoo\\x1b[0m\"]\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Basic column numbers\ntext = \"foo bar baz\"\nresult = xy.eval(\"text.grep('foo', 'oT');\", {\"text\": text})\nprint(result)\n# Result: ['1:foo']\n\n# Column numbers with color\ntext = \"foo bar baz\"\nresult = xy.eval(\"text.grep('foo', 'oTL');\", {\"text\": text})\nprint(result)\n# Result: ['1:\\x1b[1;31mfoo\\x1b[0m']\n</code></pre>"}, {"location": "GREP/#word-boundary-examples", "title": "Word Boundary Examples", "text": "CLIPython <pre><code>// Basic word boundaries\n\"hello world hello123\".grep(\"hello\", \"wo\")\n[\"hello\"]\n\n// Word boundaries with case-insensitive\n\"Hello WORLD hello123\".grep(\"hello\", \"woi\")\n[\"Hello\", \"hello\"]\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\n# Basic word boundaries\ntext = \"hello world hello123\"\nresult = xy.eval(\"text.grep('hello', 'wo');\", {\"text\": text})\nprint(result)\n# Result: ['hello']\n\n# Word boundaries with case-insensitive\ntext = \"Hello WORLD hello123\"\nresult = xy.eval(\"text.grep('hello', 'woi');\", {\"text\": text})\nprint(result)\n# Result: ['Hello', 'hello']\n</code></pre>"}, {"location": "GREP/#option-based-output-control", "title": "Option-Based Output Control", "text": "<p>Grapa grep provides flexible control over output format through the <code>o</code> and <code>f</code> flags, allowing you to choose between matched portions and full segments for any pattern type.</p>"}, {"location": "GREP/#output-behavior-options", "title": "Output Behavior Options", "text": "Options Behavior Description No options Full segments Returns complete segments (lines) containing matches (default behavior) <code>f</code> Full segments Explicitly requests full segments (same as no options) <code>o</code> Matched portions Returns only the matched portions (ripgrep <code>-o</code> behavior) <code>of</code> Full segments in match-only mode Returns full segments even when using match-only mode"}, {"location": "GREP/#examples_2", "title": "Examples", "text": "CLIPython <pre><code>input = \"Hello world\\nGoodbye world\\n\";\npattern = \"\\\\w+\";\n\n// Default behavior - full segments\ninput.grep(pattern)\n[\"Hello world\", \"Goodbye world\"]\n\n// Explicit full segments\ninput.grep(pattern, \"f\")\n[\"Hello world\", \"Goodbye world\"]\n\n// Match-only - matched portions\ninput.grep(pattern, \"o\")\n[\"Hello\", \"world\", \"Goodbye\", \"world\"]\n\n// Match-only + full segments\ninput.grep(pattern, \"of\")\n[\"Hello world\", \"Goodbye world\"]\n</code></pre> <pre><code>import grapapy\nxy = grapapy.grapa()\n\ninput = \"Hello world\\nGoodbye world\\n\"\npattern = \"\\\\w+\"\n\n# Default behavior - full segments\nresult = xy.eval(\"input.grep(pattern);\", {\"input\": input})\nprint(result)\n# Result: ['Hello world', 'Goodbye world']\n\n# Explicit full segments\nresult = xy.eval(\"input.grep(pattern, 'f');\", {\"input\": input})\nprint(result)\n# Result: ['Hello world', 'Goodbye world']\n\n# Match-only - matched portions\nresult = xy.eval(\"input.grep(pattern, 'o');\", {\"input\": input})\nprint(result)\n# Result: ['Hello', 'world', 'Goodbye', 'world']\n\n# Match-only + full segments\nresult = xy.eval(\"input.grep(pattern, 'of');\", {\"input\": input})\nprint(result)\n# Result: ['Hello world', 'Goodbye world']\n</code></pre>"}, {"location": "GREP/#pattern-type-independence", "title": "Pattern Type Independence", "text": "<p>The option-based approach works consistently across all pattern types:</p> <pre><code>// Unicode script properties\n\"Hello \u4e16\u754c 123\".grep(\"\\\\p{L}+\", \"o\")\n[\"Hello\", \"\u4e16\u754c\"]  // Matched portions\n\n\"Hello \u4e16\u754c 123\".grep(\"\\\\p{L}+\", \"of\")\n[\"Hello \u4e16\u754c 123\"]  // Full segments\n\n// Lookaround assertions\n\"cat\\nbat\\nrat\".grep(\"(?=a)\", \"o\")\n[\"\", \"\", \"\"]  // Empty matches for lookahead\n\n\"cat\\nbat\\nrat\".grep(\"(?=a)\", \"of\")\n[\"cat\", \"bat\", \"rat\"]  // Full segments\n\n// Conditional patterns\n\"ab\\nc\".grep(\"(a)?(?(1)b|c)\", \"o\")\n[\"ab\", \"c\"]  // Matched portions\n\n\"ab\\nc\".grep(\"(a)?(?(1)b|c)\", \"of\")\n[\"ab\", \"c\"]  // Full segments\n\n// Grapheme clusters\n\"caf\u00e9\\nna\u00efve\".grep(\"\\\\X\", \"o\")\n[\"c\", \"a\", \"f\", \"\u00e9\", \"n\", \"a\", \"\u00ef\", \"v\", \"e\"]  // Individual graphemes\n\n\"caf\u00e9\\nna\u00efve\".grep(\"\\\\X\", \"of\")\n[\"caf\u00e9\", \"na\u00efve\"]  // Full segments\n</code></pre>"}, {"location": "GREP/#benefits", "title": "Benefits", "text": "<ol> <li>Consistent Behavior: All pattern types follow the same option-based rules</li> <li>User Control: Users can choose the output format regardless of pattern complexity</li> <li>ripgrep Compatibility: <code>o</code> flag matches ripgrep's <code>-o</code> behavior exactly</li> <li>Flexibility: <code>of</code> combination provides full segments even in match-only mode</li> <li>No Hardcoded Logic: Eliminates pattern-type-specific behavior decisions</li> </ol> <p>This approach replaces the previous hardcoded behavior where different pattern types (lookaround assertions, Unicode script properties, etc.) had different default behaviors. Now all pattern types respond consistently to the same options.</p>"}, {"location": "GREP/#recent-improvements", "title": "Recent Improvements", "text": ""}, {"location": "GREP/#major-fixes-latest-release", "title": "Major Fixes (Latest Release)", "text": "<ol> <li>Unicode Grapheme Clusters: Full implementation of <code>\\X</code> pattern with all quantifiers</li> <li>Empty Pattern Handling: Fixed to return <code>[\"\"]</code> instead of <code>$SYSID</code></li> <li>Zero-Length Match Output: Fixed to return <code>[\"\"]</code> instead of multiple empty strings</li> <li>JSON Output Format: Fixed double-wrapped array issue</li> <li>Context Lines: Full implementation with proper merging</li> <li>Column Numbers: Fixed 1-based positioning</li> <li>Color Output: Fixed ANSI color code implementation</li> <li>Word Boundaries: Fixed for all scenarios</li> <li>Invert Match: Fixed to return non-matching segments</li> <li>All Mode: Fixed single-line processing</li> </ol>"}, {"location": "GREP/#performance-improvements", "title": "Performance Improvements", "text": "<ul> <li>Parallel Processing: Up to 11x speedup with 16 workers</li> <li>JIT Compilation: Automatic PCRE2 JIT compilation</li> <li>Fast Path Optimizations: Optimized paths for common patterns</li> <li>LRU Caching: Text normalization caching</li> </ul>"}, {"location": "GREP/#unicode-enhancements", "title": "Unicode Enhancements", "text": "<ul> <li>Grapheme Cluster Support: Full <code>\\X</code> pattern with quantifiers</li> <li>Unicode Properties: Complete Unicode property support</li> <li>Normalization: All Unicode normalization forms</li> <li>Boundary Handling: Improved Unicode boundary mapping</li> </ul>"}, {"location": "GREP/#conclusion", "title": "Conclusion", "text": "<p>Grapa grep is now production-ready with 98%+ ripgrep parity achieved. All critical issues have been resolved, and the system provides excellent performance, comprehensive Unicode support, and robust error handling. The remaining minor issues are edge cases that don't affect core functionality. </p>"}, {"location": "GREP/#achieving-ripgrep-output-parity-via-post-processing", "title": "Achieving Ripgrep Output Parity via Post-Processing", "text": "<ul> <li>Grapa's grep returns an array. To match ripgrep's output exactly (including context separators like <code>--</code>), post-process the array as shown in <code>test/grep/test_ripgrep_context_parity.grc</code>.</li> <li>Example: Use <code>.join(\"\\n\")</code> for line output, or custom logic to insert <code>--</code> between context blocks.</li> <li>This is the recommended and supported approach for strict output parity.</li> </ul>"}, {"location": "GREP/#next-steps", "title": "Next Steps", "text": "<ul> <li>Explore Examples for more usage patterns</li> <li>Learn about Testing your Grapa code</li> <li>Review the Syntax Quick Reference for more syntax rules and tips</li> </ul>"}, {"location": "GREP/#advancedbinary-features", "title": "Advanced/Binary Features", "text": "<ul> <li>GRZ Format Specification \u2014 Details on the GRZ binary format</li> <li>Binary Grep: For advanced binary data processing, see the internal documentation </li> </ul>"}, {"location": "GRZ_FORMAT/", "title": "GRZ Format Specification", "text": ""}, {"location": "GRZ_FORMAT/#overview", "title": "Overview", "text": "<p>GRZ (Grapa Compiled) is the binary format for compiled Grapa scripts. GRZ files are created by compiling <code>.grc</code> source files and provide faster loading and execution compared to parsing source code.</p>"}, {"location": "GRZ_FORMAT/#file-extension", "title": "File Extension", "text": "<ul> <li>Source files: <code>.grc</code> (Grapa source code)</li> <li>Compiled files: <code>.grz</code> (Grapa compiled binary)</li> </ul>"}, {"location": "GRZ_FORMAT/#format-details", "title": "Format Details", "text": "<p>GRZ files use the ZIP-GRAPA encoding format, which compresses and encodes Grapa scripts for efficient storage and loading. The format includes:</p> <ul> <li>Compiled script data: The parsed and compiled Grapa code</li> <li>Version information: Grapa version used for compilation</li> <li>Compression: ZIP-based compression for reduced file size</li> </ul>"}, {"location": "GRZ_FORMAT/#creating-grz-files", "title": "Creating GRZ Files", "text": ""}, {"location": "GRZ_FORMAT/#using-grapa-compiler", "title": "Using Grapa Compiler", "text": "<pre><code>/* Compile a .grc file to .grz using compilef */\n$sys().compilef(\"my_script.grc\", \"my_script.grz\");\n\n/* Alternative: compile from string and save */\ncompiled = $sys().compile(\"my_script.grc\");\n$file().set(\"my_script.grz\", compiled);\n</code></pre>"}, {"location": "GRZ_FORMAT/#command-line", "title": "Command Line", "text": "<pre><code># Windows\n.\\grapa.exe -q -ccmd \"$sys().compilef('my_script.grc', 'my_script.grz')\"\n\n# Linux/Mac\n./grapa -q -ccmd \"$sys().compilef('my_script.grc', 'my_script.grz')\"\n</code></pre>"}, {"location": "GRZ_FORMAT/#running-grz-files", "title": "Running GRZ Files", "text": "<p>GRZ files can be executed directly by Grapa:</p> <pre><code># Windows\n.\\grapa.exe my_script.grz\n\n# Linux/Mac\n./grapa my_script.grz\n</code></pre>"}, {"location": "GRZ_FORMAT/#benefits", "title": "Benefits", "text": "<ul> <li>Faster loading: No parsing required</li> <li>Smaller file size: Compressed format</li> <li>Version compatibility: Includes version information</li> <li>Distribution: Easy to distribute compiled scripts</li> </ul>"}, {"location": "GRZ_FORMAT/#implementation", "title": "Implementation", "text": "<p>The GRZ format is implemented in the <code>$sys().compilef()</code> function:</p> <pre><code>compilef = op(name1,name2){\n    $local.r={\n        op:op()($file().get(@name1)),\n        version:$sys().getenv($VERSION)\n    }; \n    if (r.op.type()!=\"$ERR\") \n        r.encode(\"ZIP-GRAPA\").setfile($file(),@name2); \n    else \n        r.op;\n};\n</code></pre> <p>This function: 1. Reads the source <code>.grc</code> file 2. Compiles it to bytecode 3. Adds version information 4. Encodes using ZIP-GRAPA format 5. Saves to the target <code>.grz</code> file</p>"}, {"location": "GRZ_FORMAT/#decoding-grz-files", "title": "Decoding GRZ Files", "text": "<p>To reverse the process and extract information from a GRZ file:</p> <pre><code>/* Read and decode a GRZ file */\ngrz_data = $file().get(\"my_script.grz\");\ndecoded = grz_data.decode(\"ZIP-GRAPA\");\n\n/* Extract components from the decoded array */\ncompiled_script = decoded.op;      /* The compiled script */\nversion_info = decoded.version;    /* Grapa version used */\n\n/* Display information */\necho(\"Compiled script:\", compiled_script);\necho(\"Version:\", version_info);\n</code></pre>"}, {"location": "GRZ_FORMAT/#command-line-decoding", "title": "Command Line Decoding", "text": "<pre><code># Windows\n.\\grapa.exe -q -ccmd \"grz=$file().get('my_script.grz'); decoded=grz.decode('ZIP-GRAPA'); echo('Script:',decoded.op); echo('Version:',decoded.version)\"\n\n# Linux/Mac\n./grapa -q -ccmd \"grz=$file().get('my_script.grz'); decoded=grz.decode('ZIP-GRAPA'); echo('Script:',decoded.op); echo('Version:',decoded.version)\"\n</code></pre>"}, {"location": "GRZ_FORMAT/#file-structure", "title": "File Structure", "text": "<p>A decoded GRZ file contains an array with: - <code>op</code>: The compiled script bytecode - <code>version</code>: The Grapa version used for compilation </p>"}, {"location": "PYTHON_USE_CASES/", "title": "GrapaPy (Python) Use Cases", "text": "<p>GrapaPy brings the power of Grapa to Python users, making advanced data processing, parallelism, and language experimentation accessible from Python. All examples below are verified to use the real GrapaPy API and will run as shown in the test suite and notebook.</p> <p>See Also: - Python Integration Guide - Python-to-Grapa Migration Guide - Getting Started - Examples</p>"}, {"location": "PYTHON_USE_CASES/#migration-tips-for-python-users", "title": "Migration Tips for Python Users", "text": "<p>Key Differences and Tips: - Use <code>$global</code> for persistent objects (file handles, tables, etc.)\u2014local variables are lost between calls. - No <code>for</code>/<code>foreach</code> loops\u2014use <code>while</code> for iteration. - No <code>try/catch</code>\u2014check for <code>$ERR</code> return values and handle errors explicitly. - Use <code>[]</code> for list/array access, not <code>.get()</code> (which is for objects/tables). - Use <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> as methods on arrays/lists, not as global functions. - Every statement and block must end with a semicolon (<code>;</code>). - Only block comments (<code>/* ... */</code>) are supported\u2014no <code>//</code> line comments. - Explicit type conversion is required for results (e.g., <code>.str()</code>, <code>.int()</code>, <code>.float()</code>). - No implicit truthy/falsy\u2014use explicit boolean checks. - No attribute-style access for dict/list keys\u2014use <code>[]</code> or <code>.get()</code> for objects. - See the upcoming Python-to-Grapa Migration Guide for a full mapping and more examples.</p>"}, {"location": "PYTHON_USE_CASES/#thread-safety-and-parallelism", "title": "Thread Safety and Parallelism", "text": "<p>GrapaPy (and Grapa) are fully thread safe by design. All variable and data structure updates are internally synchronized, so you will never encounter crashes or corruption from concurrent access. However, if your program logic allows multiple threads to read and write the same variable or data structure, you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>. To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access. Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like an array or scalar) will return an error.</p> <p>Canonical Example: <pre><code>lock_obj = $thread();\nlock_obj.lock();\n// ... perform thread-safe operations on shared data ...\nlock_obj.unlock();\n</code></pre></p> <p>See Threading and Locking and Function Operators: static and const for details and best practices.</p>"}, {"location": "PYTHON_USE_CASES/#1-etl-data-engineering-verified", "title": "1. ETL / Data Engineering (Verified)", "text": "<p>Example: Count lines in multiple CSV files <pre><code>import grapapy\nxy = grapapy.grapa()\n\nfiles = [\"data1.csv\", \"data2.csv\", \"data3.csv\"]\ntotal_lines = 0\nfor file in files:\n    xy.eval(\"$global.fs = $file();\")  # Only needed once, but safe to repeat\n    content = xy.eval(\"fs.get(filename);\", {\"filename\": file})\n    if content:\n        total_lines += len(str(content).split(\"\\n\"))\nprint(f\"Total lines: {total_lines}\")\n</code></pre></p> <p>Migration Tip: Use GrapaPy for file I/O and text processing instead of loading all data into memory with pandas.</p>"}, {"location": "PYTHON_USE_CASES/#2-compilerbnf-learning-verified", "title": "2. Compiler/BNF Learning (Verified)", "text": "<p>Example: Evaluate arithmetic expressions <pre><code>import grapapy\nxy = grapapy.grapa()\n\nexpressions = [\"2+3*4\", \"(1+2)*3\", \"10/2+5\"]\nfor expr in expressions:\n    result = xy.eval(expr + \";\")\n    print(f\"{expr} = {result}\")\n</code></pre></p> <p>Example: Call Python from Grapa <pre><code>def pyfunc(x):\n    print(f\"Python saw: {x}\")\n    return x * 2\n\nimport grapapy\nxy = grapapy.grapa()\nxy.eval(\"$this.pyfunc = op(x=0){$py().eval('pyfunc', {'x':x});};\")\nxy.eval(\"pyfunc(5);\")  # Output: Python saw: 5\n</code></pre></p>"}, {"location": "PYTHON_USE_CASES/#3-high-precision-math-scientific-computing-verified", "title": "3. High-Precision Math &amp; Scientific Computing (Verified)", "text": "<p>Example: Unlimited precision math <pre><code>import grapapy\nxy = grapapy.grapa()\n\nresult = xy.eval(\"12345678901234567890 * 98765432109876543210;\")\nprint(result)  # Arbitrary precision\n</code></pre></p> <p>Example: Use GrapaPy for float math <pre><code>import grapapy\nxy = grapapy.grapa()\n\nresult = xy.eval(\"3.14159265358979323846264338327950288419716939937510 * 2;\")\nprint(result)\n</code></pre></p>"}, {"location": "PYTHON_USE_CASES/#4-parallelconcurrent-programming-verified", "title": "4. Parallel/Concurrent Programming (Verified)", "text": "<p>Note: GrapaPy is fully thread safe, but if you share mutable state between threads, you are responsible for the logic. Use a <code>$thread()</code> lock object if needed, or prefer immutable data and thread-local variables. See Threading and Locking for examples and best practices.</p> <p>Example: Process a list of numbers <pre><code>import grapapy\nxy = grapapy.grapa()\n\ndata = list(range(10))\nresults = []\nfor item in data:\n    result = xy.eval(\"item * 2;\", {\"item\": item})\n    results.append(result)\nprint(results)\n</code></pre></p>"}, {"location": "PYTHON_USE_CASES/#5-webdata-scraping-automation-verified", "title": "5. Web/Data Scraping &amp; Automation (Verified)", "text": "<p>Example: Use Python requests for web scraping, process with GrapaPy <pre><code>import grapapy\nimport requests\nxy = grapapy.grapa()\n\nurl = \"https://example.com\"\nresponse = requests.get(url)\nif response.status_code == 200:\n    content = response.text\n    # Find all lines containing 'Example'\n    matches = xy.eval(\"content.grep('Example');\", {\"content\": content})\n    print(matches)\n</code></pre></p>"}, {"location": "PYTHON_USE_CASES/#6-database-file-system-integration-verified", "title": "6. Database &amp; File System Integration (Verified)", "text": "<p>Example: File system operations <pre><code>import grapapy\nxy = grapapy.grapa()\n\nxy.eval(\"$global.fs = $file();\")\nxy.eval(\"fs.set('test.txt', 'Hello World!');\")\ncontent = xy.eval(\"fs.get('test.txt');\")\nprint(content)\n</code></pre></p> <p>Example: Table operations <pre><code>import grapapy\nxy = grapapy.grapa()\n\nxy.eval(\"$global.table = $file().table('ROW');\")\nxy.eval(\"table.mkfield('name', 'STR', 'VAR');\")\nxy.eval(\"table.set('user1', 'Alice', 'name');\")\nname = xy.eval(\"table.get('user1', 'name');\")\nprint(name)\n</code></pre></p>"}, {"location": "PYTHON_USE_CASES/#7-education-prototyping-verified", "title": "7. Education &amp; Prototyping (Verified)", "text": "<p>Example: Define and call a Grapa function from Python <pre><code>import grapapy\nxy = grapapy.grapa()\n\nxy.eval(\"$global.square = op(x=0){x*x;};\")\nresult = xy.eval(\"square(7);\")\nprint(result)  # 49\n</code></pre></p> <p>Example: Grapa calling back into Python <pre><code>def pytrace(n):\n    print(f\"trace: {n}\")\n    return n\n\nimport grapapy\nxy = grapapy.grapa()\nxy.eval(\"$this.pytrace = op(n=0){$py().eval('pytrace', {'n':n});};\")\nxy.eval(\"pytrace(42);\")\n</code></pre></p>"}, {"location": "PYTHON_USE_CASES/#all-examples-above-are-verified-to-use-only-the-real-grapapy-api-and-will-run-as-shown-in-the-test-suite-and-notebook", "title": "All examples above are verified to use only the real GrapaPy API and will run as shown in the test suite and notebook.", "text": ""}, {"location": "RUN/", "title": "Run from shell", "text": "<p>From Windows <pre><code>grapa.exe [parameters]\n</code></pre></p> <p>From Linux <pre><code>./grapa [parameters]\n</code></pre></p> <p>To exit while in the console, enter a '.' character.</p> <p>If using paste to enter a block of code to run, ensure each line is not larger than the maximum line line for the console - break up the code into shorter lines.</p> <p>If using paste to enter multiple lines that need to be run at the same time (such as when a single command spans multiple lines), enter <code>$[</code> sequence first and <code>$]</code> sequence at the end. This will trigger the lexical engine to signal to the grammar engine to pause grammar analysis until after all the tokens have been generated for the input stream. </p>"}, {"location": "RUN/#command-line-options", "title": "Command line options", "text": "<p>Once copied into a location (and PATH updated if needed), you'll be able to run the tool using \"grapa\" from a terminal or command shell from any location. Running the tool with \"grapa --env\" will display a few of the directories where the tool will look for information.</p> <p>Other command line options: <pre><code>        -h,--help       :Show this help message\n        -v,--version    :Show version\n        -q,--quite      :Suppress header\n        -env            :Show environment details\n        -ccmd script    :Run from script\n        -cfile file     :Run from file\n    -w      :Editor\n    -wfile file :Editor from file\n        -ccin           :Run from stdin\n        -argcin         :Places std:cin into $ARGCIN environment variable (use with -ccmd|-cfile)\n        -argv           :Places proceeding args into $ARGV environment variable\n</code></pre></p> <p>Example: Performs a SHAKE256 hash of the string \"thisisatest\". <pre><code>grapa -ccmd \"'thisisatest'.encode('SHAKE256')\" -q\n0x94B3D49AF1B6396CD186876793A5C4405A1BBFD12C7341521ABD62AA26E3E852B06B345D82126B1D864DFA885B6DC791D21A318259D307D76D7946D1EFF9DA54\n</code></pre></p> <p>Example: Same, but takes input from cin.  <pre><code>echo \"thisisatest\".encode('SHAKE256') | grapa -ccin -q\n0x94B3D49AF1B6396CD186876793A5C4405A1BBFD12C7341521ABD62AA26E3E852B06B345D82126B1D864DFA885B6DC791D21A318259D307D76D7946D1EFF9DA54\n</code></pre></p>"}, {"location": "RUN/#testing", "title": "Testing", "text": "<p>Grapa includes a comprehensive test suite for validating functionality and performance. All tests are organized in the <code>test/</code> directory.</p>"}, {"location": "RUN/#running-tests", "title": "Running Tests", "text": ""}, {"location": "RUN/#complete-test-suite", "title": "Complete Test Suite", "text": "<p>Run all tests in one command: <pre><code># Windows\n.\\grapa.exe -cfile \"test/infrastructure/run_tests.grc\"\n\n# Linux/Mac\n./grapa -cfile \"test/infrastructure/run_tests.grc\"\n</code></pre></p>"}, {"location": "RUN/#individual-test-categories", "title": "Individual Test Categories", "text": "<pre><code># Capabilities test\n.\\grapa.exe -cfile \"test/grep/test_current_capabilities.grc\"\n\n# Performance test\n.\\grapa.exe -cfile \"test/grep/test_performance_optimizations.grc\"\n\n# Feature-specific tests\n.\\grapa.exe -cfile \"test/grep/test_atomic_groups.grc\"\n.\\grapa.exe -cfile \"test/grep/test_lookaround_assertions.grc\"\n.\\grapa.exe -cfile \"test/grep/test_unicode_grapheme_clusters.grc\"\n</code></pre>"}, {"location": "RUN/#regression-testing", "title": "Regression Testing", "text": "<p>For development and CI/CD: <pre><code># Quick regression test\n.\\grapa.exe -cfile \"test/infrastructure/run_tests.grc\"\n</code></pre></p> <p>For detailed testing information, see Testing Documentation.</p>"}, {"location": "RUN/#editor", "title": "Editor", "text": "<p>Grapa includes a widget library that can be used create create a GUI. Grapa can be run with simple editor (see lib/grapa/editor.grc) writen using this library. <pre><code>grapa -w\n</code></pre></p> <p>You can also create your own GUI to run with grapa. This file can either be a raw text file, or a grapa compiled file. <pre><code>grapa -wfile [file]\n</code></pre></p>"}, {"location": "TESTING/", "title": "Testing Grapa Scripts", "text": "<p>For Users: Learn how to test your Grapa scripts effectively using Grapa's built-in capabilities.</p> <p>See Also: - Getting Started - Examples - API Reference</p>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#table-of-contents", "title": "Table of Contents", "text": "<ul> <li>Basic Testing</li> <li>Error Handling Tests</li> <li>Data Structure Testing</li> <li>File I/O Testing</li> <li>Parallel Processing Tests</li> <li>Pattern Matching Tests</li> <li>Integration Testing</li> <li>Best Practices</li> </ul>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#syntax-reminders", "title": "Syntax Reminders", "text": "<ul> <li>Every statement and every block (including after closing braces) must end with a semicolon (<code>;</code>).</li> <li>Use block comments (<code>/* ... */</code>), not line comments (<code>// ...</code>).</li> <li>To append to arrays, use the <code>+=</code> operator (not <code>.push()</code> or <code>.append()</code>).</li> <li>Use <code>[]</code> for list/array access, not <code>.get()</code> (which is for objects/tables).</li> <li>Check for <code>$ERR</code> when accessing keys or attributes that may not exist.</li> <li>See Syntax Quick Reference for more.</li> </ul>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#basic-testing", "title": "Basic Testing", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#simple-assertion-testing", "title": "Simple Assertion Testing", "text": "<pre><code>/* Test basic function */\ntest_function = op(x) { x * 2; };\nresult = test_function(5);\nif (result != 10) {\n    (\"Test failed: expected 10, got \" + result.str()).echo();\n} else {\n    \"Test passed: function correctly doubles input\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-with-multiple-cases", "title": "Testing with Multiple Cases", "text": "<pre><code>/* Test function with multiple inputs */\ntest_cases = [0, 1, 5, 10, -3];\nexpected_results = [0, 2, 10, 20, -6];\ni = 0;\nwhile (i &lt; test_cases.len()) {\n    result = test_function(test_cases[i]);\n    expected = expected_results[i];\n    if (result != expected) {\n        (\"Test failed for input \" + test_cases[i].str() + \": expected \" + expected.str() + \", got \" + result.str()).echo();\n    } else {\n        (\"Test passed for input \" + test_cases[i].str()).echo();\n    };\n    i += 1;\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-string-operations", "title": "Testing String Operations", "text": "<pre><code>/* Test string operations */\ntest_string = \"  Hello, World!  \";\ntrimmed = test_string.trim();\nupper = trimmed.upper();\n\nif (trimmed != \"Hello, World!\") {\n    \"String trim test failed\".echo();\n} else {\n    \"String trim test passed\".echo();\n};\n\nif (upper != \"HELLO, WORLD!\") {\n    \"String upper test failed\".echo();\n} else {\n    \"String upper test passed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#error-handling-tests", "title": "Error Handling Tests", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-error-conditions", "title": "Testing Error Conditions", "text": "<pre><code>/* Test division by zero handling */\ntest_division = op(a, b) {\n    if (b == 0) {\n        $ERR;\n    } else {\n        a / b;\n    };\n};\n\n/* Test error case */\nresult = test_division(10, 0);\nif (result.type() == $ERR) {\n    \"Division by zero correctly caught\".echo();\n} else {\n    \"Division by zero test failed\".echo();\n};\n\n/* Test success case */\nresult = test_division(10, 2);\nif (result.type() != $ERR &amp;&amp; result == 5) {\n    \"Division test passed\".echo();\n} else {\n    \"Division test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-object-property-access", "title": "Testing Object Property Access", "text": "<pre><code>/* Test safe object property access */\ntest_obj = {\"name\": \"Alice\", \"age\": 30};\n\n/* Test existing property */\nname = test_obj.get(\"name\");\nif (name != \"Alice\") {\n    \"Object property test failed\".echo();\n} else {\n    \"Object property test passed\".echo();\n};\n\n/* Test missing property */\nmissing = test_obj.get(\"nonexistent\");\nif (missing.type() == $ERR) {\n    \"Missing property correctly returns $ERR\".echo();\n} else {\n    \"Missing property test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#data-structure-testing", "title": "Data Structure Testing", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-array-operations", "title": "Testing Array Operations", "text": "<pre><code>/* Test array operations */\ntest_array = [1, 2, 3, 4, 5];\ndoubled = test_array.map(op(x) { x * 2; });\nexpected = [2, 4, 6, 8, 10];\n\n/* Compare arrays */\nif (doubled.len() != expected.len()) {\n    \"Array length test failed\".echo();\n} else {\n    \"Array length test passed\".echo();\n};\n\n/* Compare each element */\ni = 0;\nwhile (i &lt; doubled.len()) {\n    if (doubled[i] != expected[i]) {\n        (\"Array element test failed at index \" + i.str() + \": expected \" + expected[i].str() + \", got \" + doubled[i].str()).echo();\n    } else {\n        (\"Array element test passed at index \" + i.str()).echo();\n    };\n    i = i + 1;\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-array-filtering", "title": "Testing Array Filtering", "text": "<pre><code>/* Test array filtering */\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nevens = numbers.filter(op(x) { x % 2 == 0; });\nexpected_evens = [2, 4, 6, 8, 10];\n\nif (evens.len() != expected_evens.len()) {\n    \"Filter length test failed\".echo();\n} else {\n    \"Filter length test passed\".echo();\n};\n\n/* Sort for comparison (order may vary with parallel processing) */\nevens_sorted = evens.sort();\nexpected_sorted = expected_evens.sort();\n\nif (evens_sorted.str() == expected_sorted.str()) {\n    \"Filter test passed\".echo();\n} else {\n    \"Filter test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-array-reduction", "title": "Testing Array Reduction", "text": "<pre><code>/* Test array reduction */\nnumbers = [1, 2, 3, 4, 5];\nsum = numbers.reduce(op(acc, x) { acc + x; }, 0);\nexpected_sum = 15;\n\nif (sum == expected_sum) {\n    \"Reduce test passed\".echo();\n} else {\n    (\"Reduce test failed: expected \" + expected_sum.str() + \", got \" + sum.str()).echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#file-io-testing", "title": "File I/O Testing", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-file-operations", "title": "Testing File Operations", "text": "<pre><code>/* Test file operations */\ntest_file = \"test_data.txt\";\ntest_content = \"Hello, Grapa!\";\n\n/* Write test data */\nfile_set(test_file, test_content);\n\n/* Read and verify */\nread_content = file_get(test_file);\nif (read_content != test_content) {\n    \"File content test failed\".echo();\n} else {\n    \"File content test passed\".echo();\n};\n\n/* Test file listing */\nfiles = file_ls(\".\");\ntest_file_found = false;\ni = 0;\nwhile (i &lt; files.len()) {\n    if (files[i].name == test_file) {\n        test_file_found = true;\n    };\n    i = i + 1;\n};\n\nif (test_file_found) {\n    \"File listing test passed\".echo();\n} else {\n    \"File listing test failed\".echo();\n};\n\n/* Cleanup */\nfile_set(test_file, \"\");  /* Clear file */\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-json-processing", "title": "Testing JSON Processing", "text": "<pre><code>/* Test JSON parsing and processing */\njson_text = '{\"name\": \"Alice\", \"age\": 30, \"active\": true}';\nparsed = json_text.json();\n\n/* Test object access */\nname = parsed.get(\"name\");\nage = parsed.get(\"age\");\nactive = parsed.get(\"active\");\n\nif (name == \"Alice\" &amp;&amp; age == 30 &amp;&amp; active == true) {\n    \"JSON parsing test passed\".echo();\n} else {\n    \"JSON parsing test failed\".echo();\n};\n\n/* Test missing key */\nmissing = parsed.get(\"nonexistent\");\nif (missing.type() == $ERR) {\n    \"JSON missing key test passed\".echo();\n} else {\n    \"JSON missing key test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#parallel-processing-tests", "title": "Parallel Processing Tests", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-parallel-operations", "title": "Testing Parallel Operations", "text": "<pre><code>/* Test parallel operations */\ntest_data = (1000).range(0, 1);  /* Generate 0-999 */\nexpected_sum = test_data.reduce(op(acc, x) { acc + x; }, 0);\n\n/* Test parallel sum with limited threads */\n/* 4 threads */\nparallel_sum = test_data.reduce(op(acc, x) { acc + x; }, 0, 4);\n\nif (parallel_sum == expected_sum) {\n    \"Parallel sum test passed\".echo();\n} else {\n    (\"Parallel sum test failed: expected \" + expected_sum.str() + \", got \" + parallel_sum.str()).echo();\n};\n\n/* Test parallel mapping */\n/* 4 threads */\ndoubled = test_data.map(op(x) { x * 2; }, 4);\n/* Sequential for comparison */\nexpected_doubled = test_data.map(op(x) { x * 2; });\n\n/* Sort for comparison (parallel order may vary) */\ndoubled_sorted = doubled.sort();\nexpected_sorted = expected_doubled.sort();\n\nif (doubled_sorted.str() == expected_sorted.str()) {\n    \"Parallel map test passed\".echo();\n} else {\n    \"Parallel map test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-thread-safety", "title": "Testing Thread Safety", "text": "<pre><code>/* Test thread safety with shared data */\nshared_counter = 0;\nlock_obj = $thread();\n\n/* Create multiple threads that increment counter */\nincrement_worker = op() {\n    lock_obj.lock();\n    shared_counter = shared_counter + 1;\n    lock_obj.unlock();\n};\n\n/* Run multiple increments */\ni = 0;\nwhile (i &lt; 100) {\n    increment_worker();\n    i = i + 1;\n};\n\nif (shared_counter == 100) {\n    \"Thread safety test passed\".echo();\n} else {\n    (\"Thread safety test failed: expected 100, got \" + shared_counter.str()).echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#pattern-matching-tests", "title": "Pattern Matching Tests", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-grep-patterns", "title": "Testing Grep Patterns", "text": "<pre><code>/* Test basic pattern matching */\ntest_text = \"Hello world\\nGoodbye world\\nHello again\";\nmatches = test_text.grep(\"Hello\", \"o\");\n\nexpected_matches = [\"Hello\", \"Hello\"];\nif (matches.len() != expected_matches.len()) {\n    \"Grep match count test failed\".echo();\n} else {\n    \"Grep match count test passed\".echo();\n};\n\n/* Test case-insensitive matching */\ncase_matches = test_text.grep(\"hello\", \"oi\");\nif (case_matches.len() == 2) {\n    \"Case-insensitive grep test passed\".echo();\n} else {\n    \"Case-insensitive grep test failed\".echo();\n};\n\n/* Test Unicode case folding */\nturkish_text = \"\u0130stanbul \u0131stanbul\";\nturkish_matches = turkish_text.grep(\"istanbul\", \"i\");\nif (turkish_matches.len() == 1) {\n    \"Turkish I case folding test passed\".echo();\n} else {\n    \"Turkish I case folding test failed\".echo();\n};\n\n/* Test German sharp S case folding */\ngerman_text = \"Stra\u00dfe\";\ngerman_matches = german_text.grep(\"strasse\", \"i\");\nif (german_matches.len() == 1) {\n    \"German sharp S case folding test passed\".echo();\n} else {\n    \"German sharp S case folding test failed\".echo();\n};\n\n/* Test Greek final sigma case folding */\ngreek_text = \"\u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\";\ngreek_matches = greek_text.grep(\"\u0393\u03a1\u0391\u039c\u039c\u0391\", \"i\");\nif (greek_matches.len() == 1) {\n    \"Greek final sigma case folding test passed\".echo();\n} else {\n    \"Greek final sigma case folding test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-complex-patterns", "title": "Testing Complex Patterns", "text": "<pre><code>/* Test complex regex patterns */\ntest_text = \"abc123\\ndef456\\nghi789\";\nnumber_matches = test_text.grep(\"[0-9]+\", \"o\");\n\nif (number_matches.len() == 3) {\n    \"Number pattern test passed\".echo();\n} else {\n    \"Number pattern test failed\".echo();\n};\n\n/* Test word boundaries */\nword_text = \"hello world hello123 hello_test\";\nword_matches = word_text.grep(\"hello\", \"wo\");\n\nif (word_matches.len() == 2) {\n    \"Word boundary test passed\".echo();\n} else {\n    \"Word boundary test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-unicode-patterns", "title": "Testing Unicode Patterns", "text": "<pre><code>/* Test Unicode pattern matching */\nunicode_text = \"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\";\nunicode_matches = unicode_text.grep(\"\u00e9\", \"o\");\n\nif (unicode_matches.len() == 3) {\n    \"Unicode pattern test passed\".echo();\n} else {\n    \"Unicode pattern test failed\".echo();\n};\n\n/* Test grapheme clusters */\nemoji_text = \"Hello \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 World\";\ngrapheme_matches = emoji_text.grep(\"\\\\X\", \"o\");\n\nif (grapheme_matches.len() &gt; 0) {\n    \"Grapheme cluster test passed\".echo();\n} else {\n    \"Grapheme cluster test failed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#integration-testing", "title": "Integration Testing", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-complete-workflows", "title": "Testing Complete Workflows", "text": "<pre><code>/* Test complete ETL workflow */\ntest_etl_workflow = op() {\n    /* Setup test data */\n    test_data = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}];\n\n    /* Transform data */\n    processed = test_data.map(op(record) {\n        {\"name\": record.get(\"name\").upper(), \"age\": record.get(\"age\")};\n    });\n\n    /* Verify results */\n    if (processed.len() != 2) {\n        \"ETL workflow test failed: expected 2 records\".echo();\n        return false;\n    };\n\n    if (processed[0].get(\"name\") != \"ALICE\") {\n        \"ETL workflow test failed: name not uppercased\".echo();\n        return false;\n    };\n\n    if (processed[1].get(\"name\") != \"BOB\") {\n        \"ETL workflow test failed: second name not uppercased\".echo();\n        return false;\n    };\n\n    \"ETL workflow test passed\".echo();\n    return true;\n};\n\ntest_etl_workflow();\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#testing-data-validation-pipeline", "title": "Testing Data Validation Pipeline", "text": "<pre><code>/* Test data validation pipeline */\ntest_validation_pipeline = op() {\n    /* Define validation rules */\n    rules = {\n        \"email\": {\"pattern\": \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"},\n        \"age\": {\"min\": 0, \"max\": 150},\n        \"salary\": {\"min\": 0, \"max\": 1000000}\n    };\n\n    /* Test data */\n    test_records = [\n        {\"email\": \"alice@example.com\", \"age\": 30, \"salary\": 50000},\n        {\"email\": \"invalid-email\", \"age\": -5, \"salary\": 2000000},\n        {\"email\": \"bob@test.org\", \"age\": 25, \"salary\": 75000}\n    ];\n\n    /* Validate function */\n    validate_record = op(record, rules) {\n        errors = [];\n\n        /* Check email pattern */\n        if (!record.get(\"email\").grep(rules.get(\"email\").get(\"pattern\"), \"o\").len() &gt; 0) {\n            errors += \"Invalid email format\";\n        };\n\n        /* Check age range */\n        age = record.get(\"age\");\n        if (age &lt; rules.get(\"age\").get(\"min\") || age &gt; rules.get(\"age\").get(\"max\")) {\n            errors += \"Age out of range\";\n        };\n\n        /* Check salary range */\n        salary = record.get(\"salary\");\n        if (salary &lt; rules.get(\"salary\").get(\"min\") || salary &gt; rules.get(\"salary\").get(\"max\")) {\n            errors += \"Salary out of range\";\n        };\n\n        {\"record\": record, \"errors\": errors, \"valid\": errors.len() == 0};\n    };\n\n    /* Process validation results */\n    results = test_records.map(op(record) { validate_record(record, rules); });\n    valid_records = results.filter(op(result) { result.get(\"valid\"); });\n    invalid_records = results.filter(op(result) { !result.get(\"valid\"); });\n\n    /* Verify expected results */\n    if (valid_records.len() == 2 &amp;&amp; invalid_records.len() == 1) {\n        \"Validation pipeline test passed\".echo();\n        return true;\n    } else {\n        \"Validation pipeline test failed\".echo();\n        return false;\n    };\n};\n\ntest_validation_pipeline();\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#best-practices", "title": "Best Practices", "text": "", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#1-use-descriptive-test-names", "title": "1. Use Descriptive Test Names", "text": "<pre><code>/* Good: Descriptive test name */\ntest_array_doubling_function = op() {\n    /* Test that array doubling function works correctly */\n    test_data = [1, 2, 3];\n    result = test_data.map(op(x) { x * 2; });\n    expected = [2, 4, 6];\n\n    if (result.str() == expected.str()) {\n        \"Array doubling test passed\".echo();\n    } else {\n        \"Array doubling test failed\".echo();\n    };\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#2-test-edge-cases", "title": "2. Test Edge Cases", "text": "<pre><code>/* Test edge cases */\ntest_edge_cases = op() {\n    /* Test empty array */\n    empty_result = [].map(op(x) { x * 2; });\n    if (empty_result.len() == 0) {\n        \"Empty array test passed\".echo();\n    } else {\n        \"Empty array test failed\".echo();\n    };\n\n    /* Test single element */\n    single_result = [5].map(op(x) { x * 2; });\n    if (single_result[0] == 10) {\n        \"Single element test passed\".echo();\n    } else {\n        \"Single element test failed\".echo();\n    };\n\n    /* Test negative numbers */\n    negative_result = [-1, -2, -3].map(op(x) { x * 2; });\n    if (negative_result.str() == \"[-2,-4,-6]\") {\n        \"Negative numbers test passed\".echo();\n    } else {\n        \"Negative numbers test failed\".echo();\n    };\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#3-clean-up-test-data", "title": "3. Clean Up Test Data", "text": "<pre><code>/* Always clean up test files */\ntest_with_cleanup = op() {\n    test_file = \"temp_test.txt\";\n\n    /* Run test */\n    file_set(test_file, \"test data\");\n    content = file_get(test_file);\n\n    if (content == \"test data\") {\n        \"File test passed\".echo();\n    } else {\n        \"File test failed\".echo();\n    };\n\n    /* Clean up */\n    file_set(test_file, \"\");\n    \"Test cleanup completed\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#4-use-consistent-assertion-patterns", "title": "4. Use Consistent Assertion Patterns", "text": "<pre><code>/* Create reusable assertion functions */\nassert_equal = op(actual, expected, message) {\n    if (actual == expected) {\n        (\"\u2713 \" + message + \" passed\").echo();\n        return true;\n    } else {\n        (\"\u2717 \" + message + \" failed: expected \" + expected.str() + \", got \" + actual.str()).echo();\n        return false;\n    };\n};\n\nassert_array_equal = op(actual, expected, message) {\n    if (actual.len() != expected.len()) {\n        (\"\u2717 \" + message + \" failed: length mismatch\").echo();\n        return false;\n    };\n\n    i = 0;\n    while (i &lt; actual.len()) {\n        if (actual[i] != expected[i]) {\n            (\"\u2717 \" + message + \" failed at index \" + i.str()).echo();\n            return false;\n        };\n        i = i + 1;\n    };\n\n    (\"\u2713 \" + message + \" passed\").echo();\n    return true;\n};\n\n/* Use assertions in tests */\ntest_with_assertions = op() {\n    result = 5 * 2;\n    assert_equal(result, 10, \"Multiplication test\");\n\n    array_result = [1, 2, 3].map(op(x) { x * 2; });\n    assert_array_equal(array_result, [2, 4, 6], \"Array mapping test\");\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#5-test-both-success-and-failure-paths", "title": "5. Test Both Success and Failure Paths", "text": "<pre><code>/* Test both success and failure scenarios */\ntest_comprehensive = op() {\n    /* Test success case */\n    success_result = test_function(5);\n    if (success_result == 10) {\n        \"Success case test passed\".echo();\n    } else {\n        \"Success case test failed\".echo();\n    };\n\n    /* Test failure case */\n    error_result = test_function(null);\n    if (error_result.type() == $ERR) {\n        \"Error case test passed\".echo();\n    } else {\n        \"Error case test failed\".echo();\n    };\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#6-use-parallel-processing-carefully", "title": "6. Use Parallel Processing Carefully", "text": "<pre><code>/* Test parallel operations with thread limits */\ntest_parallel_safely = op() {\n    large_data = (10000).range(0, 1);\n\n    /* Use limited threads for large datasets */\n    /* Limit to 4 threads */\nresult = large_data.map(op(x) { x * 2; }, 4);\n\n    if (result.len() == 10000) {\n        \"Parallel processing test passed\".echo();\n    } else {\n        \"Parallel processing test failed\".echo();\n    };\n};\n</code></pre>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#next-steps", "title": "Next Steps", "text": "<ul> <li>Learn about Testing your Grapa code</li> <li>Check out the Grep functionality for advanced pattern matching</li> <li>Review the Syntax Quick Reference for more syntax rules and tips</li> </ul>", "tags": ["user", "highlevel", "testing"]}, {"location": "TESTING/#thread-safety-and-parallelism", "title": "Thread Safety and Parallelism", "text": "<p>Grapa is fully thread safe by design. All variable and data structure updates are internally synchronized at the C++ level, so you will never encounter crashes or corruption from concurrent access. However, if your program logic allows multiple threads to read and write the same variable or data structure, you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>. To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access. Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like an array or scalar) will return an error.</p> <p>Canonical Example: <pre><code>lock_obj = $thread();\nlock_obj.lock();\n/* ... perform thread-safe operations on shared data ... */\nlock_obj.unlock();\n</code></pre></p> <p>See Threading and Locking and Function Operators: static and const for details and best practices. </p>", "tags": ["user", "highlevel", "testing"]}, {"location": "TROUBLESHOOTING/", "title": "Troubleshooting", "text": ""}, {"location": "TROUBLESHOOTING/#critical-issues", "title": "Critical Issues", "text": ""}, {"location": "TROUBLESHOOTING/#row-table-index-corruption-bug", "title": "\ud83d\udea8 ROW Table Index Corruption Bug", "text": "<p>Issue: ROW tables have a critical bug where the first record's index becomes corrupted when the third record is added.</p> <p>Symptoms: - First record returns <code>{\"error\":-1}</code> when retrieved - Subsequent records work correctly - Debug output shows empty RPTR entries for first record</p> <p>Workaround: Use COL tables instead of ROW tables <pre><code>// Instead of:\ntbl = $file().table(\"ROW\");\n\n// Use:\ntbl = $file().table(\"COL\");\n</code></pre></p> <p>Status: Under investigation. COL tables provide the same functionality and work correctly.</p>"}, {"location": "TROUBLESHOOTING/#common-issues", "title": "Common Issues", "text": "<p>This guide covers common issues encountered when working with Grapa and GrapaPy, along with their solutions and debugging techniques.</p> <p>See Also: - Getting Started - Migration Tips for Python Users - Python Integration Guide</p>"}, {"location": "TROUBLESHOOTING/#common-error-patterns", "title": "Common Error Patterns", "text": ""}, {"location": "TROUBLESHOOTING/#error-1-responses", "title": "<code>{\"error\":-1}</code> Responses", "text": "<p>Problem: Operations return <code>{\"error\":-1}</code> instead of expected results.</p> <p>Common Causes: 1. Namespace Issues: Objects created in local namespace are lost between calls 2. Missing Global Variables: Objects not properly stored in global namespace 3. Type Conversion Issues: Binary data not converted to appropriate types</p> <p>Solutions:</p>"}, {"location": "TROUBLESHOOTING/#namespace-issues", "title": "Namespace Issues", "text": "<pre><code># \u274c Problem: Object lost between calls\nxy.eval('table = $file().table(\"ROW\")')\nxy.eval('table.mkfield(\"name\", \"STR\")')  # Error: table not found\n\n# \u2705 Solution: Use global namespace\nxy.eval('$global.table = $file().table(\"ROW\")')\nxy.eval('table.mkfield(\"name\", \"STR\")')  # Success\n</code></pre>"}, {"location": "TROUBLESHOOTING/#type-conversion-issues", "title": "Type Conversion Issues", "text": "<pre><code># \u274c Problem: Binary data not converted\nresult = xy.eval('table.get(\"user1\", \"name\")')  # Binary data\n\n# \u2705 Solution: Convert to appropriate type\nresult = xy.eval('table.get(\"user1\", \"name\").str()')  # String\n</code></pre>"}, {"location": "TROUBLESHOOTING/#object-not-found-errors", "title": "Object Not Found Errors", "text": "<p>Problem: Variables or objects are not found when expected.</p> <p>Common Causes: 1. Local Namespace Clearing: Variables created in one call are lost in the next 2. Missing Global Declaration: Objects not stored in global namespace 3. Incorrect Variable Names: Typos or incorrect variable references</p> <p>Solutions:</p> <pre><code># \u2705 Always use $global for persistent objects\nxy.eval('$global.fs = $file()')\nxy.eval('$global.table = $file().table(\"ROW\")')\n\n# \u2705 Use variable names directly after global declaration\nxy.eval('fs.set(\"test.txt\", \"content\")')\nxy.eval('table.mkfield(\"name\", \"STR\")')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#field-type-issues", "title": "Field Type Issues", "text": "<p>Problem: Integer fields are created as string types instead of integer types.</p> <p>Common Cause: Incorrect field creation syntax for integer fields.</p> <p>Solutions:</p> <pre><code># \u274c Problem: May create string fields\nxy.eval('table.mkfield(\"age\", \"INT\", \"FIX\", 4)')\n\n# \u2705 Solution: Use without explicit mode for integers\nxy.eval('table.mkfield(\"age\", \"INT\")')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#syntax-errors", "title": "Syntax Errors", "text": "<p>Problem: Grapa code fails to parse or execute.</p> <p>Common Causes: 1. Incorrect Echo Syntax: Using function calls instead of method calls 2. Wrong Loop Syntax: Using <code>for</code> loops instead of <code>while</code> loops 3. Missing Parentheses: String concatenation not properly wrapped</p> <p>Solutions:</p>"}, {"location": "TROUBLESHOOTING/#echo-syntax", "title": "Echo Syntax", "text": "<pre><code>/* \u274c Incorrect */\necho(\"Hello World\");\n\n/* \u2705 Correct */\n\"Hello World\".echo();\n</code></pre>"}, {"location": "TROUBLESHOOTING/#loop-syntax", "title": "Loop Syntax", "text": "<pre><code>/* \u274c Incorrect */\nfor i in 1..10 {\n    echo(\"Item \" + i);\n}\n\n/* \u2705 Correct */\ni = 1;\nwhile (i &lt;= 10) {\n    (\"Item \" + i.str()).echo();\n    i = i + 1;\n}\n</code></pre>"}, {"location": "TROUBLESHOOTING/#string-concatenation", "title": "String Concatenation", "text": "<pre><code>/* \u274c Incorrect */\n\"Name: \" + name.str() + \", Age: \" + age.str().echo();\n\n/* \u2705 Correct */\n(\"Name: \" + name.str() + \", Age: \" + age.str()).echo();\n</code></pre>"}, {"location": "TROUBLESHOOTING/#array-and-object-access-issues", "title": "Array and Object Access Issues", "text": "<p>Problem: Confusion about when to use bracket notation vs <code>.get()</code> method.</p> <p>Solution: Understand the distinction between different object types:</p>"}, {"location": "TROUBLESHOOTING/#arrays-and-lists", "title": "Arrays and Lists", "text": "<pre><code>/* \u2705 Arrays support both bracket notation and .get() */\nelement = [\"a\", \"b\", \"c\"];\nvalue = element[1];        /* Returns \"b\" */\nvalue = element.get(1);    /* Returns \"b\" */\n\n/* \u2705 Lists support bracket notation, .get(), and .getname() */\nobj = {\"a\": 11, \"b\": 22, \"c\": 33};\nvalue = obj[\"b\"];          /* Returns 22 */\nvalue = obj.get(\"b\");      /* Returns 22 */\nname = obj.getname(1);     /* Returns \"b\" */\n</code></pre>"}, {"location": "TROUBLESHOOTING/#file-and-table-objects", "title": "$file and $TABLE Objects", "text": "<pre><code>/* \u2705 ALWAYS use .get() for $file and $TABLE objects */\nfiles = fs.ls();\nfile_info = files.get(0);\n\ntable_data = table.get(\"user1\", \"name\");\n\n/* \u274c Avoid bracket notation for $file and $TABLE objects */\nfile_info = files[0];  /* May not work reliably */\n</code></pre>"}, {"location": "TROUBLESHOOTING/#debugging-techniques", "title": "Debugging Techniques", "text": ""}, {"location": "TROUBLESHOOTING/#check-object-types", "title": "Check Object Types", "text": "<pre><code># Check what type an object is\nxy.eval('$global.debug_obj = some_operation()')\nobj_type = xy.eval('debug_obj.type()')\nprint(f\"Object type: {obj_type}\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#verify-global-variables", "title": "Verify Global Variables", "text": "<pre><code># Test if global variable exists\nxy.eval('$global.test_var = \"test\"')\nresult = xy.eval('test_var')\nprint(f\"Global variable: {result}\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#step-by-step-debugging", "title": "Step-by-Step Debugging", "text": "<pre><code># Test each step individually\nxy.eval('$global.fs = $file()')\nprint(\"File object created\")\n\nxy.eval('fs.set(\"test.txt\", \"Hello\")')\nprint(\"File written\")\n\ncontent = xy.eval('fs.get(\"test.txt\").str()')\nprint(f\"File content: {content}\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#error-pattern-analysis", "title": "Error Pattern Analysis", "text": "<pre><code># Check for specific error patterns\nresult = xy.eval('some_operation()')\nif result == {\"error\":-1}:\n    print(\"Operation failed with error -1\")\nelif result.type() == \"$ERR\":\n    print(\"Operation returned error type\")\nelse:\n    print(f\"Operation succeeded: {result}\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#grapapy-integration-issues", "title": "GrapaPy Integration Issues", "text": ""}, {"location": "TROUBLESHOOTING/#namespace-persistence", "title": "Namespace Persistence", "text": "<p>Problem: Objects don't persist between Python calls.</p> <p>Solution: Always use <code>$global</code> for objects that need to persist:</p> <pre><code># \u2705 Correct pattern\nxy.eval('$global.table = $file().table(\"ROW\")')\nxy.eval('table.mkfield(\"name\", \"STR\", \"VAR\")')\nxy.eval('table.set(\"user1\", \"John\", \"name\")')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#type-conversion", "title": "Type Conversion", "text": "<p>Problem: Binary data returned instead of Python types.</p> <p>Solution: Use Grapa's conversion methods:</p> <pre><code># \u2705 Convert binary data to Python types\nname = xy.eval('table.get(\"user1\", \"name\").str()')\nage = xy.eval('table.get(\"user1\", \"age\").int()')\nsalary = xy.eval('table.get(\"user1\", \"salary\").float()')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#helper-classes", "title": "Helper Classes", "text": "<p>Problem: Repetitive code for common operations.</p> <p>Solution: Create helper classes:</p> <pre><code>class GrapaTableHelper:\n    def __init__(self, grapa_instance, table_name):\n        self.xy = grapa_instance\n        self.table_name = table_name\n        self.xy.eval(f'$global.{table_name} = $file().table(\"ROW\")')\n\n    def mkfield(self, name, field_type, mode=\"VAR\", size=None):\n        if size:\n            self.xy.eval(f'{self.table_name}.mkfield(\"{name}\", \"{field_type}\", \"{mode}\", {size})')\n        else:\n            self.xy.eval(f'{self.table_name}.mkfield(\"{name}\", \"{field_type}\")')\n\n    def set(self, key, value, field):\n        self.xy.eval(f'{self.table_name}.set(\"{key}\", \"{value}\", \"{field}\")')\n\n    def get(self, key, field, convert_type=\"str\"):\n        return self.xy.eval(f'{self.table_name}.get(\"{key}\", \"{field}\").{convert_type}()')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#command-line-issues", "title": "Command Line Issues", "text": ""}, {"location": "TROUBLESHOOTING/#file-execution", "title": "File Execution", "text": "<p>Problem: <code>.grc</code> files don't execute properly.</p> <p>Solution: Use correct command line options:</p> <pre><code># \u2705 Correct: Use -cfile for .grc files\n.\\grapa.exe -cfile \"test/core/test_file.grc\"\n\n# \u274c Incorrect: -ccmd may cause parsing issues\n.\\grapa.exe -ccmd \"test/core/test_file.grc\"\n</code></pre>"}, {"location": "TROUBLESHOOTING/#quiet-mode", "title": "Quiet Mode", "text": "<p>Problem: Too much output from version headers.</p> <p>Solution: Use <code>-q</code> flag to suppress version output:</p> <pre><code>.\\grapa.exe -cfile \"test/core/test_file.grc\" -q\n</code></pre>"}, {"location": "TROUBLESHOOTING/#best-practices-for-debugging", "title": "Best Practices for Debugging", "text": ""}, {"location": "TROUBLESHOOTING/#1-test-incrementally", "title": "1. Test Incrementally", "text": "<pre><code># Test each operation step by step\nxy.eval('$global.test = \"Hello\"')\nprint(\"Step 1: Variable created\")\n\nresult = xy.eval('test')\nprint(f\"Step 2: Variable retrieved: {result}\")\n\nxy.eval('$global.fs = $file()')\nprint(\"Step 3: File object created\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#2-use-descriptive-variable-names", "title": "2. Use Descriptive Variable Names", "text": "<pre><code># \u2705 Good: Clear variable names\nxy.eval('$global.user_table = $file().table(\"ROW\")')\nxy.eval('$global.file_system = $file()')\n\n# \u274c Bad: Unclear variable names\nxy.eval('$global.t = $file().table(\"ROW\")')\nxy.eval('$global.f = $file()')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#3-check-return-values", "title": "3. Check Return Values", "text": "<pre><code># Always check what operations return\nresult = xy.eval('some_operation()')\nprint(f\"Operation returned: {result}\")\nprint(f\"Type: {type(result)}\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#4-use-error-handling", "title": "4. Use Error Handling", "text": "<pre><code>try:\n    result = xy.eval('some_operation()')\n    if result == {\"error\":-1}:\n        print(\"Operation failed\")\n    else:\n        print(\"Operation succeeded\")\nexcept Exception as e:\n    print(f\"Exception occurred: {e}\")\n</code></pre>"}, {"location": "TROUBLESHOOTING/#common-patterns-and-solutions", "title": "Common Patterns and Solutions", "text": ""}, {"location": "TROUBLESHOOTING/#table-operations-pattern", "title": "Table Operations Pattern", "text": "<pre><code># \u2705 Complete table operation pattern\nxy.eval('$global.table = $file().table(\"ROW\")')\nxy.eval('table.mkfield(\"name\", \"STR\", \"VAR\")')\nxy.eval('table.mkfield(\"age\", \"INT\")')\nxy.eval('table.mkfield(\"salary\", \"FLOAT\", \"FIX\", 8)')\n\nxy.eval('table.set(\"user1\", \"John Doe\", \"name\")')\nxy.eval('table.set(\"user1\", 30, \"age\")')\nxy.eval('table.set(\"user1\", 75000.50, \"salary\")')\n\nname = xy.eval('table.get(\"user1\", \"name\").str()')\nage = xy.eval('table.get(\"user1\", \"age\").int()')\nsalary = xy.eval('table.get(\"user1\", \"salary\").float()')\n</code></pre>"}, {"location": "TROUBLESHOOTING/#file-operations-pattern", "title": "File Operations Pattern", "text": "<pre><code># \u2705 Complete file operation pattern\nxy.eval('$global.fs = $file()')\nxy.eval('fs.set(\"test.txt\", \"Hello World\")')\ncontent = xy.eval('fs.get(\"test.txt\").str()')\nxy.eval('fs.rm(\"test.txt\")')\n</code></pre> <p>This troubleshooting guide covers the most common issues and their solutions. When encountering problems, start with the namespace and type conversion issues, as these are the most frequent causes of <code>{\"error\":-1}</code> responses. </p> <p>For Python Users: If you encounter issues with GrapaPy integration, see the Migration Tips for Python Users for solutions to common problems and best practices. </p>"}, {"location": "directory_navigation/", "title": "Directory Navigation in Grapa", "text": ""}, {"location": "directory_navigation/#syntax-reminders", "title": "Syntax Reminders", "text": "<ul> <li>Every statement and every block (including after closing braces) must end with a semicolon (<code>;</code>).</li> <li>Use block comments (<code>/* ... */</code>), not line comments (<code>// ...</code>).</li> <li>To append to arrays, use the <code>+=</code> operator (not <code>.push()</code> or <code>.append()</code>).</li> <li>See Syntax Quick Reference for more.</li> </ul>"}, {"location": "directory_navigation/#minimal-example", "title": "Minimal Example", "text": "<pre><code>f = $file();\nf.chd(\"C:/Users/user/Projects/MyProject\");\nf.cd(\"src\");\nf.pwd();  /* Returns: /src */\nf.phd();  /* Returns: C:\\Users\\user\\Projects\\MyProject */\n</code></pre>"}, {"location": "directory_navigation/#overview", "title": "Overview", "text": "<p>Grapa provides a dual-level directory navigation system that allows for flexible project management and navigation. This system consists of:</p> <ol> <li>Working Directory (<code>pwd()</code>/<code>cd()</code>) - Relative navigation within a project</li> <li>Home Directory (<code>phd()</code>/<code>chd()</code>) - Absolute navigation for project switching</li> </ol>"}, {"location": "directory_navigation/#key-concepts", "title": "Key Concepts", "text": ""}, {"location": "directory_navigation/#working-directory-relative-navigation", "title": "Working Directory (Relative Navigation)", "text": "<ul> <li>Purpose: Navigate within the current project context</li> <li>Scope: Relative to the current home directory</li> <li>Use Case: File and database operations within a project</li> <li>Returns: Relative path (e.g., <code>/lib</code>, <code>/docs/type</code>)</li> </ul>"}, {"location": "directory_navigation/#home-directory-absolute-navigation", "title": "Home Directory (Absolute Navigation)", "text": "<ul> <li>Purpose: Set the base directory for a project</li> <li>Scope: Absolute system path</li> <li>Use Case: Project switching and context management</li> <li>Returns: Absolute path (e.g., <code>C:\\Users\\user\\Documents\\Project</code>)</li> </ul>"}, {"location": "directory_navigation/#functions", "title": "Functions", "text": ""}, {"location": "directory_navigation/#pwd-print-working-directory", "title": "<code>pwd()</code> - Print Working Directory", "text": "<p>Returns the current working directory relative to the home directory.</p> <pre><code>f = $file();\nf.pwd()  // Returns: /\nf.cd(\"lib\");\nf.pwd()  // Returns: /lib\n</code></pre>"}, {"location": "directory_navigation/#cdname-change-working-directory", "title": "<code>cd([name])</code> - Change Working Directory", "text": "<p>Changes the current working directory within the home directory context.</p> <p>Parameters: - <code>name</code> (optional): Directory name or path   - <code>\"..\"</code>: Move up one level   - <code>\"/\"</code>: Move to root of current home directory   - <code>\"path\"</code>: Move to specific subdirectory</p> <pre><code>f.cd(\"lib\")      // Move to lib subdirectory\nf.cd(\"..\")       // Move up one level\nf.cd(\"/\")        // Move to root of home directory\nf.cd(\"/docs\")    // Move to docs subdirectory\n</code></pre>"}, {"location": "directory_navigation/#phd-print-home-directory", "title": "<code>phd()</code> - Print Home Directory", "text": "<p>Returns the current home directory (absolute path).</p> <pre><code>f.phd()  // Returns: C:\\Users\\matichuk\\Documents\\GitHub\\grapa\n</code></pre>"}, {"location": "directory_navigation/#chdfilesystempath-change-home-directory", "title": "<code>chd(filesystempath)</code> - Change Home Directory", "text": "<p>Changes the current home directory to a new absolute path.</p> <p>Parameters: - <code>filesystempath</code>: Absolute or relative path to set as new home directory</p> <p>Note: This resets the working directory to the root (<code>/</code>) of the new home directory.</p> <pre><code>f.chd(\"C:/Users/user/NewProject\")  // Change to absolute path\nf.chd(\"../sibling_project\")        // Change using relative path\n</code></pre>"}, {"location": "directory_navigation/#navigation-examples", "title": "Navigation Examples", "text": ""}, {"location": "directory_navigation/#basic-project-navigation", "title": "Basic Project Navigation", "text": "<pre><code>f = $file();\n\n// Set project home directory\nf.chd(\"C:/Users/user/Projects/MyProject\");\nf.phd()  // Returns: C:\\Users\\user\\Projects\\MyProject\nf.pwd()  // Returns: /\n\n// Navigate within project\nf.cd(\"database\");\nf.pwd()  // Returns: /database\n\nf.cd(\"users\");\nf.pwd()  // Returns: /database/users\n\nf.cd(\"..\");\nf.pwd()  // Returns: /database\n\nf.cd(\"/\");\nf.pwd()  // Returns: /\n</code></pre>"}, {"location": "directory_navigation/#project-switching", "title": "Project Switching", "text": "<pre><code>f = $file();\n\n// Work on first project\nf.chd(\"C:/Users/user/Projects/ProjectA\");\nf.cd(\"src\");\nf.pwd()  // Returns: /src\n\n// Switch to different project\nf.chd(\"C:/Users/user/Projects/ProjectB\");\nf.pwd()  // Returns: / (reset to root of new project)\nf.phd()  // Returns: C:\\Users\\user\\Projects\\ProjectB\n</code></pre>"}, {"location": "directory_navigation/#database-navigation", "title": "Database Navigation", "text": "<pre><code>f = $file();\n\n// Create and navigate database\nf.mk(\"my_database\", \"ROW\");\nf.cd(\"my_database\");\nf.pwd()  // Returns: /my_database\n\n// Create fields\nf.mkfield(\"id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"name\", \"STR\", \"VAR\");\n\n// Navigate within database\nf.cd(\"users\");\nf.pwd()  // Returns: /my_database/users\n</code></pre>"}, {"location": "directory_navigation/#comparison-table", "title": "Comparison Table", "text": "Function Purpose Scope Change Method Example Output <code>pwd()</code> Show current location Relative to home <code>cd()</code> <code>/lib/grapa</code> <code>phd()</code> Show base directory Absolute system <code>chd()</code> <code>C:\\Users\\user\\Documents\\Project</code>"}, {"location": "directory_navigation/#best-practices", "title": "Best Practices", "text": ""}, {"location": "directory_navigation/#1-project-organization", "title": "1. Project Organization", "text": "<pre><code>// Set project home directory\nf.chd(\"C:/Users/user/Projects/MyProject\");\n\n// Organize project structure\nf.mk(\"src\", \"GROUP\");\nf.mk(\"docs\", \"GROUP\");\nf.mk(\"data\", \"COL\");\nf.mk(\"config\", \"GROUP\");\n</code></pre>"}, {"location": "directory_navigation/#2-database-management", "title": "2. Database Management", "text": "<pre><code>// Create project database\nf.mk(\"project_db\", \"ROW\");\nf.cd(\"project_db\");\n\n// Define schema\nf.mkfield(\"id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"name\", \"STR\", \"VAR\");\nf.mkfield(\"created\", \"TIME\", \"FIX\", 8);\n</code></pre>"}, {"location": "directory_navigation/#3-file-system-operations", "title": "3. File System Operations", "text": "<pre><code>// Set project directory\nf.chd(\"C:/Users/user/Projects/MyProject\");\n\n// Create project files\nf.set(\"README.md\", \"# My Project\\n\\nProject description...\");\nf.set(\"config.json\", '{\"version\": \"1.0\", \"debug\": false}');\n\n// Navigate and list files\nf.cd(\"src\");\nfiles = f.ls();\n</code></pre>"}, {"location": "directory_navigation/#common-patterns", "title": "Common Patterns", "text": ""}, {"location": "directory_navigation/#development-workflow", "title": "Development Workflow", "text": "<ol> <li>Set Project Context: Use <code>chd()</code> to set project home directory</li> <li>Navigate Within Project: Use <code>cd()</code> for relative navigation</li> <li>Monitor Location: Use <code>pwd()</code> to see current position</li> <li>Switch Projects: Use <code>chd()</code> to change project context</li> </ol>"}, {"location": "directory_navigation/#database-workflow", "title": "Database Workflow", "text": "<ol> <li>Create Database: Use <code>mk()</code> with appropriate type</li> <li>Navigate Database: Use <code>cd()</code> to move within database structure</li> <li>Define Schema: Use <code>mkfield()</code> to create fields</li> <li>Manage Data: Use <code>set()</code>/<code>get()</code> for data operations</li> </ol>"}, {"location": "directory_navigation/#error-handling", "title": "Error Handling", "text": ""}, {"location": "directory_navigation/#common-issues", "title": "Common Issues", "text": "<pre><code>// Directory doesn't exist\nf.cd(\"nonexistent\")  // May return error\n\n// Invalid home directory\nf.chd(\"invalid/path\")  // May return error\n\n// Check current state\nf.pwd()  // Verify current working directory\nf.phd()  // Verify current home directory\n</code></pre>"}, {"location": "directory_navigation/#safe-navigation", "title": "Safe Navigation", "text": "<pre><code>// Check if directory exists before navigating\nfiles = f.ls();\nif (files.length &gt; 0) {\n    f.cd(\"subdirectory\");\n} else {\n    // Handle missing directory\n}\n</code></pre>"}, {"location": "directory_navigation/#using-info-for-safe-navigation", "title": "Using info() for Safe Navigation", "text": "<p>The <code>info</code> function returns metadata about a file or directory, such as its type (file, directory, database, etc.), size, and other attributes. This is useful for: - Checking if a directory exists before navigating - Determining if an entry is a file or directory - Making navigation and file operations more robust</p>"}, {"location": "directory_navigation/#example-check-before-navigating", "title": "Example: Check Before Navigating", "text": "<pre><code>f = $file();\ndir_info = f.info(\"my_subdir\");\nif (dir_info[\"$TYPE\"] == \"DIR\") {\n    f.cd(\"my_subdir\");\n};\n</code></pre>"}, {"location": "directory_navigation/#example-list-and-navigate-only-to-directories", "title": "Example: List and Navigate Only to Directories", "text": "<pre><code>f = $file();\nfiles = f.ls();\nfor (i = 0; i &lt; files.len(); i += 1;) {\n    entry = files[i];\n    entry_info = f.info(entry);\n    if (entry_info[\"$TYPE\"] == \"DIR\") {\n        f.cd(entry);\n        // Do something in the directory\n    };\n};\n</code></pre> <p>Using <code>info</code> helps prevent errors and makes your navigation scripts more robust.</p>"}, {"location": "directory_navigation/#integration-with-other-systems", "title": "Integration with Other Systems", "text": ""}, {"location": "directory_navigation/#file-system-integration", "title": "File System Integration", "text": "<ul> <li>Works with traditional file system directories</li> <li>Supports both Windows and Unix-style paths</li> <li>Handles path separators automatically</li> </ul>"}, {"location": "directory_navigation/#database-integration", "title": "Database Integration", "text": "<ul> <li>Supports GROUP, ROW, and COL database types</li> <li>Maintains navigation context within databases</li> <li>Allows hierarchical database structures</li> </ul>"}, {"location": "directory_navigation/#cross-platform-compatibility", "title": "Cross-Platform Compatibility", "text": "<ul> <li>Windows: Uses backslashes in display, forward slashes in code</li> <li>Unix/Linux: Uses forward slashes</li> <li>Automatic path normalization</li> </ul>"}, {"location": "directory_navigation/#summary", "title": "Summary", "text": "<p>The dual-level directory navigation system in Grapa provides:</p> <ol> <li>Flexibility: Easy project switching and context management</li> <li>Clarity: Clear separation between project context and internal navigation</li> <li>Efficiency: Relative navigation within projects, absolute navigation between projects</li> <li>Consistency: Unified interface for file system and database navigation</li> </ol> <p>This system enables efficient project management and database operations while maintaining clear navigation context. </p>"}, {"location": "directory_navigation/#related-topics", "title": "Related Topics", "text": "<ul> <li>Syntax Quick Reference</li> <li>System Functions</li> <li>Testing</li> <li>Examples </li> </ul>"}, {"location": "grc_scripts/", "title": "Writing and Running Grapa Scripts", "text": ""}, {"location": "grc_scripts/#syntax-reminders", "title": "Syntax Reminders", "text": "<ul> <li>Every statement and every block (including after closing braces) must end with a semicolon (<code>;</code>).</li> <li>Use block comments (<code>/* ... */</code>), not line comments (<code>// ...</code>).</li> <li>To append to arrays, use the <code>+=</code> operator (not <code>.push()</code> or <code>.append()</code>).</li> <li>See Syntax Quick Reference for more.</li> </ul>"}, {"location": "grc_scripts/#writing-grc-files", "title": "Writing .grc Files", "text": "<ul> <li>Use <code>.grc</code> files for Grapa scripts and tests.</li> <li>End every statement and block with a semicolon.</li> <li>Use block comments for documentation and explanations.</li> <li>Use <code>.echo()</code> for output.</li> <li>Use <code>while</code> loops (not <code>for</code>).</li> <li>Access arrays/lists with <code>[index]</code>, objects with <code>.get(\"key\")</code>.</li> <li>See Examples for idiomatic code patterns.</li> </ul>"}, {"location": "grc_scripts/#example-grc-file", "title": "Example .grc File", "text": "<pre><code>/* Example Grapa script */\ninput = \"Hello world\\nGoodbye world\\nHello again\";\nmatches = input.grep(\"Hello\");\nmatches.echo();\n</code></pre>"}, {"location": "grc_scripts/#running-grc-files", "title": "Running .grc Files", "text": "<ul> <li>Use the <code>-cfile</code> option to run a Grapa script file:</li> <li>Windows: <code>.\\grapa.exe -q -cfile \"my_script.grc\"</code></li> <li>Linux/Mac: <code>./grapa -q -cfile \"my_script.grc\"</code></li> <li>Use <code>-ccmd</code> for short, inline commands (not for files).</li> <li>Always use <code>-cfile</code> for multi-line scripts and tests.</li> </ul>"}, {"location": "grc_scripts/#creating-and-using-grz-files", "title": "Creating and Using .grz Files", "text": "<ul> <li><code>.grz</code> files are compiled Grapa scripts for faster execution.</li> <li>To create a <code>.grz</code> file, use the Grapa compiler or the <code>$sys().compile()</code> function:   <pre><code>compiled = $sys().compile(\"my_script.grc\");\n$file().set(\"my_script.grz\", compiled);\n</code></pre></li> <li>To run a <code>.grz</code> file:</li> <li>Windows: <code>.\\grapa.exe -q -cfile \"my_script.grz\"</code></li> <li>Linux/Mac: <code>./grapa -q -cfile \"my_script.grz\"</code></li> <li><code>.grz</code> files are portable and can be distributed for faster loading and execution.</li> <li>See GRZ Format Specification for technical details.</li> </ul>"}, {"location": "grc_scripts/#best-practices", "title": "Best Practices", "text": "<ul> <li>Validate your <code>.grc</code> scripts with known-good examples before running in production.</li> <li>Use <code>.grz</code> files for deployment or performance-critical scenarios.</li> <li>Use Testing to ensure your scripts behave as expected.</li> </ul>"}, {"location": "grc_scripts/#related-topics", "title": "Related Topics", "text": "<ul> <li>Syntax Quick Reference</li> <li>Examples</li> <li>Testing</li> <li>GRZ Format Specification </li> </ul>"}, {"location": "python_integration/", "title": "Python Integration with Grapa", "text": ""}, {"location": "python_integration/#overview", "title": "Overview", "text": "<p>Grapa provides powerful Python integration capabilities, offering a unified interface for file system operations, database management, and data processing. This integration combines Grapa's efficient storage systems with Python's rich ecosystem for data science, web development, and system administration.</p>"}, {"location": "python_integration/#key-benefits", "title": "Key Benefits", "text": ""}, {"location": "python_integration/#1-unified-file-system-and-database-access", "title": "1. Unified File System and Database Access", "text": "<p>Grapa provides a single API that seamlessly navigates between file systems and databases:</p> <pre><code>import grapa\n\nf = grapa.file()\n# Navigate from file system into database seamlessly\nf.cd(\"project_data\")  # Could be file system directory\nf.cd(\"users\")         # Could be database table\nf.cd(\"profile\")       # Could be nested database structure\n</code></pre> <p>Advantages: - Single API for both file system and database operations - Transparent navigation between different data sources - Consistent interface regardless of underlying storage</p>"}, {"location": "python_integration/#2-advanced-database-capabilities", "title": "2. Advanced Database Capabilities", "text": ""}, {"location": "python_integration/#column-store-for-analytics", "title": "Column Store for Analytics", "text": "<p>Optimized for analytical workloads and data science:</p> <pre><code># Python data science workflows with column store\nf = grapa.file()\nf.mk(\"analytics_db\", \"COL\")  # Column store for analytical queries\nf.cd(\"analytics_db\")\n\n# Define schema optimized for analytics\nf.mkfield(\"timestamp\", \"TIME\", \"FIX\", 8)\nf.mkfield(\"user_id\", \"INT\", \"FIX\", 4)\nf.mkfield(\"metric_value\", \"FLOAT\", \"FIX\", 8)\nf.mkfield(\"category\", \"STR\", \"VAR\")\n\n# Efficient column scans for aggregations\n# Python can process the results for statistical analysis\n</code></pre> <p>Benefits: - Native column store for analytical workloads - Better performance than row stores for aggregations - Memory efficient for large datasets</p>"}, {"location": "python_integration/#row-store-for-transactional-data", "title": "Row Store for Transactional Data", "text": "<p>Optimized for transactional workloads and frequent updates:</p> <pre><code># Transactional data with row store\nf.mk(\"user_sessions\", \"ROW\")\nf.cd(\"user_sessions\")\n\n# Fast point queries and updates\nf.set(\"session_123\", \"user_456\", \"user_id\")\nf.set(\"session_123\", \"2024-01-15\", \"login_time\")\nf.set(\"session_123\", \"active\", \"status\")\n</code></pre>"}, {"location": "python_integration/#3-file-processing-capabilities", "title": "3. File Processing Capabilities", "text": ""}, {"location": "python_integration/#large-file-management", "title": "Large File Management", "text": "<p>Built-in support for handling large files efficiently:</p> <pre><code># Python can orchestrate large file operations\nf = grapa.file()\n\n# Split large files for parallel processing\nresult = f.split(8, \"large_dataset.csv\", \"chunks\", \"\", \"csv\")\n# Python can then process each chunk in parallel\n\n# Get file metadata efficiently\nfile_info = f.info(\"large_file.txt\")\nif file_info[\"$TYPE\"] == \"FILE\" and file_info[\"$BYTES\"] &gt; 1000000:\n    # Handle large files appropriately\n    pass\n</code></pre>"}, {"location": "python_integration/#unified-path-system", "title": "Unified Path System", "text": "<p>Seamless navigation across complex data structures:</p> <pre><code># Navigate complex data structures\nf.chd(\"/project/data\")  # Set home directory\nf.cd(\"database\")        # Enter database\nf.cd(\"users\")           # Navigate to users table\nf.cd(\"..\")              # Go back up\nf.cd(\"../logs\")         # Navigate to logs directory\n</code></pre>"}, {"location": "python_integration/#use-cases", "title": "Use Cases", "text": ""}, {"location": "python_integration/#1-data-science-and-analytics", "title": "1. Data Science and Analytics", "text": ""}, {"location": "python_integration/#scientific-computing", "title": "Scientific Computing", "text": "<pre><code># Scientific computing with Grapa\nf = grapa.file()\nf.mk(\"experiment_data\", \"COL\")\nf.cd(\"experiment_data\")\n\n# Store experimental results efficiently\nfor experiment in experiments:\n    f.set(f\"exp_{experiment.id}\", experiment.timestamp, \"time\")\n    f.set(f\"exp_{experiment.id}\", experiment.results, \"data\")\n    f.set(f\"exp_{experiment.id}\", experiment.parameters, \"config\")\n\n# Fast column scans for statistical analysis\n</code></pre>"}, {"location": "python_integration/#machine-learning-workflows", "title": "Machine Learning Workflows", "text": "<pre><code># ML data management with Grapa\nf = grapa.file()\nf.mk(\"ml_dataset\", \"COL\")\nf.cd(\"ml_dataset\")\n\n# Store features and labels\nfor sample in training_data:\n    f.set(f\"sample_{sample.id}\", sample.features, \"features\")\n    f.set(f\"sample_{sample.id}\", sample.label, \"label\")\n    f.set(f\"sample_{sample.id}\", sample.metadata, \"meta\")\n\n# Efficient feature extraction for model training\n</code></pre>"}, {"location": "python_integration/#2-web-application-development", "title": "2. Web Application Development", "text": ""}, {"location": "python_integration/#backend-data-management", "title": "Backend Data Management", "text": "<pre><code># Web app with Grapa storage\nf = grapa.file()\nf.chd(\"/app/data\")\n\n# User management\nf.cd(\"users\")\nf.set(user_id, user_data, \"profile\")\nf.set(user_id, session_data, \"session\")\n\n# Content management\nf.cd(\"../content\")\nf.set(content_id, content_data, \"body\")\nf.set(content_id, metadata, \"meta\")\n</code></pre>"}, {"location": "python_integration/#api-development", "title": "API Development", "text": "<pre><code># FastAPI with Grapa backend\nfrom fastapi import FastAPI\nimport grapa\n\napp = FastAPI()\nf = grapa.file()\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: str):\n    f.cd(\"users\")\n    profile = f.get(user_id, \"profile\")\n    return {\"user_id\": user_id, \"profile\": profile}\n</code></pre>"}, {"location": "python_integration/#3-system-administration", "title": "3. System Administration", "text": ""}, {"location": "python_integration/#log-file-management", "title": "Log File Management", "text": "<pre><code># System admin tools with Grapa\nf = grapa.file()\n\n# Log file management\nf.cd(\"/var/log\")\nlog_files = f.ls()\nfor log_file in log_files:\n    info = f.info(log_file)\n    if info[\"$BYTES\"] &gt; 1000000:  # 1MB\n        # Split large log files\n        f.split(4, log_file, \"log_chunks\", \"\\n\", \"\")\n</code></pre>"}, {"location": "python_integration/#configuration-management", "title": "Configuration Management", "text": "<pre><code># Configuration management\nf.cd(\"/etc/configs\")\nconfigs = f.ls()\nfor config in configs:\n    content = f.get(config)\n    if validate_config(content):\n        deploy_config(config, content)\n</code></pre>"}, {"location": "python_integration/#4-data-pipeline-integration", "title": "4. Data Pipeline Integration", "text": ""}, {"location": "python_integration/#etl-workflows", "title": "ETL Workflows", "text": "<pre><code># Extract-Transform-Load with Grapa\nf = grapa.file()\n\n# Extract: Read from various sources\nf.cd(\"source_data\")\nraw_data = f.get(\"input.csv\")\n\n# Transform: Process in Python\nprocessed_data = python_transform_function(raw_data)\n\n# Load: Store in Grapa database\nf.cd(\"../processed_data\")\nf.set(\"processed_batch_001\", processed_data, \"content\")\n</code></pre>"}, {"location": "python_integration/#data-validation", "title": "Data Validation", "text": "<pre><code># Validate data before processing\nfiles = f.ls(\"input_directory\")\nfor file in files:\n    info = f.info(file)\n    if info[\"$TYPE\"] == \"FILE\":\n        content = f.get(file)\n        if validate_data_format(content):\n            # Process valid files\n            pass\n</code></pre>"}, {"location": "python_integration/#performance-advantages", "title": "Performance Advantages", "text": ""}, {"location": "python_integration/#memory-efficiency", "title": "Memory Efficiency", "text": "<ul> <li>Column store: Only loads relevant columns for analysis</li> <li>Fragmented storage: Efficient for sparse data</li> <li>Block-based I/O: Memory-efficient file operations</li> </ul>"}, {"location": "python_integration/#scalability", "title": "Scalability", "text": "<ul> <li>Large file handling: Built-in splitting and chunking</li> <li>Database optimization: Different storage types for different use cases</li> <li>Cross-platform: Consistent performance across systems</li> </ul>"}, {"location": "python_integration/#integration-with-python-ecosystem", "title": "Integration with Python Ecosystem", "text": ""}, {"location": "python_integration/#data-science-libraries", "title": "Data Science Libraries", "text": "<pre><code>import pandas as pd\nimport numpy as np\nimport grapa\n\n# Process Grapa data with pandas\nf = grapa.file()\nf.cd(\"analytics_data\")\n\n# Extract data for pandas processing\ndata = []\nfor record in f.ls():\n    row = {\n        'id': record,\n        'value': f.get(record, \"value\"),\n        'category': f.get(record, \"category\")\n    }\n    data.append(row)\n\ndf = pd.DataFrame(data)\n# Perform pandas operations\n</code></pre>"}, {"location": "python_integration/#machine-learning-frameworks", "title": "Machine Learning Frameworks", "text": "<pre><code>import sklearn\nimport grapa\n\n# Feature storage for ML\nf = grapa.file()\nf.mk(\"ml_features\", \"COL\")\nf.cd(\"ml_features\")\n\n# Store features efficiently\nfor sample_id, features in feature_data.items():\n    f.set(sample_id, features.tobytes(), \"features\")\n    f.set(sample_id, labels[sample_id], \"label\")\n</code></pre>"}, {"location": "python_integration/#web-frameworks", "title": "Web Frameworks", "text": "<pre><code># Django with Grapa\nfrom django.http import JsonResponse\nimport grapa\n\ndef user_profile(request, user_id):\n    f = grapa.file()\n    f.cd(\"users\")\n\n    profile = f.get(user_id, \"profile\")\n    return JsonResponse({\"profile\": profile})\n</code></pre>"}, {"location": "python_integration/#best-practices", "title": "Best Practices", "text": ""}, {"location": "python_integration/#database-design", "title": "Database Design", "text": "<ol> <li>Choose appropriate storage types:</li> <li>Use COL (column store) for analytical workloads</li> <li>Use ROW (row store) for transactional data</li> <li>Use FIX fields for small, frequently accessed data</li> <li> <p>Use VAR fields for variable-length data</p> </li> <li> <p>Optimize field types:</p> </li> <li>Match data types to storage needs</li> <li>Use appropriate field sizes</li> <li>Consider growth patterns</li> </ol>"}, {"location": "python_integration/#file-management", "title": "File Management", "text": "<ol> <li>Large file handling:</li> <li>Use <code>split()</code> for files larger than memory</li> <li>Process chunks in parallel</li> <li> <p>Monitor file sizes with <code>info()</code></p> </li> <li> <p>Path management:</p> </li> <li>Use <code>chd()</code> to set project home directories</li> <li>Use relative paths with <code>cd()</code> for navigation</li> <li>Leverage the unified path system</li> </ol>"}, {"location": "python_integration/#performance-optimization", "title": "Performance Optimization", "text": "<ol> <li>Memory management:</li> <li>Use column store for analytical queries</li> <li>Process data in chunks</li> <li> <p>Monitor memory usage</p> </li> <li> <p>I/O optimization:</p> </li> <li>Use appropriate storage types</li> <li>Batch operations when possible</li> <li>Leverage Grapa's efficient I/O</li> </ol>"}, {"location": "python_integration/#conclusion", "title": "Conclusion", "text": "<p>Grapa's Python integration provides a powerful combination of: - Unified data access across file systems and databases - Performance optimization through specialized storage types - Scalability for large datasets and complex workflows - Integration with Python's rich ecosystem</p> <p>This makes Grapa particularly valuable for Python applications that need to handle diverse data types, large datasets, or complex data workflows. The unified path system and efficient storage options provide significant advantages over traditional file system + database combinations. </p> <p>See Also: - GrapaPy Quickstart - Python-to-Grapa Migration Guide - Python Use Cases </p>"}, {"location": "unified_path_system/", "title": "Unified Path System in Grapa", "text": ""}, {"location": "unified_path_system/#overview", "title": "Overview", "text": "<p>Yes, it is absolutely possible to have a file path string that spans from the file system into a database and into a GROUP within that database. This is one of Grapa's most powerful features - a unified path system that seamlessly bridges traditional file systems and database structures.</p>"}, {"location": "unified_path_system/#how-it-works", "title": "How It Works", "text": "<p>Grapa's unified path system allows you to navigate through a single path that can traverse:</p> <ol> <li>File System Directories - Traditional folders and files</li> <li>Database Files - Grapa database files (GROUP, ROW, COL)</li> <li>Database Structures - Internal database hierarchies and GROUP structures</li> <li>Database Records - Individual records within databases</li> </ol>"}, {"location": "unified_path_system/#path-structure-examples", "title": "Path Structure Examples", "text": ""}, {"location": "unified_path_system/#example-1-file-system-database-group-row", "title": "Example 1: File System \u2192 Database \u2192 GROUP \u2192 ROW", "text": "<pre><code>File System: /my_database (GROUP database file)\n  \u2514\u2500\u2500 Database: /users (GROUP structure)\n      \u2514\u2500\u2500 GROUP: /admins (GROUP structure)\n          \u2514\u2500\u2500 ROW: /user_data (ROW database)\n              \u2514\u2500\u2500 Records: user1, user2, etc.\n</code></pre> <p>Path: <code>/my_database/users/admins/user_data</code></p>"}, {"location": "unified_path_system/#example-2-complex-nested-structure", "title": "Example 2: Complex Nested Structure", "text": "<pre><code>File System: /projects\n  \u2514\u2500\u2500 Database: /project_db (GROUP database file)\n      \u2514\u2500\u2500 GROUP: /departments\n          \u2514\u2500\u2500 GROUP: /engineering\n              \u2514\u2500\u2500 GROUP: /teams\n                  \u2514\u2500\u2500 ROW: /developers (ROW database)\n                      \u2514\u2500\u2500 Records: dev1, dev2, dev3\n                  \u2514\u2500\u2500 COL: /analytics (COL database)\n                      \u2514\u2500\u2500 Records: metrics1, metrics2\n</code></pre> <p>Paths: - <code>/projects/project_db/departments/engineering/teams/developers</code> - <code>/projects/project_db/departments/engineering/teams/analytics</code></p>"}, {"location": "unified_path_system/#implementation-details", "title": "Implementation Details", "text": ""}, {"location": "unified_path_system/#navigation-mechanism", "title": "Navigation Mechanism", "text": "<p>The unified path system works through Grapa's <code>DirectorySwitchSingle</code> function, which:</p> <ol> <li>Detects Path Type: Determines if the path component is a file system directory or database structure</li> <li>Handles Transitions: Seamlessly switches between file system and database contexts</li> <li>Maintains Context: Keeps track of current location across different storage types</li> <li>Supports Backtracking: Allows navigation back through the path using <code>..</code></li> </ol>"}, {"location": "unified_path_system/#parent-navigation-support", "title": "Parent Navigation Support", "text": "<p>The <code>\"..\"</code> parent directory notation is fully supported throughout the unified path system:</p> <ul> <li>File System: Works in traditional file system directories</li> <li>Database Structures: Works in GROUP, ROW, and COL database structures</li> <li>Mixed Paths: Works seamlessly across file system and database transitions</li> <li>Multiple Levels: Supports multiple <code>..</code> in a single path (e.g., <code>../../..</code>)</li> <li>Edge Cases: Handles edge cases gracefully (e.g., <code>..</code> at root stays at root)</li> </ul> <p>Examples: <pre><code>f = $file();\n\n/* File system navigation */\nf.cd(\"level1/level2/level3\");\nf.cd(\"..\");  /* Back to level2 */\n\n/* Database navigation */\nf.cd(\"database/group1/group2/data\");\nf.cd(\"..\");  /* Back to group2 */\n\n/* Mixed path navigation */\nf.cd(\"project/database/users\");\nf.cd(\"../../..\");  /* Back to project root */\n\n/* Multiple levels at once */\nf.cd(\"deep/nested/structure/with/many/levels\");\nf.cd(\"../../../../..\");  /* Back 5 levels */\n</code></pre></p>"}, {"location": "unified_path_system/#key-components", "title": "Key Components", "text": "<ul> <li><code>mDirectoryPath</code>: Tracks file system navigation</li> <li><code>mDatabasePath</code>: Tracks database navigation</li> <li><code>mDb</code>: Current database context</li> <li><code>mDirId</code>/<code>mDirType</code>: Current database location</li> </ul>"}, {"location": "unified_path_system/#practical-examples", "title": "Practical Examples", "text": ""}, {"location": "unified_path_system/#creating-a-unified-path-structure", "title": "Creating a Unified Path Structure", "text": "<pre><code>f = $file();\n\n/* Start in file system */\nf.pwd()  // Returns: /\n/* Returns: / */\n\n// Create database file in file system\nf.mk(\"my_database\", \"GROUP\");\nf.cd(\"my_database\");\nf.pwd()  // Returns: /my_database\n/* Returns: /my_database */\n\n// Create GROUP structure within database\nf.mk(\"users\", \"GROUP\");\nf.cd(\"users\");\nf.pwd()  // Returns: /my_database/users\n/* Returns: /my_database/users */\n\n// Create nested GROUP\nf.mk(\"admins\", \"GROUP\");\nf.cd(\"admins\");\nf.pwd()  // Returns: /my_database/users/admins\n/* Returns: /my_database/users/admins */\n\n// Create ROW database within GROUP\nf.mk(\"user_data\", \"ROW\");\nf.cd(\"user_data\");\nf.pwd()  // Returns: /my_database/users/admins/user_data\n/* Returns: /my_database/users/admins/user_data */\n\n// Add data to the ROW database\nf.mkfield(\"id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"name\", \"STR\", \"VAR\");\nf.set(\"user1\", 1001, \"id\");\nf.set(\"user1\", \"John Doe\", \"name\");\n</code></pre>"}, {"location": "unified_path_system/#direct-path-navigation", "title": "Direct Path Navigation", "text": "<pre><code>f = $file();\n\n/* Navigate directly to deep location */\nf.cd(\"my_database/users/admins/user_data\");\nf.pwd()  // Returns: /my_database/users/admins/user_data\n/* Returns: /my_database/users/admins/user_data */\n\n// Access data at deep location\nname = f.get(\"user1\", \"name\");\nname.echo();  // Outputs: John Doe\n/* Outputs: John Doe */\n</code></pre>"}, {"location": "unified_path_system/#navigation-back-through-path", "title": "Navigation Back Through Path", "text": "<pre><code>f = $file();\n\n/* Start at deep location */\nf.cd(\"my_database/users/admins/user_data\");\n\n/* Navigate back through path */\nf.cd(\"..\");  // Back to admins GROUP\nf.pwd()  // Returns: /my_database/users/admins\n/* Returns: /my_database/users/admins */\nf.cd(\"..\");  // Back to users GROUP\nf.pwd()  // Returns: /my_database/users\n/* Returns: /my_database/users */\nf.cd(\"..\");  // Back to database root\nf.pwd()  // Returns: /my_database\n/* Returns: /my_database */\nf.cd(\"..\");  // Back to file system\nf.pwd()  // Returns: /\n/* Returns: / */\n</code></pre>"}, {"location": "unified_path_system/#multiple-parent-navigation", "title": "Multiple Parent Navigation", "text": "<pre><code>f = $file();\n\n/* Navigate to deep location */\nf.cd(\"my_database/users/admins/user_data\");\n\n/* Go back multiple levels at once */\nf.cd(\"../../..\");  // Back to database root\nf.pwd()  // Returns: /my_database\n/* Returns: /my_database */\n\n/* Go back to file system */\nf.cd(\"..\");  // Back to file system\nf.pwd()  // Returns: /\n/* Returns: / */\n</code></pre>"}, {"location": "unified_path_system/#use-cases", "title": "Use Cases", "text": ""}, {"location": "unified_path_system/#1-project-organization", "title": "1. Project Organization", "text": "<pre><code>// Organize project with mixed file system and database\nf.mk(\"project\", \"GROUP\");\nf.cd(\"project\");\n\n/* File system components */\nf.mk(\"src\", \"DIR\");\nf.mk(\"docs\", \"DIR\");\n\n/* Database components */\nf.mk(\"data\", \"GROUP\");\nf.cd(\"data\");\nf.mk(\"users\", \"ROW\");\nf.mk(\"analytics\", \"COL\");\n</code></pre>"}, {"location": "unified_path_system/#2-application-data-management", "title": "2. Application Data Management", "text": "<pre><code>// Application with hierarchical data\nf.mk(\"app\", \"GROUP\");\nf.cd(\"app\");\n\n/* Configuration (file system) */\nf.set(\"config.json\", '{\"version\": \"1.0\"}');\n\n/* User data (database) */\nf.mk(\"users\", \"ROW\");\nf.cd(\"users\");\nf.mkfield(\"id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"profile\", \"TABLE\", \"VAR\");\n\n/* Analytics (database) */\nf.cd(\"..\");\nf.mk(\"analytics\", \"COL\");\nf.cd(\"analytics\");\nf.mkfield(\"timestamp\", \"TIME\", \"FIX\", 8);\nf.mkfield(\"metrics\", \"RAW\", \"VAR\");\n</code></pre>"}, {"location": "unified_path_system/#3-multi-tenant-applications", "title": "3. Multi-Tenant Applications", "text": "<pre><code>// Multi-tenant structure\nf.mk(\"tenants\", \"GROUP\");\nf.cd(\"tenants\");\n\n// Each tenant gets their own structure\nf.mk(\"tenant1\", \"GROUP\");\nf.cd(\"tenant1\");\nf.mk(\"users\", \"ROW\");\nf.mk(\"data\", \"COL\");\nf.mk(\"files\", \"GROUP\");\n\nf.cd(\"../tenant2\");\nf.mk(\"users\", \"ROW\");\nf.mk(\"data\", \"COL\");\n</code></pre>"}, {"location": "unified_path_system/#benefits", "title": "Benefits", "text": ""}, {"location": "unified_path_system/#1-unified-interface", "title": "1. Unified Interface", "text": "<ul> <li>Single navigation system for file system and database</li> <li>Consistent commands (<code>cd</code>, <code>ls</code>, <code>pwd</code>) across all contexts</li> <li>No need to learn separate APIs for different storage types</li> </ul>"}, {"location": "unified_path_system/#2-flexible-organization", "title": "2. Flexible Organization", "text": "<ul> <li>Mix file system and database storage as needed</li> <li>Create complex hierarchical structures</li> <li>Organize data based on access patterns, not storage constraints</li> </ul>"}, {"location": "unified_path_system/#3-seamless-transitions", "title": "3. Seamless Transitions", "text": "<ul> <li>Automatic detection of storage type</li> <li>Transparent switching between contexts</li> <li>Maintains navigation history</li> </ul>"}, {"location": "unified_path_system/#4-scalable-architecture", "title": "4. Scalable Architecture", "text": "<ul> <li>Start simple with file system</li> <li>Gradually migrate to database as needed</li> <li>No need to restructure existing code</li> </ul>"}, {"location": "unified_path_system/#technical-implementation", "title": "Technical Implementation", "text": ""}, {"location": "unified_path_system/#path-resolution-algorithm", "title": "Path Resolution Algorithm", "text": "<ol> <li>Parse Path: Split path into components</li> <li>Check File System: For each component, check if it exists in file system</li> <li>Check Database: If not in file system, check current database context</li> <li>Open Database: If component is a database file, open it and switch context</li> <li>Navigate Database: If in database context, navigate using database methods</li> <li>Update Context: Maintain current location across transitions</li> </ol>"}, {"location": "unified_path_system/#storage-type-detection", "title": "Storage Type Detection", "text": "<pre><code>// Simplified version of the logic\nif (mDb == NULL &amp;&amp; !mVar) {\n    // File system navigation\n    DirectoryPath(path);\n    // Check if path exists in file system\n} else {\n    // Database navigation\n    if (isFile) {\n        // Open new database file\n        mDb = gSystem-&gt;mGroupQueue.OpenFile(path, &amp;mFile, GrapaReadWrite);\n    } else {\n        // Navigate within current database\n        err = mDb-&gt;mValue.OpenGroup(mDirId, mDirType, pName, newDirId, newDirType, tableId);\n    }\n}\n</code></pre>"}, {"location": "unified_path_system/#best-practices", "title": "Best Practices", "text": ""}, {"location": "unified_path_system/#1-logical-organization", "title": "1. Logical Organization", "text": "<ul> <li>Use file system for static files (code, docs, configs)</li> <li>Use database for dynamic data (user records, analytics)</li> <li>Use GROUP for hierarchical organization</li> </ul>"}, {"location": "unified_path_system/#2-path-planning", "title": "2. Path Planning", "text": "<ul> <li>Design your path structure before implementation</li> <li>Consider access patterns and performance implications</li> <li>Keep related data close in the hierarchy</li> </ul>"}, {"location": "unified_path_system/#3-performance-considerations", "title": "3. Performance Considerations", "text": "<ul> <li>File system access is faster for simple operations</li> <li>Database access is better for complex queries</li> <li>Use appropriate database types (ROW vs COL) based on workload</li> </ul>"}, {"location": "unified_path_system/#4-backup-and-recovery", "title": "4. Backup and Recovery", "text": "<ul> <li>Database files can be backed up as single files</li> <li>File system components can use traditional backup methods</li> <li>Consider the entire path structure in backup strategies</li> </ul>"}, {"location": "unified_path_system/#limitations-and-considerations", "title": "Limitations and Considerations", "text": ""}, {"location": "unified_path_system/#1-path-length", "title": "1. Path Length", "text": "<ul> <li>Very deep paths may impact performance</li> <li>Consider flattening structures for frequently accessed data</li> </ul>"}, {"location": "unified_path_system/#2-cross-platform-compatibility", "title": "2. Cross-Platform Compatibility", "text": "<ul> <li>Path separators are handled automatically</li> <li>Database files are platform-independent</li> </ul>"}, {"location": "unified_path_system/#3-concurrent-access", "title": "3. Concurrent Access", "text": "<ul> <li>File system operations are subject to OS limitations</li> <li>Database operations use Grapa's concurrency controls</li> </ul>"}, {"location": "unified_path_system/#summary", "title": "Summary", "text": "<p>Grapa's unified path system provides a powerful way to organize and access data across different storage types. By allowing seamless navigation from file system into database and into GROUP structures, it enables flexible and scalable data organization without the complexity of managing multiple storage systems.</p> <p>This unified approach makes it possible to: - Start with simple file system organization - Gradually migrate to database storage as needs grow - Create complex hierarchical data structures - Maintain a single, consistent interface for all data access</p> <p>The system automatically handles the transitions between different storage types, making it transparent to the user while providing the benefits of both file system simplicity and database power. </p>"}, {"location": "database/column_store/", "title": "Column Store Database", "text": ""}, {"location": "database/column_store/#overview", "title": "Overview", "text": "<p>Column store databases in Grapa are optimized for analytical workloads and large datasets. Unlike row store databases that store data record-by-record, column stores organize data by columns, making them ideal for queries that access specific fields across many records.</p>"}, {"location": "database/column_store/#architecture", "title": "Architecture", "text": ""}, {"location": "database/column_store/#storage-model", "title": "Storage Model", "text": "<ul> <li>Fragmented Data Storage: Uses FREC_DATA for efficient handling of sparse data</li> <li>Column-Oriented: Each field is stored as a separate column</li> <li>Dynamic Growth: Columns can grow incrementally as new records are added</li> <li>Sparse Data Support: Only stores data where it actually exists</li> </ul>"}, {"location": "database/column_store/#key-components", "title": "Key Components", "text": "<ul> <li>CTABLE_TREE: The main tree structure for column store databases</li> <li>FREC_DATA: Fragmented data storage for fixed fields</li> <li>SDATA_TREE: Tree structure for variable fields</li> <li>Growth Parameters: Configurable growth sizes for efficient storage management</li> </ul>"}, {"location": "database/column_store/#use-cases", "title": "Use Cases", "text": ""}, {"location": "database/column_store/#ideal-for", "title": "Ideal For", "text": "<ul> <li>Analytical Queries: Aggregations, sums, averages across columns</li> <li>Data Warehousing: Large datasets with many columns</li> <li>Time-Series Data: Historical data analysis</li> <li>Sparse Data: Tables with many optional fields</li> <li>Column Scans: Queries that access specific fields across records</li> </ul>"}, {"location": "database/column_store/#not-ideal-for", "title": "Not Ideal For", "text": "<ul> <li>Frequent Record Updates: Row store is better for transactional workloads</li> <li>Point Queries: Individual record lookups</li> <li>Small Datasets: Overhead may not be justified</li> </ul>"}, {"location": "database/column_store/#performance-optimizations", "title": "Performance Optimizations", "text": ""}, {"location": "database/column_store/#storage-efficiency", "title": "Storage Efficiency", "text": "<ul> <li>Sparse Data Handling: Only allocates space for actual data</li> <li>Compression: Similar data types can be compressed efficiently</li> <li>Block-Level Access: Loads only relevant data blocks into memory</li> </ul>"}, {"location": "database/column_store/#query-performance", "title": "Query Performance", "text": "<ul> <li>Column Scans: Fast access to all values in a column</li> <li>Aggregations: Efficient computation of sums, averages, etc.</li> <li>Cache Locality: Better memory cache utilization for column-oriented access</li> </ul>"}, {"location": "database/column_store/#field-types-and-storage", "title": "Field Types and Storage", "text": ""}, {"location": "database/column_store/#fixed-fields-store_fix", "title": "Fixed Fields (STORE_FIX)", "text": "<ul> <li>Use FREC_DATA for fragmented storage</li> <li>Automatically set growth size to field size if not specified</li> <li>Efficient for small, frequently accessed fields</li> </ul>"}, {"location": "database/column_store/#variable-fields-store_var", "title": "Variable Fields (STORE_VAR)", "text": "<ul> <li>Use SDATA_TREE for tree-based storage</li> <li>Good for medium-sized variable data</li> <li>Supports efficient updates and deletions</li> </ul>"}, {"location": "database/column_store/#partitioned-fields-store_par", "title": "Partitioned Fields (STORE_PAR)", "text": "<ul> <li>Use FREC_DATA for large data requiring partial updates</li> <li>Ideal for very large data that needs incremental updates</li> <li>Used for COL store $TABLE types</li> </ul>"}, {"location": "database/column_store/#best-practices", "title": "Best Practices", "text": ""}, {"location": "database/column_store/#schema-design", "title": "Schema Design", "text": "<ul> <li>Choose appropriate field types and storage options</li> <li>Consider data sparsity when designing schemas</li> <li>Use fixed fields for small, frequently accessed data</li> </ul>"}, {"location": "database/column_store/#query-optimization", "title": "Query Optimization", "text": "<ul> <li>Design queries to access columns rather than individual records</li> <li>Use aggregations and column scans when possible</li> <li>Consider data distribution for optimal performance</li> </ul>"}, {"location": "database/column_store/#storage-management", "title": "Storage Management", "text": "<ul> <li>Monitor growth parameters for optimal storage efficiency</li> <li>Consider data compression for similar data types</li> <li>Plan for data growth and distribution patterns</li> </ul>"}, {"location": "database/column_store/#implementation-details", "title": "Implementation Details", "text": ""}, {"location": "database/column_store/#fragmented-data-storage-frec_data", "title": "Fragmented Data Storage (FREC_DATA)", "text": "<p>Column store fixed fields use fragmented data storage for several key reasons:</p> <ol> <li>Sparse Data Efficiency: Only creates data blocks when needed, avoiding wasted space for NULL values</li> <li>Dynamic Growth: Columns can grow incrementally without reallocating entire data structures</li> <li>Update Efficiency: Individual blocks can be updated without affecting the entire column</li> <li>Memory Efficiency: Only relevant blocks need to be loaded into memory for queries</li> </ol>"}, {"location": "database/column_store/#growth-parameter-management", "title": "Growth Parameter Management", "text": "<p>The system automatically sets growth parameters for optimal performance: - Fixed Fields: <code>storeGrow</code> defaults to <code>storeSize</code> if not specified - Variable Fields: Uses configurable growth sizes for tree-based storage - Dynamic Adjustment: Growth parameters can be tuned based on usage patterns</p>"}, {"location": "database/column_store/#performance-characteristics", "title": "Performance Characteristics", "text": ""}, {"location": "database/column_store/#storage-overhead", "title": "Storage Overhead", "text": "<ul> <li>Minimal for Sparse Data: Only stores actual data values</li> <li>Efficient for Dense Data: Good compression for similar data types</li> <li>Predictable Growth: Linear growth based on data volume</li> </ul>"}, {"location": "database/column_store/#query-performance_1", "title": "Query Performance", "text": "<ul> <li>Column Scans: O(n) where n is the number of records in the column</li> <li>Aggregations: Efficient computation across column values</li> <li>Point Queries: Requires accessing specific blocks, may be slower than row store</li> </ul>"}, {"location": "database/column_store/#memory-usage", "title": "Memory Usage", "text": "<ul> <li>Block-Level Loading: Only loads relevant data blocks</li> <li>Cache Efficiency: Better cache utilization for column-oriented access</li> <li>Compression: Reduced memory footprint for similar data</li> </ul>"}, {"location": "database/column_store/#comparison-with-row-store", "title": "Comparison with Row Store", "text": "Aspect Column Store Row Store Storage Pattern Column-oriented Row-oriented Best For Analytical queries Transactional workloads Sparse Data Very efficient Less efficient Point Queries Slower Faster Column Scans Very fast Slower Updates Block-level Record-level Compression Excellent Good"}, {"location": "database/column_store/#advanced-features", "title": "Advanced Features", "text": ""}, {"location": "database/column_store/#dynamic-schema-evolution", "title": "Dynamic Schema Evolution", "text": "<ul> <li>Add new columns without affecting existing data</li> <li>Remove columns with minimal overhead</li> <li>Modify column types with data migration support</li> </ul>"}, {"location": "database/column_store/#data-distribution", "title": "Data Distribution", "text": "<ul> <li>Efficient handling of skewed data distributions</li> <li>Support for partitioning strategies</li> <li>Automatic data rebalancing</li> </ul>"}, {"location": "database/column_store/#query-optimization_1", "title": "Query Optimization", "text": "<ul> <li>Column pruning for unused columns</li> <li>Predicate pushdown for early filtering</li> <li>Join optimization for column-oriented operations</li> </ul>"}, {"location": "database/column_store/#monitoring-and-maintenance", "title": "Monitoring and Maintenance", "text": ""}, {"location": "database/column_store/#performance-monitoring", "title": "Performance Monitoring", "text": "<ul> <li>Track column access patterns</li> <li>Monitor storage efficiency</li> <li>Analyze query performance</li> </ul>"}, {"location": "database/column_store/#storage-optimization", "title": "Storage Optimization", "text": "<ul> <li>Regular compression analysis</li> <li>Growth parameter tuning</li> <li>Data distribution optimization</li> </ul>"}, {"location": "database/column_store/#maintenance-tasks", "title": "Maintenance Tasks", "text": "<ul> <li>Block-level defragmentation</li> <li>Index maintenance</li> <li>Statistics updates</li> </ul>"}, {"location": "database/column_store/#future-enhancements", "title": "Future Enhancements", "text": ""}, {"location": "database/column_store/#planned-features", "title": "Planned Features", "text": "<ul> <li>Advanced compression algorithms</li> <li>Column-level indexing</li> <li>Materialized views</li> <li>Query result caching</li> </ul>"}, {"location": "database/column_store/#performance-improvements", "title": "Performance Improvements", "text": "<ul> <li>Vectorized query execution</li> <li>SIMD optimizations</li> <li>Parallel query processing</li> <li>Adaptive query optimization </li> </ul>"}, {"location": "database/quick_reference/", "title": "Database Quick Reference", "text": ""}, {"location": "database/quick_reference/#database-creation", "title": "Database Creation", "text": ""}, {"location": "database/quick_reference/#basic-database-types", "title": "Basic Database Types", "text": "<pre><code># Row Store (Transactional)\nf.mk(\"db_name\", \"ROW\")\n\n# Column Store (Analytical)\nf.mk(\"db_name\", \"COL\")\n\n# Group Database (Hierarchical)\nf.mk(\"db_name\", \"GROUP\")\n\n# Regular Directory\nf.mk(\"dir_name\", \"DIR\")\n</code></pre>"}, {"location": "database/quick_reference/#in-memory-database", "title": "In-Memory Database", "text": "<pre><code># Create in-memory table\nf = $file().table()\nf.type()  # Returns: $TABLE\n</code></pre>"}, {"location": "database/quick_reference/#field-creation", "title": "Field Creation", "text": ""}, {"location": "database/quick_reference/#field-types", "title": "Field Types", "text": "Type Description Example <code>BOOL</code> Boolean values <code>f.mkfield(\"active\", \"BOOL\", \"FIX\", 1)</code> <code>INT</code> Integer values <code>f.mkfield(\"age\", \"INT\", \"FIX\", 4)</code> <code>FLOAT</code> Floating point <code>f.mkfield(\"price\", \"FLOAT\", \"FIX\", 8)</code> <code>STR</code> String data <code>f.mkfield(\"name\", \"STR\", \"VAR\")</code> <code>TIME</code> Time values <code>f.mkfield(\"created\", \"TIME\", \"FIX\", 8)</code> <code>TABLE</code> Nested tables <code>f.mkfield(\"metadata\", \"TABLE\", \"VAR\")</code> <code>RAW</code> Binary data <code>f.mkfield(\"data\", \"RAW\", \"VAR\")</code>"}, {"location": "database/quick_reference/#storage-types", "title": "Storage Types", "text": "Type Description Use Case <code>FIX</code> Fixed size Small, frequently accessed fields <code>VAR</code> Variable size Medium-sized variable data <code>PAR</code> Partitioned Large data requiring partial updates"}, {"location": "database/quick_reference/#field-creation-examples", "title": "Field Creation Examples", "text": "<pre><code># Fixed field with size\nf.mkfield(\"id\", \"INT\", \"FIX\", 4)\n\n# Variable field\nf.mkfield(\"name\", \"STR\", \"VAR\")\n\n# Fixed field with custom growth\nf.mkfield(\"data\", \"FLOAT\", \"FIX\", 8, 16)\n</code></pre>"}, {"location": "database/quick_reference/#data-operations", "title": "Data Operations", "text": ""}, {"location": "database/quick_reference/#setting-data", "title": "Setting Data", "text": "<pre><code># Set field value\nf.set(\"record_id\", \"value\", \"field_name\")\n\n# Set multiple fields\nf.set(\"user1\", \"John Doe\", \"name\")\nf.set(\"user1\", 30, \"age\")\nf.set(\"user1\", 75000.50, \"salary\")\n</code></pre>"}, {"location": "database/quick_reference/#getting-data", "title": "Getting Data", "text": "<pre><code># Get field value\nvalue = f.get(\"record_id\", \"field_name\")\n\n# Get multiple fields\nname = f.get(\"user1\", \"name\")\nage = f.get(\"user1\", \"age\")\n</code></pre>"}, {"location": "database/quick_reference/#listing-records", "title": "Listing Records", "text": "<pre><code># List all records\nrecords = f.ls()\n\n# List specific directory\nfiles = f.ls(\"subdirectory\")\n</code></pre>"}, {"location": "database/quick_reference/#database-navigation", "title": "Database Navigation", "text": "<p>Grapa provides two-level directory navigation: working directory (relative) and home directory (absolute).</p>"}, {"location": "database/quick_reference/#directory-operations", "title": "Directory Operations", "text": "<pre><code># Working Directory (Relative Navigation)\nf.cd(\"database_name\")        # Change working directory\ncurrent = f.pwd()            # Get current working directory (relative)\nf.cd(\"..\")                   # Move up one level\nf.cd(\"/\")                    # Move to root of current home\n\n# Home Directory (Absolute Navigation)  \nhome = f.phd()               # Get current home directory (absolute)\nf.chd(\"/new/project/path\")   # Change home directory to new project\nf.chd(\"../sibling_project\")  # Change home directory using relative path\n</code></pre>"}, {"location": "database/quick_reference/#navigation-examples", "title": "Navigation Examples", "text": "<pre><code># Set project home directory\nf.chd(\"C:/Users/user/Projects/MyProject\")\nf.phd()  # Returns: C:\\Users\\user\\Projects\\MyProject\nf.pwd()  # Returns: /\n\n# Navigate within project\nf.cd(\"database\")\nf.pwd()  # Returns: /database\n\nf.cd(\"users\")\nf.pwd()  # Returns: /database/users\n\nf.cd(\"..\")\nf.pwd()  # Returns: /database\n\nf.cd(\"/\")\nf.pwd()  # Returns: /\n\n# Switch to different project\nf.chd(\"C:/Users/user/Projects/AnotherProject\")\nf.phd()  # Returns: C:\\Users\\user\\Projects\\AnotherProject\nf.pwd()  # Returns: /\n</code></pre>"}, {"location": "database/quick_reference/#database-information", "title": "Database Information", "text": "<pre><code># Get database type\ndb_type = f.type()\n\n# Debug database structure\nf.debug()\n\n# Get file info\ninfo = f.info(\"filename\")\n</code></pre>"}, {"location": "database/quick_reference/#file-and-directory-information", "title": "File and Directory Information", "text": "<pre><code># Get detailed file metadata\nfile_info = f.info(\"document.txt\")\n# Returns: {\"$TYPE\":\"FILE\",\"$BYTES\":1024}\n\n# Check if item exists and get type\ninfo = f.info(\"unknown.txt\")\nif (info[\"$TYPE\"] == \"FILE\") {\n    \"File exists with \" + info[\"$BYTES\"] + \" bytes\\n\".echo()\n} else if (info[\"$TYPE\"] == \"DIR\") {\n    \"Directory exists\\n\".echo()\n} else {\n    \"Item doesn't exist\\n\".echo()\n}\n\n# Batch file size calculation\nfiles = [\"file1.txt\", \"file2.txt\", \"file3.txt\"]\ntotal_size = 0\ni = 0\nwhile (i &lt; files.length()) {\n    info = f.info(files[i])\n    if (info[\"$TYPE\"] == \"FILE\") {\n        total_size = total_size + info[\"$BYTES\"]\n    }\n    i = i + 1\n}\n\"Total size: \" + total_size + \" bytes\\n\".echo()\n</code></pre>"}, {"location": "database/quick_reference/#file-splitting-operations", "title": "File Splitting Operations", "text": "<pre><code># Split large file into manageable parts\nresult = f.split(4, \"large_file.txt\", \"split_output\", \"\\n\", \"\")\n# Returns: [\"1.large_file.txt\",\"2.large_file.txt\",\"3.large_file.txt\",\"4.large_file.txt\"]\n\n# Split CSV file with header preservation\nresult = f.split(3, \"data.csv\", \"csv_parts\", \"\", \"csv\")\n# Each split file includes the original header\n\n# Split with custom delimiter\nresult = f.split(2, \"custom_data.txt\", \"output\", \"|\", \"\")\n# Splits on pipe character boundaries\n\n# Smart boundary detection\nresult = f.split(2, \"log_file.txt\", \"log_parts\", \"\\n\", \"start\")\n# Searches backwards for delimiter to avoid breaking content\n</code></pre> <p>Split Options: - Basic: Splits file into equal-sized parts - CSV: Preserves headers in each split file - Start: Searches backwards for delimiter to maintain logical boundaries - Custom Delimiters: Use any character or string as split boundary</p>"}, {"location": "database/quick_reference/#performance-guidelines", "title": "Performance Guidelines", "text": ""}, {"location": "database/quick_reference/#row-store-best-practices", "title": "Row Store Best Practices", "text": "<ul> <li>Use for transactional workloads</li> <li>Frequent record updates</li> <li>Point queries on specific records</li> <li>Small to medium datasets</li> </ul>"}, {"location": "database/quick_reference/#column-store-best-practices", "title": "Column Store Best Practices", "text": "<ul> <li>Use for analytical workloads</li> <li>Column scans and aggregations</li> <li>Large datasets with many columns</li> <li>Sparse data (many NULL values)</li> </ul>"}, {"location": "database/quick_reference/#storage-type-selection", "title": "Storage Type Selection", "text": "<ul> <li>FIX: Small, frequently accessed fields</li> <li>VAR: Medium-sized variable data</li> <li>PAR: Large data requiring partial updates</li> </ul>"}, {"location": "database/quick_reference/#common-patterns", "title": "Common Patterns", "text": ""}, {"location": "database/quick_reference/#row-store-pattern-transactional", "title": "Row Store Pattern (Transactional)", "text": "<pre><code># Create row store database\nf.mk(\"orders\", \"ROW\")\nf.cd(\"orders\")\n\n# Define schema\nf.mkfield(\"order_id\", \"INT\", \"FIX\", 4)\nf.mkfield(\"customer_id\", \"INT\", \"FIX\", 4)\nf.mkfield(\"amount\", \"FLOAT\", \"FIX\", 8)\nf.mkfield(\"status\", \"STR\", \"VAR\")\n\n# Add records\nf.set(\"order_001\", 1001, \"customer_id\")\nf.set(\"order_001\", 299.99, \"amount\")\nf.set(\"order_001\", \"pending\", \"status\")\n</code></pre>"}, {"location": "database/quick_reference/#column-store-pattern-analytical", "title": "Column Store Pattern (Analytical)", "text": "<pre><code># Create column store database\nf.mk(\"sales_analytics\", \"COL\")\nf.cd(\"sales_analytics\")\n\n# Define schema\nf.mkfield(\"date\", \"TIME\", \"FIX\", 8)\nf.mkfield(\"product_id\", \"INT\", \"FIX\", 4)\nf.mkfield(\"region\", \"STR\", \"VAR\")\nf.mkfield(\"sales_amount\", \"FLOAT\", \"FIX\", 8)\n\n# Add data\nf.set(\"sale_001\", 1640995200, \"date\")\nf.set(\"sale_001\", 1001, \"product_id\")\nf.set(\"sale_001\", \"North\", \"region\")\nf.set(\"sale_001\", 299.99, \"sales_amount\")\n</code></pre>"}, {"location": "database/quick_reference/#error-handling", "title": "Error Handling", "text": ""}, {"location": "database/quick_reference/#common-error-patterns", "title": "Common Error Patterns", "text": "<pre><code># Check for errors\nresult = f.get(\"nonexistent\")\nif (result.error) {\n    # Handle error\n}\n\n# Safe field creation\ntry {\n    f.mkfield(\"test\", \"INT\", \"FIX\", 4)\n} catch {\n    # Handle field creation error\n}\n</code></pre>"}, {"location": "database/quick_reference/#debug-information", "title": "Debug Information", "text": "<pre><code># Get detailed database information\nf.debug()\n\n# Check database structure\nf.ls()\n\n# Verify field creation\nf.info(\"field_name\")\n</code></pre>"}, {"location": "database/quick_reference/#performance-tips", "title": "Performance Tips", "text": ""}, {"location": "database/quick_reference/#optimization-strategies", "title": "Optimization Strategies", "text": "<ol> <li>Choose Right Database Type: Row vs Column based on workload</li> <li>Use Appropriate Field Types: Match data types to storage needs</li> <li>Optimize Storage Types: FIX for small data, VAR for variable data</li> <li>Monitor Performance: Use debug() function regularly</li> <li>Plan for Growth: Consider data growth patterns</li> </ol>"}, {"location": "database/quick_reference/#memory-management", "title": "Memory Management", "text": "<ul> <li>Column store: Only loads relevant blocks</li> <li>Row store: Loads complete records</li> <li>Use appropriate storage types for memory efficiency</li> </ul>"}, {"location": "database/quick_reference/#storage-efficiency", "title": "Storage Efficiency", "text": "<ul> <li>Fixed fields: Predictable storage requirements</li> <li>Variable fields: Flexible but with overhead</li> <li>Partitioned fields: Efficient for large data updates </li> </ul>"}, {"location": "database/quick_reference/#python-integration", "title": "Python Integration", "text": "<p>For Python developers working with Grapa databases, see the Python Integration Guide for comprehensive examples of: - Data science workflows with column store databases - Web application development with row store databases - System administration and data pipeline integration - Integration with pandas, NumPy, and machine learning frameworks </p>"}, {"location": "database/troubleshooting/", "title": "Database Troubleshooting Guide", "text": ""}, {"location": "database/troubleshooting/#common-issues-and-solutions", "title": "Common Issues and Solutions", "text": ""}, {"location": "database/troubleshooting/#column-store-performance-issues", "title": "Column Store Performance Issues", "text": ""}, {"location": "database/troubleshooting/#issue-slow-performance-on-small-datasets", "title": "Issue: Slow Performance on Small Datasets", "text": "<p>Symptoms: Column store operations are slower than expected for small datasets Cause: Column store overhead is not justified for small datasets Solution:  - Use row store (<code>\"ROW\"</code>) for small, transactional datasets - Reserve column store for analytical workloads with large datasets</p>"}, {"location": "database/troubleshooting/#issue-infinite-loops-during-data-setting", "title": "Issue: Infinite Loops During Data Setting", "text": "<p>Symptoms: Database operations hang or crash during field creation or data setting Cause: Growth parameters not properly set, causing fragmented data handling issues Solution: - Ensure <code>storeGrow</code> parameter is specified for fixed fields - The system automatically sets <code>storeGrow = storeSize</code> if not specified - Check field creation parameters</p>"}, {"location": "database/troubleshooting/#issue-fragmented-data-storage-errors", "title": "Issue: Fragmented Data Storage Errors", "text": "<p>Symptoms: Crashes or errors when working with column store fixed fields Cause: FREC_DATA storage issues due to improper initialization Solution: - Verify field creation parameters are correct - Use appropriate storage types for your data - Check debug output for specific error messages</p>"}, {"location": "database/troubleshooting/#field-creation-issues", "title": "Field Creation Issues", "text": ""}, {"location": "database/troubleshooting/#issue-fields-not-created-properly", "title": "Issue: Fields Not Created Properly", "text": "<p>Symptoms: Fields appear to be created but don't work as expected Cause: Incorrect field type or storage parameters Solution: - Verify field type is supported (<code>BOOL</code>, <code>INT</code>, <code>FLOAT</code>, <code>STR</code>, <code>TIME</code>, <code>TABLE</code>, <code>RAW</code>) - Check storage type is appropriate (<code>FIX</code>, <code>VAR</code>, <code>PAR</code>) - Ensure size parameters are reasonable</p>"}, {"location": "database/troubleshooting/#issue-storage-type-mismatch", "title": "Issue: Storage Type Mismatch", "text": "<p>Symptoms: Data not stored or retrieved correctly Cause: Storage type not suitable for the data being stored Solution: - Use <code>FIX</code> for small, fixed-size data - Use <code>VAR</code> for variable-length data - Use <code>PAR</code> for large data requiring partial updates</p>"}, {"location": "database/troubleshooting/#database-type-selection", "title": "Database Type Selection", "text": ""}, {"location": "database/troubleshooting/#issue-wrong-database-type-for-use-case", "title": "Issue: Wrong Database Type for Use Case", "text": "<p>Symptoms: Poor performance for intended workload Cause: Database type not optimized for the access pattern Solution:</p> <p>Choose Row Store When: - Frequent record updates - Point queries on specific records - Small to medium datasets - Transactional workloads</p> <p>Choose Column Store When: - Analytical queries and aggregations - Column scans across many records - Large datasets with many columns - Sparse data (many NULL values)</p>"}, {"location": "database/troubleshooting/#storage-efficiency-issues", "title": "Storage Efficiency Issues", "text": ""}, {"location": "database/troubleshooting/#issue-high-storage-overhead", "title": "Issue: High Storage Overhead", "text": "<p>Symptoms: Database uses more storage than expected Cause: Inefficient storage type or growth parameters Solution: - Use appropriate storage types for your data - Monitor growth parameters - Consider data compression for similar data types</p>"}, {"location": "database/troubleshooting/#issue-poor-query-performance", "title": "Issue: Poor Query Performance", "text": "<p>Symptoms: Queries are slower than expected Cause: Access pattern not optimized for database type Solution: - Design queries for the database type (row vs column oriented) - Use appropriate field types and storage options - Consider indexing strategies</p>"}, {"location": "database/troubleshooting/#debug-information", "title": "Debug Information", "text": ""}, {"location": "database/troubleshooting/#using-the-debug-function", "title": "Using the Debug Function", "text": "<p>The <code>debug()</code> function provides detailed information about database structure:</p> <pre><code>f.debug()\n</code></pre> <p>Information Provided: - Database type and structure - Field definitions and storage types - Data distribution and storage efficiency - Tree structure details</p>"}, {"location": "database/troubleshooting/#common-debug-output-analysis", "title": "Common Debug Output Analysis", "text": ""}, {"location": "database/troubleshooting/#column-store-debug-output", "title": "Column Store Debug Output", "text": "<p>Look for: - <code>CTABLE_TREE</code> - Confirms column store database - <code>FREC_DATA</code> - Fragmented data storage for fixed fields - <code>SDATA_TREE</code> - Tree storage for variable fields - Growth parameters and storage efficiency</p>"}, {"location": "database/troubleshooting/#row-store-debug-output", "title": "Row Store Debug Output", "text": "<p>Look for: - <code>RTABLE_TREE</code> - Confirms row store database - <code>BYTE_DATA</code> - Contiguous storage for fixed fields - Field offsets and sizes - Record structure information</p>"}, {"location": "database/troubleshooting/#performance-optimization", "title": "Performance Optimization", "text": ""}, {"location": "database/troubleshooting/#column-store-optimization", "title": "Column Store Optimization", "text": ""}, {"location": "database/troubleshooting/#schema-design", "title": "Schema Design", "text": "<ul> <li>Use fixed fields for small, frequently accessed data</li> <li>Consider data sparsity when designing schemas</li> <li>Choose appropriate storage types</li> </ul>"}, {"location": "database/troubleshooting/#query-design", "title": "Query Design", "text": "<ul> <li>Design for column-oriented access patterns</li> <li>Use aggregations and column scans when possible</li> <li>Avoid frequent point queries</li> </ul>"}, {"location": "database/troubleshooting/#storage-management", "title": "Storage Management", "text": "<ul> <li>Monitor growth parameters</li> <li>Consider data compression</li> <li>Plan for data growth patterns</li> </ul>"}, {"location": "database/troubleshooting/#row-store-optimization", "title": "Row Store Optimization", "text": ""}, {"location": "database/troubleshooting/#schema-design_1", "title": "Schema Design", "text": "<ul> <li>Group related fields together</li> <li>Use fixed fields for primary keys</li> <li>Consider record size for optimal performance</li> </ul>"}, {"location": "database/troubleshooting/#query-design_1", "title": "Query Design", "text": "<ul> <li>Design for record-based access patterns</li> <li>Use point queries efficiently</li> <li>Minimize column scans</li> </ul>"}, {"location": "database/troubleshooting/#error-messages-and-solutions", "title": "Error Messages and Solutions", "text": ""}, {"location": "database/troubleshooting/#common-error-codes", "title": "Common Error Codes", "text": ""}, {"location": "database/troubleshooting/#error-1-general-failure", "title": "Error -1: General Failure", "text": "<p>Possible Causes: - Invalid parameters - Insufficient resources - File system issues</p> <p>Solutions: - Check parameter validity - Verify file system permissions - Ensure sufficient disk space</p>"}, {"location": "database/troubleshooting/#error-2-not-found", "title": "Error -2: Not Found", "text": "<p>Possible Causes: - File or field doesn't exist - Incorrect path or name</p> <p>Solutions: - Verify file/field exists - Check path and naming - Use <code>ls()</code> to verify contents</p>"}, {"location": "database/troubleshooting/#specific-error-scenarios", "title": "Specific Error Scenarios", "text": ""}, {"location": "database/troubleshooting/#field-creation-errors", "title": "Field Creation Errors", "text": "<pre><code># Error: Field not created\nf.mkfield(\"test\", \"INVALID_TYPE\")\n# Solution: Use valid field type\nf.mkfield(\"test\", \"STR\", \"VAR\")\n</code></pre>"}, {"location": "database/troubleshooting/#database-type-errors", "title": "Database Type Errors", "text": "<pre><code># Error: Wrong database type for workload\nf.mk(\"small_db\", \"COL\")  # Column store for small dataset\n# Solution: Use row store for small datasets\nf.mk(\"small_db\", \"ROW\")\n</code></pre>"}, {"location": "database/troubleshooting/#storage-parameter-errors", "title": "Storage Parameter Errors", "text": "<pre><code># Error: Missing size parameter for fixed field\nf.mkfield(\"age\", \"INT\", \"FIX\")  # Missing size\n# Solution: Specify size for fixed fields\nf.mkfield(\"age\", \"INT\", \"FIX\", 4)\n</code></pre>"}, {"location": "database/troubleshooting/#best-practices-summary", "title": "Best Practices Summary", "text": ""}, {"location": "database/troubleshooting/#database-selection", "title": "Database Selection", "text": "<ol> <li>Row Store: Transactional workloads, small datasets, frequent updates</li> <li>Column Store: Analytical workloads, large datasets, sparse data</li> </ol>"}, {"location": "database/troubleshooting/#field-design", "title": "Field Design", "text": "<ol> <li>Fixed Fields: Small, frequently accessed data</li> <li>Variable Fields: Medium-sized variable data</li> <li>Partitioned Fields: Large data requiring partial updates</li> </ol>"}, {"location": "database/troubleshooting/#performance-monitoring", "title": "Performance Monitoring", "text": "<ol> <li>Use <code>debug()</code> function regularly</li> <li>Monitor storage efficiency</li> <li>Track query performance patterns</li> <li>Adjust parameters based on usage</li> </ol>"}, {"location": "database/troubleshooting/#maintenance", "title": "Maintenance", "text": "<ol> <li>Regular performance analysis</li> <li>Storage optimization</li> <li>Schema evolution planning</li> <li>Backup and recovery procedures </li> </ol>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/", "title": "Go-to-Grapa Migration Guide", "text": "<p>Important: Access Patterns for .get() and Indexing (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation $ARRAY \u2717 \u2717 \u2713 \u2014 $LIST \u2717 \u2717 \u2713 \u2713 $file \u2713 \u2717 \u2014 \u2014 $TABLE \u2713* \u2717 \u2014 \u2014 $OBJ \u2717 \u2717 \u2717 \u2713 *$TABLE .get() requires two arguments: key and field. <ul> <li>For $LIST and $OBJ, use bracket or dot notation (e.g., obj[\"key\"], obj.key, obj[2]).</li> <li>For $ARRAY, use bracket notation (e.g., arr[1]).</li> <li>Only $file and $TABLE support .get().</li> <li>This is based on direct testing in Grapa v0.0.39.</li> </ul> <p>This guide helps Go users transition to Grapa by mapping common Go idioms, patterns, and code to their Grapa equivalents.</p> <p>See Also: - Basic Syntax Guide - Operator Reference</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#syntax-mapping-table", "title": "Syntax Mapping Table", "text": "Go Grapa <code>var x int = 5</code> <code>x = 5;</code> <code>x += 1</code> <code>x += 1;</code> <code>var s string = \"hi\"</code> <code>s = \"hi\";</code> <code>s += \"!\"</code> <code>s += \"!\";</code> <code>arr := []int{1,2,3}</code> <code>arr = [1, 2, 3];</code> <code>arr[0]</code> <code>arr[0]</code><code>arr.get(0)</code> <code>m := map[string]int{}</code> <code>obj = {}</code> <code>m[\"key\"]</code> <code>obj[\"key\"]</code><code>obj.key</code><code>obj.\"key\"</code> <code>for i := 0; i &lt; len(arr); i++ { ... }</code> <code>i = 0; while (i &lt; arr.len()) { ...; i += 1; }</code><code>arr.map(op(x) { ... })</code><code>(n).range(0,1).map(op(i) { ... })</code> <code>if cond { ... } else { ... }</code> <code>if (cond) { ... } else { ... }</code> <code>func f(x int) int { ... }</code> <code>f = op(x) { ... };</code> <code>/* comment */</code> (block only, own line) <code>/* comment */</code> (block only, own line) <code>nil</code> <code>null</code> <code>len(arr)</code> <code>arr.len()</code> <code>append(arr, x)</code> <code>arr += x;</code> <code>arr = arr[1:]</code> <code>arr = arr.range(1, arr.len());</code> <code>arr = arr[:n]</code> <code>arr = arr.range(0, n);</code> <code>arr = arr[1:n]</code> <code>arr = arr.range(1, n);</code> <code>arr = arr[:0]</code> <code>arr = [];</code> <code>arr = make([]int, n)</code> <code>arr = (n).range(0,1);</code> <code>range arr</code> <code>arr.map(op(x) { ... })</code> <code>range m</code> <code>obj.map(op(k, v) { ... })</code> <code>err != nil</code> <code>result.type() == $ERR</code> <code>defer</code> <code>// not directly supported</code> <p>Note: Both <code>x = x + 1;</code> and <code>x += 1;</code> (and <code>s = s + \"x\";</code> and <code>s += \"x\";</code>) are valid in Grapa. The <code>+=</code> form is idiomatic and preferred in most cases.</p> <p>Note: <code>.get(\"key\")</code> is only for <code>$file</code> and <code>$TABLE</code>. For <code>$LIST</code>/<code>$OBJ</code>, use <code>obj[\"key\"]</code>, <code>obj.key</code>, or <code>obj.\"key\"</code>. For <code>$ARRAY</code>, use <code>arr[index]</code> or <code>arr.get(index)</code>.</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#access-patterns-objects-lists-arrays-files-and-tables", "title": "Access Patterns: Objects, Lists, Arrays, Files, and Tables", "text": "<p>Below are all valid ways to access elements in Grapa data structures. See the canonical Basic Syntax Guide for the latest tested rules.</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#list-and-obj", "title": "$LIST and $OBJ", "text": "<pre><code>obj = {\"a\": 1, \"b\": 2, \"c\": 3};\n\nvalue = obj[\"b\"];      /* Returns 2 */\nvalue = obj.key;        /* Returns value for key 'key' if present */\nvalue = obj.\"b\";       /* Returns 2 */\n\n/* $LIST only: */\nvalue = obj[1];         /* Returns 2 (by index) */\nname = obj.getname(1);  /* Returns \"b\" (key name at index 1) */\n</code></pre> <ul> <li>Dot notation (<code>obj.key</code>) and bracket notation (<code>obj[\"key\"]</code>) are both valid for $LIST/$OBJ.</li> <li><code>.get()</code> is NOT valid for $LIST/$OBJ.</li> </ul>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#array", "title": "$ARRAY", "text": "<pre><code>arr = [10, 20, 30];\n\nvalue = arr[1];         /* Returns 20 */\nvalue = arr.get(1);     /* Returns 20 */\n</code></pre> <ul> <li>Use bracket notation or <code>.get(index)</code> for $ARRAY.</li> <li>Dot notation and <code>.get(\"key\")</code> are NOT valid for $ARRAY.</li> </ul>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#file", "title": "$file", "text": "<pre><code>files = $file().ls();\nfile_info = files.get(0);   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(index)</code> for $file results.</li> <li>Bracket and dot notation are NOT valid for $file.</li> </ul>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#table", "title": "$TABLE", "text": "<pre><code>table = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"user1\", \"Alice\", \"name\");\n\nvalue = table.get(\"user1\", \"name\");   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(key, field)</code> for $TABLE.</li> <li>Bracket and dot notation are NOT valid for $TABLE.</li> </ul> <p>Reference Table: | Type      | .get(\"key\") | .get(index) | Bracket Notation | Dot Notation | |-----------|:-----------:|:-----------:|:----------------:|:------------:| | $ARRAY    |      \u2717      |     \u2717      |       \u2713         |      \u2014       | | $LIST     |      \u2717      |     \u2717      |       \u2713         |     \u2713       | | $file     |      \u2713      |     \u2717      |        \u2014         |      \u2014       | | $TABLE    |     \u2713      |     \u2717      |        \u2014         |      \u2014       | | $OBJ      |      \u2717      |     \u2717      |       \u2717         |     \u2713       | $TABLE .get() requires two arguments: key and field.</p> <p>See Basic Syntax Guide for empirical test results and future updates.</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#common-pitfalls", "title": "Common Pitfalls", "text": "<ul> <li>No <code>for</code>/<code>range</code> loops\u2014use <code>while</code> or <code>.range()</code>+functional methods</li> <li>No <code>.push()</code>/<code>.append()</code>\u2014use <code>+=</code> for append</li> <li>No <code>/* comment */</code> comments\u2014only block comments (<code>/* ... */</code>), always on their own line</li> <li>No implicit truthy/falsy\u2014use explicit boolean checks</li> <li>All statements and blocks must end with a semicolon (<code>;</code>)</li> <li>Use <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> as methods, not global functions</li> <li>Use <code>.range()</code> for sequence generation instead of manual while loops</li> <li>Use <code>.range()</code> with <code>.reduce()</code> for for-loop-like accumulation or collection tasks</li> <li>Use <code>.range().map()</code> and <code>.range().filter()</code> for parallel sequence generation and filtering. For large arrays, always specify a thread count to avoid too many threads</li> <li>Use <code>.iferr()</code> for simple error fallback; use <code>if (result.type() == $ERR)</code> only for explicit error handling</li> </ul>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#example-code-pairs", "title": "Example Code Pairs", "text": "<p>Go: <pre><code>// Sum squares of even numbers\nresult := 0\nfor _, x := range arr {\n    if x%2 == 0 {\n        result += x * x\n    }\n}\n</code></pre> Grapa: <pre><code>result = arr.filter(op(x) { x % 2 == 0; }).map(op(x) { x * x; }).reduce(op(a, b) { a + b; }, 0);\n</code></pre></p> <p>Go: <pre><code>// Read file lines\nlines, _ := ioutil.ReadFile(\"file.txt\")\nlineArr := strings.Split(string(lines), \"\\n\")\n</code></pre> Grapa: <pre><code>lines = $file().read(\"file.txt\").split(\"\\n\");\n</code></pre></p> <p>Go: <pre><code>// Map access\nvalue := m[\"key\"]\n</code></pre> Grapa: <pre><code>value = obj[\"key\"];\nvalue = obj.key;\nvalue = obj.\"key\";\n</code></pre></p> <p>Go: <pre><code>// File access (custom struct or map)\nvalue := file[\"key\"]\n</code></pre> Grapa: <pre><code>value = file.get(\"key\");\n</code></pre></p> <p>Go: <pre><code>// Generate numbers 0..9\nseq := make([]int, 10)\nfor i := range seq {\n    seq[i] = i\n}\n</code></pre> Grapa: <pre><code>seq = (10).range(0,1);\n</code></pre></p> <p>Go: <pre><code>// Sum numbers 0..9\nsum := 0\nfor i := 0; i &lt; 10; i++ {\n    sum += i\n}\n</code></pre> Grapa: <pre><code>sum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);\n</code></pre></p> <p>Go: <pre><code>// Collect even numbers 0..9\nevens := []int{}\nfor i := 0; i &lt; 10; i++ {\n    if i%2 == 0 {\n        evens = append(evens, i)\n    }\n}\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).filter(op(x) { x % 2 == 0; });\n</code></pre></p> <p>Go: <pre><code>// Error fallback\nresult, err := someOperation()\nif err != nil {\n    result = 0\n}\n</code></pre> Grapa: <pre><code>result = someOperation().iferr(0);\n</code></pre></p> <p>Warning: <code>.map()</code> and <code>.filter()</code> are parallel by default. For large arrays, specify a thread count: <pre><code>big = (1000000).range(0,1).map(op(x) { x * x; }, 8);  // Limit to 8 threads\n</code></pre></p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#see-also", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more Go idioms you want mapped to Grapa, please open an issue or PR! </p> <p>Clarification on .get() Usage: - <code>.get()</code> is required for <code>$file</code> and <code>$TABLE</code> access. - <code>.get()</code> is not supported for <code>$ARRAY</code>, <code>$LIST</code>, or <code>$OBJ</code> as of this writing. - Use bracket and dot notation for <code>$ARRAY</code>, <code>$LIST</code>, and <code>$OBJ</code>. - Only <code>while</code> loops and <code>.range()</code>+functional methods are valid for iteration in Grapa. <code>for</code> loops are not supported. - If more objects support <code>.get()</code> in the future, this guide will be updated.</p> <p>Comment Style: - Only block comments (<code>/* ... */</code>) are supported in Grapa, and must always be on their own line. - <code>//</code> and <code>#</code> comments are not supported and will cause errors. </p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some Go idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Static typing: <code>var x int</code> - Grapa uses dynamic typing by design (see note below)</li> <li>Pointers: <code>*int</code> - Grapa has no pointers, all values are owned</li> <li>Channels: <code>chan int</code> - No channel-based concurrency</li> <li>Goroutines: <code>go func()</code> - No goroutine-based concurrency</li> <li>Select statements: <code>select</code> - No select-based concurrency</li> <li>Defer: <code>defer cleanup()</code> - No defer mechanism</li> <li>Panic/recover: <code>panic()</code>, <code>recover()</code> - No panic/recover mechanism</li> <li>Embedding: <code>type Child struct { Parent }</code> - No struct embedding</li> <li>Package system: <code>package main</code> - No package system</li> <li>Import system: <code>import \"fmt\"</code> - No import system</li> <li>Build tags: <code>// +build</code> - No build tag system</li> <li>CGO: - No CGO support</li> <li>Assembly: - No assembly support</li> <li>Reflection: <code>reflect</code> - Limited reflection capabilities</li> </ul> <p>Important Note on Dynamic Typing: Grapa's dynamic typing is a fundamental design choice, not a limitation. It enables Grapa's core strengths: - Dynamic code execution and meta-programming capabilities - Runtime type introspection with <code>.type()</code> method - Flexible data processing without compile-time type constraints - System integration that doesn't require type definitions</p> <p>Grapa provides type safety through runtime checking and rich type introspection, which is often more flexible than static typing for data processing and system integration tasks.</p> <p>Important Note on Class System: Grapa's class system is superior to Go's structs, providing full object-oriented programming capabilities: - Classes with methods: Define data structures with attached functions - Inheritance: Create class hierarchies with <code>class (ParentClass)</code> - Polymorphism: Method overriding and dynamic dispatch - Constructors: Custom initialization functions - Runtime modification: Add methods and properties dynamically - Type safety: Runtime type checking and introspection</p> <p>Important Note on Switch Statements: Grapa does have switch statements that can be used for type switching: <pre><code>/* Type switching with switch statement */\nswitch (x.type()) {\n    case $STR: \"string\".echo();\n    case $INT: \"int\".echo();\n    case $ARRAY: \"array\".echo();\n    default: \"unknown type\".echo();\n};\n\n/* Boolean switching (alternative to if/else chains) */\nswitch(true) {\n    case (x &gt; 10): \"large\".echo();\n    case (x &gt; 5): \"medium\".echo();\n    default: \"small\".echo();\n};\n</code></pre></p> <p>Important Note on Class System: Grapa's class system is comprehensive and provides all OOP features: - Methods: Classes can have methods attached to them - Method sets: Classes have method sets for interface-like behavior - Inheritance: Use <code>class (ParentClass)</code> for inheritance hierarchies - Polymorphism: Method overriding and dynamic dispatch - Embedding: Inheritance provides embedding-like functionality - Composition: Object composition is also supported</p> <pre><code>/* Example: Class with methods and inheritance */\nAnimal = class {\n    name = \"\";\n    speak = op() { \"Some sound\".echo(); };\n};\n\nDog = class (Animal) {\n    /* Method override */\n    speak = op() { \"Woof!\".echo(); };\n    /* New method */\n    fetch = op() { \"Fetching...\".echo(); };\n};\n\nmyDog = obj Dog;\nmyDog.name = \"Rex\";\nmyDog.speak();  /* Outputs: Woof! */\nmyDog.fetch();  /* Outputs: Fetching... */\n</code></pre>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Interfaces: <code>type MyInterface interface</code> - Use object composition and duck typing</li> <li>Structs: <code>type MyStruct struct</code> - Grapa has superior class system <p>Note: Grapa's class system provides full OOP capabilities including inheritance, polymorphism, methods, and runtime modification. See the \"Important Note on Class System\" section above for details and examples.</p> </li> <li>Methods: <code>func (r Receiver) Method()</code> - Grapa classes have methods <p>Note: Grapa classes support methods with full OOP capabilities. See the \"Important Note on Class System\" section above for details and examples.</p> </li> <li>Type assertions: <code>x.(string)</code> - Use <code>.type()</code> checks</li> <li>Type switches: <code>switch x.(type)</code> - Use <code>switch</code> with <code>.type()</code> <p>Note: Grapa supports type switching using <code>switch</code> statements with <code>.type()</code> method. See the \"Important Note on Switch Statements\" section above for examples.</p> </li> <li>Generics: <code>func F[T any](x T)</code> - Grapa has dynamic typing</li> <li>Type constraints: <code>T comparable</code> - Use runtime checks</li> <li>Type sets: <code>~int</code> - Use regular types</li> <li>Union types: <code>int | string</code> - Use dynamic typing</li> <li>Type inference: - Use explicit types</li> <li>Method sets: - Grapa classes have method sets <p>Note: Grapa classes support method sets for interface-like behavior. See the \"Important Note on Class System\" section above for details.</p> </li> <li>Interface satisfaction: - Use duck typing</li> <li>Embedding: - Grapa classes support inheritance <p>Note: Grapa classes support inheritance which provides embedding-like functionality. See the \"Important Note on Class System\" section above for details.</p> </li> <li>Composition: - Use object composition</li> <li>Inheritance: - Grapa classes support inheritance <p>Note: Grapa classes support full inheritance hierarchies. See the \"Important Note on Class System\" section above for details and examples.</p> </li> </ul>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Unsafe package: <code>unsafe</code> - Grapa is memory-safe by design</li> <li>Runtime: <code>runtime</code> - Use Grapa's system integration</li> <li>CGO: - Use Grapa's system integration</li> <li>Assembly: - Use Grapa's system calls</li> <li>Build constraints: - Use conditional compilation</li> <li>Module system: - Use Grapa's file system</li> <li>Vendor directories: - Use Grapa's dependency management</li> <li>Go workspaces: - Use directory organization</li> <li>Go modules: - Use Grapa's file system</li> <li>Go toolchain: - Use Grapa's build system</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, Go's goroutines are replaced by Grapa's built-in parallel processing with <code>.map()</code> and <code>.filter()</code>, and Go's channels are replaced by Grapa's threading and synchronization.</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#see-also_1", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more Go idioms you want mapped to Grapa, please open an issue or PR!</p>"}, {"location": "migrations/GO_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer Go-style function calls, you can define your own <code>fmt_Println()</code> function in Grapa:</p> <pre><code>// Define a fmt_Println function similar to Go\nfmt_Println = op(\"value\"=\"\"){value.echo();};\nfmt_Println(\"Hello from Grapa!\");\n</code></pre> <p>This can make migration easier for those used to Go's <code>fmt.Println()</code> or similar functions.</p> <p>Advanced: Grapa also allows advanced users to customize or extend the language syntax using <code>$RULE</code> or by modifying <code>$global</code> rules. This enables you to inject your own grammar or override built-in behaviors to match your preferred style. For most users, we recommend learning the canonical Grapa method syntax, but this flexibility is available if needed.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/", "title": "JavaScript-to-Grapa Migration Guide", "text": ""}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#key-insight-grapa-is-fundamentally-complete", "title": "Key Insight: Grapa is Fundamentally Complete", "text": "<p>Grapa covers ALL the fundamental JavaScript programming concepts that developers use day-to-day. The remaining \"gaps\" are either: - Advanced features that most developers never use - Syntactic sugar that Grapa handles differently but just as effectively - Areas where Grapa actually provides superior alternatives</p> <p>Grapa's unique advantages over JavaScript: - \u2705 Built-in parallel processing (no Web Workers/worker_threads setup needed) - \u2705 Unlimited precision arithmetic (no BigInt conversion overhead) - \u2705 Advanced pattern matching (superior to JavaScript's RegExp) - \u2705 Execution tree introspection (impossible in JavaScript) - \u2705 Native JSON/XML processing (no external libraries) - \u2705 Built-in file system integration (no fs module needed) - \u2705 Native database operations (no IndexedDB/SQLite needed) - \u2705 Superior dynamic code execution (human-readable execution trees) - \u2705 Runtime type safety (no TypeScript compilation needed)</p> <p>Important: Access Patterns for Data Types (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation .len() .size() $ARRAY \u274c \u274c \u2705 \u2014 \u2705 \u274c $LIST \u274c \u274c \u2705 \u2705 \u2705 \u274c $OBJ \u274c \u274c \u2705 \u2705 \u274c \u274c $file \u2705 \u274c \u2014 \u2014 \u274c \u274c $TABLE \u2705* \u274c \u2014 \u2014 \u274c \u274c <p>*$TABLE .get() requires two arguments: key and field.</p> <p>Key Findings: - Arrays (<code>[]</code>): Use <code>array[index]</code> and <code>array.len()</code> for access and length - Lists (<code>{}</code>): Use <code>list[key]</code> or <code>list.key</code> for access, <code>list.len()</code> for length - Objects (class): Use <code>object.property</code> or <code>object[key]</code> for access - <code>.get()</code> method: Only works on <code>$file</code> and <code>$TABLE</code> types - <code>.size()</code> method: Not supported on any type (use <code>.len()</code> instead) - <code>.keys()</code> method: Not supported on <code>$LIST</code> (use iteration instead)</p> <p>This guide helps JavaScript users transition to Grapa by mapping common JS idioms, patterns, and code to their Grapa equivalents.</p> <p>Comment Style: - Only block comments (<code>/* ... */</code>) are supported in Grapa, and must always be on their own line. - <code>//</code> and <code>#</code> comments are not supported and will cause errors.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#syntax-mapping-table", "title": "Syntax Mapping Table", "text": "JavaScript Grapa <code>for (let i=0; i&lt;arr.length; i++)</code> <code>i = 0; while (i &lt; arr.len()) { ...; i += 1; }</code><code>arr.map(op(x) { ... })</code><code>(n).range(0,1).map(op(i) { ... })</code> <code>if (cond) { ... }</code> <code>if (cond) { ... }</code> <code>function f(x) { ... }</code> <code>f = op(x) { ... };</code> <code>arr.push(x)</code> <code>arr += x;</code> <code>arr[index]</code> <code>arr[index]</code><code>arr.get(index)</code> <code>obj.key</code> <code>obj[\"key\"]</code><code>obj.key</code><code>obj.\"key\"</code> (file access) <code>file.get(\"key\")</code> <code>try { ... } catch { ... }</code> <code>result.iferr(fallback)</code><code>if (result.type() == $ERR) { ... }</code> <code>/* comment */</code> <code>/* comment */</code> (block only, own line) <code>true/false</code> <code>true/false</code> <code>null/undefined</code> <code>null</code> <code>String(x)</code> <code>x.str()</code> <code>Number(x)</code> <code>x.int()</code> or <code>x.float()</code> <code>arr.length</code> <code>arr.len()</code> <code>arr.map(f)</code> <code>arr.map(op(x) { f(x); })</code> <code>arr.filter(f)</code> <code>arr.filter(op(x) { f(x); })</code> <code>arr.reduce(f, init)</code> <code>arr.reduce(op(a, b) { f(a, b); }, init)</code> <code>Array.from({length: n}, (_, i) =&gt; i)</code> <code>(n).range(0,1)</code> <code>x = x + 1</code> <code>x = x + 1;</code><code>x += 1;</code> (preferred) <code>s = s + \"x\"</code> <code>s = s + \"x\";</code><code>s += \"x\";</code> (preferred) <code>x =&gt; x * 2</code> <code>op(x) { x * 2; }</code> <code>function f(x = 1) { ... }</code> <code>f = op(\"x\"=1) { ... };</code> <code>function f(...args) { ... }</code> <code>f = op(args) { ... };</code> <code>obj?.prop</code> <code>if (obj &amp;&amp; obj.prop) { obj.prop; }</code> <code>x ?? y</code> <code>if (x == null) { x = y; }</code> <code>[...arr1, ...arr2]</code> <code>arr1 += arr2</code> <code>x ||= y</code> <code>if (!x) { x = y; }</code> (no <code>||=</code> operator) <code>BigInt(123)</code> <code>123</code> (Grapa handles unlimited precision natively) <code>async function f() { await g() }</code> Use Grapa's built-in parallelism: <code>data.map(op(x) { process(x); }, 8)</code> <code>function* gen() { yield x }</code> Use <code>.map()</code> (Grapa is eager by default) <p>Note: Both <code>x = x + 1;</code> and <code>x += 1;</code> (and <code>s = s + \"x\";</code> and <code>s += \"x\";</code>) are valid in Grapa. The <code>+=</code> form is idiomatic and preferred in most cases.</p> <p>Clarification on .get() Usage: - <code>.get()</code> is required for <code>$file</code> and <code>$TABLE</code> access. - <code>.get()</code> is not supported for <code>$ARRAY</code>, <code>$LIST</code>, or <code>$OBJ</code> (returns empty string). - Use bracket and dot notation for <code>$ARRAY</code>, <code>$LIST</code>, and <code>$OBJ</code>. - Length: Use <code>.len()</code> for arrays and lists, not <code>.size()</code>. - Keys: For lists, iterate manually instead of using <code>.keys()</code>. - If more objects support <code>.get()</code> in the future, this guide will be updated.</p> <p>Note: <code>.get(\"key\")</code> is only for <code>$file</code> (and possibly one other system object). For <code>$LIST</code>/<code>$OBJ</code>, use <code>obj[\"key\"]</code>, <code>obj.key</code>, or <code>obj.\"key\"</code>. For <code>$ARRAY</code>, use <code>arr[index]</code> (and <code>arr.get(index)</code> if supported).</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#access-patterns-objects-lists-arrays-files-and-tables", "title": "Access Patterns: Objects, Lists, Arrays, Files, and Tables", "text": "<p>Below are all valid ways to access elements in Grapa data structures. See the canonical Basic Syntax Guide for the latest tested rules.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#list-and-obj", "title": "$LIST and $OBJ", "text": "<pre><code>obj = {\"a\": 1, \"b\": 2, \"c\": 3};\n\nvalue = obj[\"b\"];      /* Returns 2 */\nvalue = obj.key;        /* Returns value for key 'key' if present */\nvalue = obj.\"b\";       /* Returns 2 */\n\n/* $LIST only: */\nvalue = obj[1];         /* Returns 2 (by index) */\nname = obj.getname(1);  /* Returns \"b\" (key name at index 1) */\n</code></pre> <ul> <li>Dot notation (<code>obj.key</code>) and bracket notation (<code>obj[\"key\"]</code>) are both valid for $LIST/$OBJ.</li> <li><code>.get()</code> is NOT valid for $LIST/$OBJ.</li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#array", "title": "$ARRAY", "text": "<pre><code>arr = [10, 20, 30];\n\nvalue = arr[1];         /* Returns 20 */\nvalue = arr.get(1);     /* Returns 20 */\n</code></pre> <ul> <li>Use bracket notation or <code>.get(index)</code> for $ARRAY.</li> <li>Dot notation and <code>.get(\"key\")</code> are NOT valid for $ARRAY.</li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#file", "title": "$file", "text": "<pre><code>files = $file().ls();\nfile_info = files.get(0);   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(index)</code> for $file results.</li> <li>Bracket and dot notation are NOT valid for $file.</li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#table", "title": "$TABLE", "text": "<pre><code>table = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"user1\", \"Alice\", \"name\");\n\nvalue = table.get(\"user1\", \"name\");   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(key, field)</code> for $TABLE.</li> <li>Bracket and dot notation are NOT valid for $TABLE.</li> </ul> <p>Reference Table: | Type      | .get(\"key\") | .get(index) | Bracket Notation | Dot Notation | .len() | .size() | |-----------|:-----------:|:-----------:|:----------------:|:------------:|:------:|:-------:| | $ARRAY    |      \u2717      |     \u2717      |       \u2713         |      \u2014       |   \u2713   |    \u2717   | | $LIST     |      \u2717      |     \u2717      |       \u2713         |     \u2713       |   \u2713   |    \u2717   | | $OBJ      |      \u2717      |     \u2717      |       \u2713         |     \u2713       |   \u2717   |    \u2717   | | $file     |      \u2713      |     \u2717      |        \u2014         |      \u2014       |   \u2717   |    \u2717   | | $TABLE    |     \u2713      |     \u2717      |        \u2014         |      \u2014       |   \u2717   |    \u2717   | $TABLE .get() requires two arguments: key and field.</p> <p>See Basic Syntax Guide for empirical test results and future updates.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#common-pitfalls", "title": "Common Pitfalls", "text": "<ul> <li>No <code>for</code>/<code>foreach</code> loops\u2014use <code>while</code> or <code>.range()</code>+functional methods</li> <li>No <code>try/catch</code>\u2014use <code>.iferr()</code> for fallback or check for <code>$ERR</code></li> <li>No <code>.push()</code>/<code>.pop()</code>\u2014use <code>+=</code> and manual index for pop</li> <li>No <code>/* comment */</code> comments\u2014only block comments (<code>/* ... */</code>), always on their own line</li> <li>No attribute-style access for object keys\u2014use <code>[]</code>, or dot notation for <code>$LIST</code>/<code>$OBJ</code></li> <li>No implicit truthy/falsy\u2014use explicit boolean checks</li> <li>All statements and blocks must end with a semicolon (<code>;</code>)</li> <li>Use <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> as methods, not global functions</li> <li>Use <code>.range()</code> for sequence generation instead of manual while loops</li> <li>Use <code>.range()</code> with <code>.reduce()</code> for for-loop-like accumulation or collection tasks</li> <li>Use <code>.range().map()</code> and <code>.range().filter()</code> for parallel sequence generation and filtering. For large arrays, always specify a thread count to avoid too many threads</li> <li>Use <code>.iferr()</code> for simple error fallback; use <code>if (result.type() == $ERR)</code> only for explicit error handling</li> <li>Count-only grep returns array: <code>text.grep(pattern, \"c\")</code> returns <code>[\"2\"]</code> not <code>2</code> - use <code>text.grep(pattern, \"c\")[0].int()</code> to get the number</li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#example-code-pairs", "title": "Example Code Pairs", "text": "<p>JavaScript: <pre><code>// Sum squares of even numbers\nlet result = arr.filter(x =&gt; x % 2 === 0).map(x =&gt; x * x).reduce((a, b) =&gt; a + b, 0);\n</code></pre> Grapa: <pre><code>result = arr.filter(op(x) { x % 2 == 0; }).map(op(x) { x * x; }).reduce(op(a, b) { a + b; }, 0);\n</code></pre></p> <p>JavaScript: <pre><code>// Read file lines\nconst fs = require('fs');\nlet lines = fs.readFileSync('file.txt', 'utf-8').split('\\n');\n</code></pre> Grapa: <pre><code>lines = $file().read(\"file.txt\").split(\"\\n\");\n</code></pre></p> <p>JavaScript: <pre><code>// Object access\nlet value = obj.key;\n</code></pre> Grapa: <pre><code>value = obj[\"key\"];\nvalue = obj.key;\nvalue = obj.\"key\";\n</code></pre></p> <p>JavaScript: <pre><code>// File access\nlet value = file['key'];\n</code></pre> Grapa: <pre><code>value = file.get(\"key\");\n</code></pre></p> <p>JavaScript: <pre><code>// Generate numbers 0..9\nlet seq = Array.from({length: 10}, (_, i) =&gt; i);\n</code></pre> Grapa: <pre><code>seq = (10).range(0,1);\n</code></pre></p> <p>JavaScript: <pre><code>// Sum numbers 0..9\nlet sum = 0;\nfor (let i = 0; i &lt; 10; i++) {\n    sum += i;\n}\n</code></pre> Grapa: <pre><code>sum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);\n</code></pre></p> <p>JavaScript: <pre><code>// Collect even numbers 0..9\nlet evens = [];\nfor (let i = 0; i &lt; 10; i++) {\n    if (i % 2 === 0) {\n        evens.push(i);\n    }\n}\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).reduce(op(acc, x) {\n    if (x % 2 == 0) { acc += x; };\n}, []);\n</code></pre></p> <p>JavaScript: <pre><code>// Squares of 0..9\nlet squares = Array.from({length: 10}, (_, i) =&gt; i * i);\n</code></pre> Grapa: <pre><code>squares = (10).range(0,1).map(op(x) { x * x; });\n</code></pre></p> <p>JavaScript: <pre><code>// Even numbers 0..9\nlet evens = Array.from({length: 10}, (_, i) =&gt; i).filter(x =&gt; x % 2 === 0);\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).filter(op(x) { x % 2 == 0; });\n</code></pre></p> <p>JavaScript: <pre><code>// Error fallback\nlet result;\ntry {\n    result = someOperation();\n} catch {\n    result = 0;\n}\n</code></pre> Grapa: <pre><code>result = some_operation().iferr(0);\n</code></pre></p> <p>Warning: <code>.map()</code> and <code>.filter()</code> are parallel by default. For large arrays, specify a thread count: <pre><code>big = (1000000).range(0,1).map(op(x) { x * x; }, 8);  // Limit to 8 threads\n</code></pre></p> <p>Tip: Grapa's parallel ETL/data processing is robust, production-ready, and a core design goal. Unlike JavaScript, you can use parallel methods like <code>.map()</code> and <code>.filter()</code> out of the box for high-throughput data tasks.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer JavaScript-style function calls, you can define your own <code>console_log()</code> function in Grapa:</p> <pre><code>// Define a console_log function similar to JavaScript\nconsole_log = op(\"value\"=\"\"){value.echo();};\nconsole_log(\"Hello from Grapa!\");\n</code></pre> <p>This can make migration easier for those used to JavaScript's <code>console.log()</code> or similar functions.</p> <p>Advanced: Grapa also allows advanced users to customize or extend the language syntax using <code>$RULE</code> or by modifying <code>$global</code> rules. This enables you to inject your own grammar or override built-in behaviors to match your preferred style. For most users, we recommend learning the canonical Grapa method syntax, but this flexibility is available if needed.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some JavaScript idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>with statement: <code>with (obj)</code> - No with statement support</li> <li>Labeled statements: <code>label: statement</code> - No labeled statement support</li> <li>Debugger statement: - No debugger statement support</li> <li>Strict mode: - Grapa is strict by default</li> <li>Hoisting: - Grapa has different scoping rules</li> <li>Closure scope: - Grapa has different scoping rules</li> <li>Prototype chain: - No prototype system</li> <li>Function constructors: - No function constructor support</li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#advanced-meta-programming-available-in-grapa", "title": "Advanced Meta-Programming (Available in Grapa)", "text": "<p>Grapa actually provides superior dynamic code execution capabilities:</p> <ul> <li>Dynamic code execution: <code>op()(\"'hello world'.echo();\")()</code> - Direct string-to-function compilation</li> <li>System evaluation: <code>$sys().eval(\"x + y\", {\"x\": 5, \"y\": 3})</code> - System-level evaluation with parameters</li> <li>Compiled execution: <code>$sys().compile(\"script\")</code> then <code>$sys().eval(compiled)</code> - Compile once, execute many</li> <li>Execution trees: Direct manipulation and execution of <code>$OP</code> objects</li> <li>Parameter binding: Both positional and named parameter support</li> <li>Introspection: Execution trees can be examined and modified</li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#grapa-features-that-javascript-lacks", "title": "Grapa Features That JavaScript Lacks", "text": "<p>Grapa provides many capabilities that JavaScript doesn't have, making it superior for certain tasks:</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#built-in-parallel-processing", "title": "Built-in Parallel Processing", "text": "<pre><code>/* Parallel processing is built-in and production-ready */\ndata = (1000000).range(0,1);\n/* 8 threads */\nresult = data.map(op(x) { x * x; }, 8);\n/* 8 threads */\nfiltered = data.filter(op(x) { x % 2 == 0; }, 8);\n</code></pre> <p>JavaScript equivalent requires: Web Workers, Node.js <code>worker_threads</code>, or complex async patterns</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#unlimited-precision-arithmetic", "title": "Unlimited Precision Arithmetic", "text": "<pre><code>/* Native unlimited precision - no BigInt needed */\nbig_num = 123456789012345678901234567890 * 987654321098765432109876543210;\nbig_num.echo();  /* Exact result, no overflow */\n</code></pre> <p>JavaScript equivalent requires: <code>BigInt</code> with limited operations and conversion overhead</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#advanced-pattern-matching-with-grep", "title": "Advanced Pattern Matching with Grep", "text": "<pre><code>/* Rich grep with context, case options, and advanced patterns */\ntext = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\";\n\n/* Context lines */\ntext.grep(\"Line 3\", \"A1B1\");  /* 1 line before and after */\n\n/* Case-insensitive with match-only */\ntext.grep(\"line\", \"io\");  /* Only matching parts, case-insensitive */\n\n/* Multiple patterns with context merging */\ntext.grep(\"Line 2|Line 4\", \"A1B1\");  /* Context blocks merged automatically */\n</code></pre> <p>JavaScript equivalent requires: <code>RegExp</code> with manual context handling and complex state management</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#native-jsonxml-round-tripping", "title": "Native JSON/XML Round-tripping", "text": "<pre><code>/* Direct JSON/XML parsing and serialization */\njson_text = '{\"name\": \"John\", \"age\": 30}';\ndata = json_text.json();\ndata.name.echo();  /* \"John\" */\n\nxml_text = '&lt;person&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/person&gt;';\nxml_data = xml_text.xml();\nxml_data.findall(\"name\")[0].echo();  /* \"John\" */\n</code></pre> <p>JavaScript equivalent requires: <code>JSON.parse()</code> and <code>DOMParser</code> or external XML libraries</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#execution-tree-introspection", "title": "Execution Tree Introspection", "text": "<pre><code>/* Examine and manipulate compiled code directly */\nfunc = op(x){x * 2 + 1};\nfunc;  /* Shows: @&lt;[op,@&lt;add,{@&lt;mul,{@&lt;var,{x}&gt;,2}&gt;},1}&gt;],{x}&gt; */\n\n/* Direct tree execution */\n/* 11 */\n@&lt;[op,@&lt;add,{@&lt;mul,{@&lt;var,{x}&gt;,2}&gt;},1}&gt;],{x}&gt;(5);\n</code></pre> <p>JavaScript equivalent: Not possible - bytecode is not human-readable</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#built-in-file-system-integration", "title": "Built-in File System Integration", "text": "<pre><code>/* Direct file system operations */\n$file().set(\"test.txt\", \"Hello World\");\ncontent = $file().read(\"test.txt\");\n$file().rm(\"test.txt\");\n</code></pre> <p>JavaScript equivalent requires: Node.js <code>fs</code> module or browser File API</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#native-tabledatabase-operations", "title": "Native Table/Database Operations", "text": "<pre><code>/* Built-in table operations */\ntable = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.mkfield(\"age\", \"INT\");\ntable.set(\"user1\", \"John\", \"name\");\ntable.set(\"user1\", 30, \"age\");\n</code></pre> <p>JavaScript equivalent requires: IndexedDB, SQLite, or external database libraries</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#vector-and-matrix-operations", "title": "Vector and Matrix Operations", "text": "<pre><code>/* Native vector operations */\nv1 = &lt;1, 2, 3&gt;;\nv2 = &lt;4, 5, 6&gt;;\ndot_product = v1.dot(v2);  /* 32 */\n</code></pre> <p>JavaScript equivalent requires: Math libraries or manual implementation</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#built-in-error-fallback", "title": "Built-in Error Fallback", "text": "<pre><code>/* Graceful error handling */\nresult = risky_operation().iferr(0);  /* Returns 0 if operation fails */\n</code></pre> <p>JavaScript equivalent requires: <code>try/catch</code> blocks or Promise error handling</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#native-timedate-with-unlimited-precision", "title": "Native Time/Date with Unlimited Precision", "text": "<pre><code>/* Unlimited precision time operations */\nnow = $TIME().utc();\nfuture = now + 86400000000;  /* Add 1 day in microseconds */\n</code></pre> <p>JavaScript equivalent requires: <code>Date</code> with millisecond precision limits</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#direct-system-integration", "title": "Direct System Integration", "text": "<pre><code>/* Access system information directly */\nversion = $sys().getenv($VERSION);\nplatform = $sys().getenv($PLATFORM);\n</code></pre> <p>JavaScript equivalent requires: Node.js <code>process</code> and <code>os</code> modules (not available in browsers)</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#type-safety-without-typescript", "title": "Type Safety Without TypeScript", "text": "<pre><code>/* Runtime type checking without compilation */\nif (value.type() == $INT) {\n    /* Handle integer */\n} else if (value.type() == $STR) {\n    /* Handle string */\n}\n</code></pre> <p>JavaScript equivalent requires: TypeScript compilation or manual runtime checks</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Template literals: <code>`Hello ${name}`</code> - Use string concatenation: <code>\"Hello \" + name</code></li> <li>Destructuring: <code>const {a, b} = obj</code> - Use explicit property access: <code>a = obj.a; b = obj.b;</code></li> <li>Spread operator: <code>[...arr1, ...arr2]</code> - Use <code>+=</code> operator: <code>arr1 += arr2</code></li> <li>Optional chaining: <code>obj?.prop?.sub</code> - Use explicit null checks: <code>if (obj &amp;&amp; obj.prop) { obj.prop.sub; }</code></li> <li>Nullish coalescing: <code>x ?? y</code> - Use explicit null checks: <code>if (x == null) { x = y; }</code></li> <li>Logical assignment: <code>x ||= y</code> - Use explicit assignment: <code>if (!x) { x = y; }</code> (no <code>||=</code> operator)</li> <li>Class syntax: <code>class MyClass</code> - Use object constructors and functions</li> <li>Private fields: <code>#private</code> - Use naming conventions like <code>_private</code></li> <li>Getters/setters: <code>get prop()</code> - Use regular methods</li> <li>Symbols: <code>Symbol('key')</code> - Use string keys</li> <li>WeakMap/WeakSet: - Use regular objects/arrays</li> <li>Proxy: - Use regular objects</li> <li>Reflect: - Use direct property access</li> <li>Optional catch binding: <code>catch {}</code> - Use explicit error handling</li> <li>Modules: <code>import/export</code> - Use Grapa's file system and <code>$file()</code> operations</li> <li>Dynamic imports: <code>import()</code> - Use <code>$file().read()</code> and <code>$sys().eval()</code></li> <li>Top-level await: - Use regular execution</li> <li>Class fields: <code>class { field = 1 }</code> - Use constructor assignment</li> <li>Private methods: <code>#method()</code> - Use naming conventions like <code>_method()</code></li> <li>Static fields: <code>static field = 1</code> - Use module-level variables</li> <li>Class expressions: <code>const MyClass = class {}</code> - Use object constructors</li> <li>Computed property names: <code>{[key]: value}</code> - Use explicit assignment: <code>obj[key] = value;</code></li> <li>Method shorthand: <code>{method() {}}</code> - Use regular method syntax</li> <li>Property shorthand: <code>{name}</code> - Use explicit assignment: <code>{name: name}</code></li> </ul>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Decorators: <code>@decorator</code> - Use function composition</li> <li>Meta-programming: <code>eval()</code>, <code>Function()</code> - Use Grapa's built-in code generation</li> <li>with statement: <code>with (obj)</code> - Use explicit property access</li> <li>Labeled statements: <code>label: statement</code> - Use regular control flow</li> <li>Debugger statement: - Use Grapa's debugging tools</li> <li>Strict mode: - Grapa is strict by default</li> <li>Hoisting: - Grapa has different scoping rules</li> <li>Closure scope: - Grapa has different scoping rules</li> <li>Prototype chain: - Use object composition</li> <li>Function constructors: - Use regular functions</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, async/await patterns are replaced by Grapa's built-in parallel processing with <code>.map()</code> and <code>.filter()</code>.</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#see-also", "title": "See Also", "text": "<ul> <li>Migration Tips for JavaScript Users</li> <li>Python Integration Guide</li> </ul> <p>If you have more JavaScript idioms you want mapped to Grapa, please open an issue or PR!</p>"}, {"location": "migrations/JS_TO_GRAPA_MIGRATION/#custom-match-function-for-regex", "title": "Custom match() Function for Regex", "text": "<p>JavaScript users often use <code>str.match</code> for regex checks. You can define a similar function in Grapa:</p> <pre><code>// Define a match function that returns true if the pattern is found\nmatch = op(\"text\"=\"\", \"pattern\"=\"\") {\n    text.grep(pattern, \"x\").len() &gt; 0;\n};\n\n// Usage\nif (match(\"hello world\", \"world\")) {\n    \"Found!\".echo();\n} else {\n    \"Not found.\".echo();\n}\n</code></pre> <p>This is a handy workaround until Grapa adds a native <code>.match()</code> method.</p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/", "title": "Kotlin-to-Grapa Migration Guide", "text": "<p>Important: Access Patterns for .get() and Indexing (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation $ARRAY \u2717 \u2717 \u2713 \u2014 $LIST \u2717 \u2717 \u2713 \u2713 $file \u2713 \u2717 \u2014 \u2014 $TABLE \u2713 \u2717 \u2014 \u2014 $OBJ \u2717 \u2717 \u2713 \u2713 $STR \u2717 \u2717 \u2713 \u2014 <p>See Basic Syntax Guide for details.</p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#kotlin-to-grapa-migration-guide-wip-features", "title": "Kotlin-to-Grapa Migration Guide (WIP Features)", "text": ""}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#main-table-core-gaps-tracked-for-enhancement", "title": "Main Table: Core Gaps (Tracked for Enhancement)", "text": "Kotlin Feature Grapa Equivalent Status/Note <code>import kotlin.math.*</code> \u2014 GAP: No module/import system <code>@file:JvmName(\"Foo\")</code> \u2014 GAP: No annotation/meta-programming <code>coroutineScope { ... }</code> \u2014 GAP: No coroutine/async support <code>finally</code> \u2014 GAP: No finally/ensure <code>x!!</code> (non-null assert) \u2014 GAP: No null assertion <code>x?.foo()</code> (safe call) \u2014 GAP: No safe call operator <code>is</code> (type check) \u2014 GAP: No direct type check operator <code>as</code> (type cast) \u2014 GAP: No direct type cast operator"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "Kotlin Feature Grapa Equivalent Note <code>sealed class</code> \u2014 Advanced type, rarely needed <code>enum class</code> \u2014 Advanced type, rarely needed <code>inline fun</code> \u2014 Advanced meta-programming <code>reified</code> \u2014 Advanced meta-programming <code>vararg</code> \u2014 Advanced meta-programming <code>tailrec fun</code> \u2014 Advanced meta-programming <code>operator fun</code> \u2014 Advanced meta-programming <code>infix fun</code> \u2014 Advanced meta-programming <code>extension fun</code> \u2014 Advanced meta-programming <code>@Annotation</code> \u2014 Annotation, rarely needed <code>inheritance</code> <code>class (ParentClass)</code> Grapa supports inheritance <code>method overriding</code> \u2014 Use regular method definitions <code>object/class composition</code> <code>class {...}</code>/object Grapa supports composition"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "Kotlin Feature Grapa Equivalent Note <code>lateinit var x: Int</code> \u2014 Rarely used, not blocking <code>companion object</code> \u2014 Rarely used, not blocking"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some Kotlin idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Module system: <code>import kotlin.math.*</code> - No module system</li> <li>Annotations: <code>@file:JvmName(\"Foo\")</code> - No annotation system</li> <li>Coroutines: <code>coroutineScope { ... }</code> - No coroutine system</li> <li>Finally/ensure: <code>finally</code> - No finally mechanism</li> <li>Null assertion: <code>x!!</code> - No null assertion operator</li> <li>Safe call: <code>x?.foo()</code> - No safe call operator</li> <li>Type checking: <code>is</code> - No type checking operator</li> <li>Type casting: <code>as</code> - No type casting operator</li> <li>Sealed classes: <code>sealed class</code> - No sealed class system</li> <li>Enum classes: <code>enum class</code> - No enum class system</li> <li>Inline functions: <code>inline fun</code> - No inline function system</li> <li>Reified generics: <code>reified</code> - No reified generics</li> <li>Varargs: <code>vararg</code> - No vararg system</li> <li>Tail recursion: <code>tailrec fun</code> - No tail recursion optimization</li> <li>Operator functions: <code>operator fun</code> - No operator function system</li> <li>Infix functions: <code>infix fun</code> - No infix function system</li> <li>Extension functions: <code>extension fun</code> - No extension function system</li> <li>Data classes: <code>data class</code> - No data class system</li> <li>Companion objects: <code>companion object</code> - No companion object system</li> </ul>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#nice-to-have_1", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Late initialization: <code>lateinit var</code> - Use regular variables</li> <li>Property delegation: - Use regular properties</li> <li>Lazy properties: <code>lazy</code> - Use regular properties</li> <li>Observable properties: - Use regular properties</li> <li>Vetoable properties: - Use regular properties</li> <li>Property accessors: - Use regular methods</li> <li>Backing fields: - Use regular fields</li> <li>Property references: - Use regular references</li> <li>Function references: <code>::foo</code> - Use <code>@\"foo\"</code> for variable references</li> <li>Type references: - Use regular types</li> </ul>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#rarely-used_1", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Kotlin-specific features: - Use Grapa equivalents</li> <li>Kotlin coroutines: - Use Grapa's threading</li> <li>Kotlin flow: - Use Grapa's event system</li> <li>Kotlin serialization: - Use Grapa's serialization</li> <li>Kotlin reflection: - Use Grapa's reflection</li> <li>Kotlin DSL: - Use Grapa's syntax</li> <li>Kotlin multiplatform: - Use Grapa's platform abstraction</li> <li>Kotlin native: - Use Grapa's compilation</li> <li>Kotlin JS: - Use Grapa's web support</li> <li>Kotlin Android: - Use Grapa's mobile support</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, Kotlin's coroutines are replaced by Grapa's built-in parallel processing with <code>.map()</code> and <code>.filter()</code>, and Kotlin's null safety is replaced by Grapa's explicit null checking with <code>.isnull()</code>.</p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer Kotlin-style function calls, you can define your own <code>println()</code> function in Grapa:</p> <pre><code>println = op(\"value\"=\"\"){value.echo();};\nprintln(\"Hello from Grapa!\");\n</code></pre> <p>This can make migration easier for those used to Kotlin's <code>println()</code> or similar functions.</p> <p>Advanced: Grapa also allows advanced users to customize or extend the language syntax using <code>$RULE</code> or by modifying <code>$global</code> rules. This enables you to inject your own grammar or override built-in behaviors to match your preferred style. For most users, we recommend learning the canonical Grapa method syntax, but this flexibility is available if needed.</p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#common-kotlin-to-grapa-mappings", "title": "Common Kotlin-to-Grapa Mappings", "text": "Kotlin Grapa Equivalent <code>import kotlin.math.*</code> Built-in math functions (no import needed) <code>File(\"file.txt\").writeText(d)</code> <code>$file().set(\"file.txt\", d)</code> <code>thread { ... }</code> <code>$thread().start(op() { ... })</code> <code>Thread.sleep(1000)</code> <code>$sys().sleep(1000)</code> <code>System.getenv(\"HOME\")</code> <code>$sys().getenv($HOME)</code> <code>exitProcess(0)</code> <code>exit</code> <code>object : Foo {}</code> <code>obj : Foo {}</code> <code>fun foo(x: Int) = ...</code> <code>op(x){...}</code> or <code>op(x)(\"...\")</code> <code>val x = ...</code> <code>x = ...</code> <code>var x = ...</code> <code>x = ...</code> <code>@file:JvmName(\"Foo\")</code> WIP <code>coroutineScope { ... }</code> WIP <code>this</code> <code>self</code> <code>super</code> <code>super</code> <code>when (x) { ... }</code> <code>switch(x) { ... }</code> <code>x = if (cond) a else b</code> <code>x = (cond) ? a : b</code> <code>try { ... } catch { ... }</code> <code>try { ... } catch (err) { ... }</code> <code>finally</code> WIP <code>::foo</code> (function ref) Not relevant (functions are data, pass directly) <code>x!!</code> (non-null assert) <code>x.isnull() ? error : x</code> (explicit null check) <code>x?.foo()</code> (safe call) <code>x.isnull() ? null : x.foo()</code> (explicit null check) <code>is</code> (type check) <code>text.type() == $STR</code> (type comparison) <code>as</code> (type cast) <code>x.str()</code>, <code>x.int()</code>, <code>x.float()</code> (explicit conversion) <code>data class</code> <code>class ... {}</code> or objects/lists (everything is data in Grapa) <code>companion object</code> <code>$global</code> or <code>$root</code> for static/global <code>lateinit var</code> Regular variables (assign when ready, no special syntax)"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#type-checking-examples", "title": "Type Checking Examples", "text": "<p>Grapa provides type checking using <code>.type()</code> method and type constants:</p> <pre><code>/* Kotlin: if (value is String) { ... } */\n/* Grapa equivalent: */\nif (value.type() == $STR) {\n    \"Value is a string\".echo();\n}\n\n/* Kotlin: when (value) { is String -&gt; ... is Int -&gt; ... } */\n/* Grapa equivalent: */\nswitch (value.type()) {\n    case $STR: \"String value\".echo();\n    case $INT: \"Integer value\".echo();\n    case $FLOAT: \"Float value\".echo();\n    case $ARRAY: \"Array value\".echo();\n    case $LIST: \"List value\".echo();\n    default: \"Unknown type\".echo();\n}\n\n/* Check multiple types */\nif (value.type() == $STR || value.type() == $INT) {\n    \"Value is string or integer\".echo();\n}\n</code></pre> <p>Common type constants: <code>$STR</code>, <code>$INT</code>, <code>$FLOAT</code>, <code>$BOOL</code>, <code>$ARRAY</code>, <code>$LIST</code>, <code>$TABLE</code>, <code>$TIME</code>, <code>$ERR</code></p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#notes", "title": "Notes", "text": "<ul> <li>See Operators and System docs for more details.</li> <li>Grapa supports variable scoping with <code>$global</code>, <code>$local</code>, and <code>$root</code>.</li> <li>Use <code>$sys().getenv()</code> for environment variables.</li> <li>Use <code>$thread()</code> for threading and <code>$sys().sleep()</code> for sleep.</li> <li>Use <code>op(){}</code> for lambdas and function definitions. </li> </ul>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#custom-matches-function-for-regex", "title": "Custom matches() Function for Regex", "text": "<p>Kotlin users often use <code>str.matches</code> for regex checks. You can define a similar function in Grapa:</p> <pre><code>// Define a matches function that returns true if the pattern is found\nmatches = op(\"text\"=\"\", \"pattern\"=\"\") {\n    text.grep(pattern, \"x\").len() &gt; 0;\n};\n\n// Usage\nif (matches(\"hello world\", \"world\")) {\n    \"Found!\".echo();\n} else {\n    \"Not found.\".echo();\n}\n</code></pre> <p>This is a handy workaround until Grapa adds a native <code>.match()</code> method.</p> <p>Note: While not as concise as Kotlin's operator syntax, this approach is explicit and clear about what operations are being performed.</p>"}, {"location": "migrations/KOTLIN_TO_GRAPA_MIGRATION/#late-initialization-examples", "title": "Late Initialization Examples", "text": "<p>Grapa doesn't need special <code>lateinit</code> syntax because variables can be assigned at any time:</p> <pre><code>/* Kotlin: lateinit var name: String */\n/* Grapa equivalent: Just declare and assign later */\n\nMyClass = class {\n    name = \"\";  /* Can be empty initially */\n\n    /* Initialize when ready */\n    init = op() {\n        name = \"John\";  /* Assign when convenient */\n    };\n\n    /* Or assign conditionally */\n    setup = op(condition) {\n        if (condition) {\n            name = \"Active User\";\n        } else {\n            name = \"Inactive User\";\n        }\n    };\n};\n\n/* Usage */\nobj = obj MyClass;\nobj.init();  /* name is now \"John\" */\n</code></pre> <p>Key differences: - No special syntax - Just use regular variables - No null safety concerns - Grapa's dynamic typing handles this naturally - Flexible assignment - Assign whenever convenient - No compile-time constraints - Runtime assignment is always possible</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/", "title": "Python-to-Grapa Migration Guide", "text": ""}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#key-insight-grapa-is-fundamentally-complete", "title": "Key Insight: Grapa is Fundamentally Complete", "text": "<p>Grapa covers ALL the fundamental Python programming concepts that developers use day-to-day. The remaining \"gaps\" are either: - Advanced features that most developers never use - Syntactic sugar that Grapa handles differently but just as effectively - Areas where Grapa actually provides superior alternatives</p> <p>Grapa's unique advantages over Python: - \u2705 Built-in parallel processing (no multiprocessing setup needed) - \u2705 Unlimited precision arithmetic (no decimal/mpmath imports) - \u2705 Advanced pattern matching (superior to Python's re module) - \u2705 Execution tree introspection (impossible in Python) - \u2705 Native JSON/XML processing (no external libraries) - \u2705 Built-in file system integration (no pathlib/os imports) - \u2705 Native database operations (no sqlite3/pandas needed) - \u2705 Superior dynamic code execution (human-readable execution trees)</p> <p>Important: Access Patterns for Data Types (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation .len() .size() $ARRAY \u274c \u274c \u2705 \u2014 \u2705 \u274c $LIST \u274c \u274c \u2705 \u2705 \u2705 \u274c $OBJ \u274c \u274c \u2705 \u2705 \u274c \u274c $file \u2705 \u274c \u2014 \u2014 \u274c \u274c $TABLE \u2705* \u274c \u2014 \u2014 \u274c \u274c <p>*$TABLE .get() requires two arguments: key and field.</p> <p>Key Findings: - Arrays (<code>[]</code>): Use <code>array[index]</code> and <code>array.len()</code> for access and length - Lists (<code>{}</code>): Use <code>list[key]</code> or <code>list.key</code> for access, <code>list.len()</code> for length - Objects (class): Use <code>object.property</code> or <code>object[key]</code> for access - <code>.get()</code> method: Only works on <code>$file</code> and <code>$TABLE</code> types - <code>.size()</code> method: Not supported on any type (use <code>.len()</code> instead) - <code>.keys()</code> method: Not supported on <code>$LIST</code> (use iteration instead)</p> <p>This guide helps Python users transition to Grapa by mapping common Python idioms, patterns, and code to their Grapa equivalents.</p> <p>See Also: - Python Integration Guide - Python Use Cases</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#syntax-mapping-table", "title": "Syntax Mapping Table", "text": "Python Grapa <code>for x in arr:</code> <code>i = 0; while (i &lt; arr.len()) { x = arr[i]; ...; i += 1; }</code><code>arr.map(op(x) { ... })</code><code>(n).range(0,1).map(op(i) { ... })</code> <code>if cond:</code> <code>if (cond) { ... }</code> <code>def f(x): ...</code> <code>f = op(x) { ... };</code> <code>list.append(x)</code> <code>arr += x;</code> <code>dict['key']</code> <code>obj[\"key\"]</code><code>obj.key</code><code>obj.\"key\"</code> <code>list[index]</code> <code>arr[index]</code><code>arr.get(index)</code> (file access) <code>file.get(\"key\")</code> <code>try: ... except:</code> <code>result.iferr(fallback)</code><code>if (result.type() == $ERR) { ... }</code> <code># comment</code> <code>/* comment */</code> (block only, own line) <code>True/False</code> <code>true/false</code> <code>None</code> <code>null</code> <code>str(x)</code> <code>x.str()</code> <code>int(x)</code> <code>x.int()</code> <code>float(x)</code> <code>x.float()</code> <code>len(arr)</code> <code>arr.len()</code> <code>map(f, arr)</code> <code>arr.map(op(x) { f(x); })</code> <code>filter(f, arr)</code> <code>arr.filter(op(x) { f(x); })</code> <code>reduce(f, arr, init)</code> <code>arr.reduce(op(a, b) { f(a, b); }, init)</code> <code>re.findall(pattern, text)</code> <code>text.grep(pattern, \"o\")</code> <code>len(re.findall(pattern, text))</code> <code>text.grep(pattern, \"c\")[0].int()</code> <code>range(n)</code> <code>(n).range(0,1)</code> <code>x = x + 1</code> <code>x = x + 1;</code><code>x += 1;</code> (preferred) <code>s = s + \"x\"</code> <code>s = s + \"x\";</code><code>s += \"x\";</code> (preferred) <code>lambda x: x * 2</code> <code>op(x) { x * 2; }</code> <code>def f(x=1): ...</code> <code>f = op(\"x\"=1) { ... };</code> <code>def f(*args): ...</code> <code>f = op(args) { ... };</code> <code>f\"Hello {name}\"</code> <code>\"Hello \" + name</code> <code>if (x := f()) &gt; 0:</code> <code>x = f(); if (x &gt; 0) { ... }</code> <code>async def f(): await g()</code> Use Grapa's built-in parallelism: <code>data.map(op(x) { process(x); }, 8)</code> <code>(x*2 for x in arr)</code> <code>arr.map(op(x) { x * 2; })</code> (Grapa is eager by default) <code>with open() as f:</code> Use <code>$file()</code> methods directly: <code>content = $file().read(\"file.txt\")</code> <code>@decorator</code> Use function composition: <code>f = op() { decorator(original_func); }</code> <code>arr1 + arr2</code> <code>arr1 += arr2</code> <p>Note: Both <code>x = x + 1;</code> and <code>x += 1;</code> (and <code>s = s + \"x\";</code> and <code>s += \"x\";</code>) are valid in Grapa. The <code>+=</code> form is idiomatic and preferred in most cases.</p> <p>Note: <code>.get(\"key\")</code> is only for <code>$file</code> (and possibly one other system object). For <code>$LIST</code>/<code>$OBJ</code>, use <code>obj[\"key\"]</code>, <code>obj.key</code>, or <code>obj.\"key\"</code>. For <code>$ARRAY</code>, use <code>arr[index]</code> (and <code>arr.get(index)</code> if supported).</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#access-patterns-objects-lists-arrays-files-and-tables", "title": "Access Patterns: Objects, Lists, Arrays, Files, and Tables", "text": "<p>Below are all valid ways to access elements in Grapa data structures. See the canonical Basic Syntax Guide for the latest tested rules.</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#list-and-obj", "title": "$LIST and $OBJ", "text": "<pre><code>obj = {\"a\": 1, \"b\": 2, \"c\": 3};\n\nvalue = obj[\"b\"];      /* Returns 2 */\nvalue = obj.key;        /* Returns value for key 'key' if present */\nvalue = obj.\"b\";       /* Returns 2 */\n\n/* $LIST only: */\nvalue = obj[1];         /* Returns 2 (by index) */\nname = obj.getname(1);  /* Returns \"b\" (key name at index 1) */\n</code></pre> <ul> <li>Dot notation (<code>obj.key</code>) and bracket notation (<code>obj[\"key\"]</code>) are both valid for $LIST/$OBJ.</li> <li><code>.get()</code> is NOT valid for $LIST/$OBJ.</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#array", "title": "$ARRAY", "text": "<pre><code>arr = [10, 20, 30];\n\nvalue = arr[1];         /* Returns 20 */\nvalue = arr.get(1);     /* Returns 20 */\n</code></pre> <ul> <li>Use bracket notation or <code>.get(index)</code> for $ARRAY.</li> <li>Dot notation and <code>.get(\"key\")</code> are NOT valid for $ARRAY.</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#file", "title": "$file", "text": "<pre><code>files = $file().ls();\nfile_info = files.get(0);   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(index)</code> for $file results.</li> <li>Bracket and dot notation are NOT valid for $file.</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#table", "title": "$TABLE", "text": "<pre><code>table = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"user1\", \"Alice\", \"name\");\n\nvalue = table.get(\"user1\", \"name\");   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(key, field)</code> for $TABLE.</li> <li>Bracket and dot notation are NOT valid for $TABLE.</li> </ul> <p>Reference Table: | Type      | .get(\"key\") | .get(index) | Bracket Notation | Dot Notation | .len() | .size() | |-----------|:-----------:|:-----------:|:----------------:|:------------:|:------:|:-------:| | $ARRAY    |      \u2717      |     \u2717      |       \u2713         |      \u2014       |   \u2713   |    \u2717   | | $LIST     |      \u2717      |     \u2717      |       \u2713         |     \u2713       |   \u2713   |    \u2717   | | $OBJ      |      \u2717      |     \u2717      |       \u2713         |     \u2713       |   \u2717   |    \u2717   | | $file     |      \u2713      |     \u2717      |        \u2014         |      \u2014       |   \u2717   |    \u2717   | | $TABLE    |     \u2713      |     \u2717      |        \u2014         |      \u2014       |   \u2717   |    \u2717   | $TABLE .get() requires two arguments: key and field.</p> <p>See Basic Syntax Guide for empirical test results and future updates.</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#common-pitfalls", "title": "Common Pitfalls", "text": "<ul> <li>No <code>for</code>/<code>foreach</code> loops\u2014use <code>while</code> or <code>.range()</code>+functional methods</li> <li>No <code>try/catch</code>\u2014use <code>.iferr()</code> for fallback or check for <code>$ERR</code></li> <li>No <code>.get()</code>/<code>.set()</code> on lists/arrays\u2014use <code>[]</code> for access (except for <code>$file</code>/<code>$TABLE</code>)</li> <li>No <code>//</code> or <code>#</code> comments\u2014only block comments (<code>/* ... */</code>), always on their own line</li> <li>No attribute-style access for dict/list keys\u2014use <code>[]</code>, or dot notation for <code>$LIST</code>/<code>$OBJ</code></li> <li>No implicit truthy/falsy\u2014use explicit boolean checks</li> <li>All statements and blocks must end with a semicolon (<code>;</code>)</li> <li>Use <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> as methods, not global functions</li> <li>Use <code>.range()</code> for sequence generation instead of manual while loops</li> <li>Use <code>.range()</code> with <code>.reduce()</code> for for-loop-like accumulation or collection tasks</li> <li>Use <code>.range().map()</code> and <code>.range().filter()</code> for parallel sequence generation and filtering. For large arrays, always specify a thread count to avoid too many threads</li> <li>Use <code>.iferr()</code> for simple error fallback; use <code>if (result.type() == $ERR)</code> only for explicit error handling</li> <li>Count-only grep returns array: <code>text.grep(pattern, \"c\")</code> returns <code>[\"2\"]</code> not <code>2</code> - use <code>text.grep(pattern, \"c\")[0].int()</code> to get the number</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#example-code-pairs", "title": "Example Code Pairs", "text": "<p>Python: <pre><code># Sum squares of even numbers\nresult = sum(x*x for x in arr if x % 2 == 0)\n</code></pre> Grapa: <pre><code>result = arr.filter(op(x) { x % 2 == 0; }).map(op(x) { x * x; }).reduce(op(a, b) { a + b; }, 0);\n</code></pre></p> <p>Python: <pre><code># Read file lines\nwith open('file.txt') as f:\n    lines = f.readlines()\n</code></pre> Grapa: <pre><code>lines = $file().read(\"file.txt\").split(\"\\n\");\n</code></pre></p> <p>Python: <pre><code># Dictionary access\nvalue = d['key']\n</code></pre> Grapa: <pre><code>value = obj[\"key\"];\nvalue = obj.key;\nvalue = obj.\"key\";\n</code></pre></p> <p>Python: <pre><code># File access\nvalue = file['key']\n</code></pre> Grapa: <pre><code>value = file.get(\"key\");\n</code></pre></p> <p>Python: <pre><code># Generate numbers 0..9\nseq = list(range(10))\n</code></pre> Grapa: <pre><code>seq = (10).range(0,1);\n</code></pre></p> <p>Python: <pre><code># Sum numbers 0..9\nsum = 0\nfor i in range(10):\n    sum += i\n</code></pre> Grapa: <pre><code>sum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);\n</code></pre></p> <p>Python: <pre><code># Collect even numbers 0..9\nevens = []\nfor i in range(10):\n    if i % 2 == 0:\n        evens.append(i)\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).reduce(op(acc, x) {\n    if (x % 2 == 0) { acc += x; };\n}, []);\n</code></pre></p> <p>Python: <pre><code># Squares of 0..9\nsquares = [x*x for x in range(10)]\n</code></pre> Grapa: <pre><code>squares = (10).range(0,1).map(op(x) { x * x; });\n</code></pre></p> <p>Python: <pre><code># Even numbers 0..9\nevens = [x for x in range(10) if x % 2 == 0]\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).filter(op(x) { x % 2 == 0; });\n</code></pre></p> <p>Python: <pre><code># Error fallback\ntry:\n    result = some_operation()\nexcept:\n    result = 0\n</code></pre> Grapa: <pre><code>result = some_operation().iferr(0);\n</code></pre></p> <p>Warning: <code>.map()</code> and <code>.filter()</code> are parallel by default. For large arrays, specify a thread count: <pre><code>big = (1000000).range(0,1).map(op(x) { x * x; }, 8);  // Limit to 8 threads\n</code></pre></p> <p>Tip: Grapa's parallel ETL/data processing is robust, production-ready, and a core design goal. Unlike Python, you can use parallel methods like <code>.map()</code> and <code>.filter()</code> out of the box for high-throughput data tasks.</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#see-also", "title": "See Also", "text": "<ul> <li>Migration Tips for Python Users</li> <li>Python Integration Guide</li> </ul> <p>If you have more Python idioms you want mapped to Grapa, please open an issue or PR! </p> <p>Clarification on .get() Usage: - <code>.get()</code> is required for <code>$file</code> and <code>$TABLE</code> access. - <code>.get()</code> is not supported for <code>$ARRAY</code>, <code>$LIST</code>, or <code>$OBJ</code> as of this writing. - Use bracket and dot notation for <code>$ARRAY</code>, <code>$LIST</code>, and <code>$OBJ</code>. - If more objects support <code>.get()</code> in the future, this guide will be updated. </p> <p>Comment Style: - Only block comments (<code>/* ... */</code>) are supported in Grapa, and must always be on their own line. - <code>//</code> and <code>#</code> comments are not supported and will cause errors. </p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer Python-style function calls, you can define your own <code>print()</code> function in Grapa:</p> <pre><code># Define a print function similar to Python\nprint = op(\"value\"=\"\"){value.echo();};\nprint(\"Hello from Grapa!\");\n</code></pre> <p>This can make migration easier for those used to Python's <code>print()</code> or similar functions.</p> <p>Advanced: Grapa also allows advanced users to customize or extend the language syntax using <code>$RULE</code> or by modifying <code>$global</code> rules. This enables you to inject your own grammar or override built-in behaviors to match your preferred style. For most users, we recommend learning the canonical Grapa method syntax, but this flexibility is available if needed.</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some Python idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Custom metaclasses: - No metaclass system</li> <li>Descriptor protocol: - No descriptor system</li> <li>Contextlib utilities: - No context manager protocol</li> <li>Pickle protocol: - No serialization protocol</li> <li>Shelve: - No persistent storage protocol</li> <li>Multiprocessing: - No process-based parallelism (only thread-based)</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>F-strings: <code>f\"Hello {name}\"</code> - Use string concatenation: <code>\"Hello \" + name</code></li> <li>Walrus operator: <code>if (x := f()) &gt; 0:</code> - Use separate assignment: <code>x = f(); if (x &gt; 0) { ... }</code></li> <li>Match statements: <code>match x:</code> - Use <code>if/else</code> chains</li> <li>Structural pattern matching: - Use explicit property access</li> <li>Dataclasses: <code>@dataclass</code> - Use regular object construction</li> <li>Enums: <code>from enum import Enum</code> - Use constants or objects</li> <li>Named tuples: <code>from collections import namedtuple</code> - Use objects with properties</li> <li>Property decorators: <code>@property</code> - Use regular methods</li> <li>Class methods: <code>@classmethod</code> - Use regular functions</li> <li>Static methods: <code>@staticmethod</code> - Use regular functions</li> <li>Abstract base classes: - Use regular classes</li> <li>Metaclasses: - Use regular classes</li> <li>Slots: <code>__slots__</code> - Grapa objects are optimized automatically</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#advanced-meta-programming-available-in-grapa", "title": "Advanced Meta-Programming (Available in Grapa)", "text": "<p>Grapa actually provides superior dynamic code execution capabilities:</p> <ul> <li>Dynamic code execution: <code>op()(\"'hello world'.echo();\")()</code> - Direct string-to-function compilation</li> <li>System evaluation: <code>$sys().eval(\"x + y\", {\"x\": 5, \"y\": 3})</code> - System-level evaluation with parameters</li> <li>Compiled execution: <code>$sys().compile(\"script\")</code> then <code>$sys().eval(compiled)</code> - Compile once, execute many</li> <li>Execution trees: Direct manipulation and execution of <code>$OP</code> objects</li> <li>Parameter binding: Both positional and named parameter support</li> <li>Introspection: Execution trees can be examined and modified</li> </ul>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#grapa-features-that-python-lacks", "title": "Grapa Features That Python Lacks", "text": "<p>Grapa provides many capabilities that Python doesn't have, making it superior for certain tasks:</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#built-in-parallel-processing", "title": "Built-in Parallel Processing", "text": "<pre><code>/* Parallel processing is built-in and production-ready */\ndata = (1000000).range(0,1);\n/* 8 threads */\nresult = data.map(op(x) { x * x; }, 8);\n/* 8 threads */\nfiltered = data.filter(op(x) { x % 2 == 0; }, 8);\n</code></pre> <p>Python equivalent requires: <code>multiprocessing</code>, <code>concurrent.futures</code>, or <code>asyncio</code> with significant setup</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#unlimited-precision-arithmetic", "title": "Unlimited Precision Arithmetic", "text": "<pre><code>/* Native unlimited precision - no imports needed */\nbig_num = 123456789012345678901234567890 * 987654321098765432109876543210;\nbig_num.echo();  /* Exact result, no overflow */\n</code></pre> <p>Python equivalent requires: <code>decimal.Decimal</code> or <code>mpmath</code> with precision limits</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#advanced-pattern-matching-with-grep", "title": "Advanced Pattern Matching with Grep", "text": "<pre><code>/* Rich grep with context, case options, and advanced patterns */\ntext = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\";\n\n/* Context lines */\ntext.grep(\"Line 3\", \"A1B1\");  /* 1 line before and after */\n\n/* Case-insensitive with match-only */\ntext.grep(\"line\", \"io\");  /* Only matching parts, case-insensitive */\n\n/* Multiple patterns with context merging */\ntext.grep(\"Line 2|Line 4\", \"A1B1\");  /* Context blocks merged automatically */\n</code></pre> <p>Python equivalent requires: <code>re</code> module with manual context handling</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#native-jsonxml-round-tripping", "title": "Native JSON/XML Round-tripping", "text": "<pre><code>/* Direct JSON/XML parsing and serialization */\njson_text = '{\"name\": \"John\", \"age\": 30}';\ndata = json_text.json();\ndata.name.echo();  /* \"John\" */\n\nxml_text = '&lt;person&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/person&gt;';\nxml_data = xml_text.xml();\nxml_data.findall(\"name\")[0].echo();  /* \"John\" */\n</code></pre> <p>Python equivalent requires: <code>json</code> and <code>xml.etree.ElementTree</code> modules</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#execution-tree-introspection", "title": "Execution Tree Introspection", "text": "<pre><code>/* Examine and manipulate compiled code directly */\nfunc = op(x){x * 2 + 1};\nfunc;  /* Shows: @&lt;[op,@&lt;add,{@&lt;mul,{@&lt;var,{x}&gt;,2}&gt;},1}&gt;],{x}&gt; */\n\n/* Direct tree execution */\n/* 11 */\n@&lt;[op,@&lt;add,{@&lt;mul,{@&lt;var,{x}&gt;,2}&gt;},1}&gt;],{x}&gt;(5);\n</code></pre> <p>Python equivalent: Not possible - bytecode is not human-readable</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#built-in-file-system-integration", "title": "Built-in File System Integration", "text": "<pre><code>/* Direct file system operations */\n$file().set(\"test.txt\", \"Hello World\");\ncontent = $file().read(\"test.txt\");\n$file().rm(\"test.txt\");\n</code></pre> <p>Python equivalent requires: <code>pathlib</code> or <code>os</code> module</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#native-tabledatabase-operations", "title": "Native Table/Database Operations", "text": "<pre><code>/* Built-in table operations */\ntable = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.mkfield(\"age\", \"INT\");\ntable.set(\"user1\", \"John\", \"name\");\ntable.set(\"user1\", 30, \"age\");\n</code></pre> <p>Python equivalent requires: <code>sqlite3</code>, <code>pandas</code>, or external database libraries</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#vector-and-matrix-operations", "title": "Vector and Matrix Operations", "text": "<pre><code>/* Native vector operations */\nv1 = &lt;1, 2, 3&gt;;\nv2 = &lt;4, 5, 6&gt;;\ndot_product = v1.dot(v2);  /* 32 */\n</code></pre> <p>Python equivalent requires: <code>numpy</code> library</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#built-in-error-fallback", "title": "Built-in Error Fallback", "text": "<pre><code>/* Graceful error handling */\nresult = risky_operation().iferr(0);  /* Returns 0 if operation fails */\n</code></pre> <p>Python equivalent requires: <code>try/except</code> blocks</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#native-timedate-with-unlimited-precision", "title": "Native Time/Date with Unlimited Precision", "text": "<pre><code>/* Unlimited precision time operations */\nnow = $TIME().utc();\nfuture = now + 86400000000;  /* Add 1 day in microseconds */\n</code></pre> <p>Python equivalent requires: <code>datetime</code> with precision limits</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#direct-system-integration", "title": "Direct System Integration", "text": "<pre><code>/* Access system information directly */\nversion = $sys().getenv($VERSION);\nplatform = $sys().getenv($PLATFORM);\n</code></pre> <p>Python equivalent requires: <code>sys</code>, <code>platform</code>, and <code>os</code> modules</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Metaprogramming: <code>exec()</code>, <code>eval()</code> - Use Grapa's built-in code generation</li> <li>Descriptors: - Use regular properties</li> <li>Custom metaclasses: - Use regular classes</li> <li>Contextlib utilities: - Use direct method calls</li> <li>Inspect module: - Use Grapa's reflection capabilities</li> <li>Ast module: - Use Grapa's built-in parsing</li> <li>Dis module: - Use Grapa's execution tracing</li> <li>Pickle: - Use Grapa's serialization</li> <li>Shelve: - Use Grapa's persistent storage</li> <li>Multiprocessing: - Use Grapa's built-in parallelism</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, async/await patterns are replaced by Grapa's built-in parallel processing with <code>.map()</code> and <code>.filter()</code>.</p> <p>Note: Grapa grep returns results as a structured array (list of strings), not a concatenated string. This is different from most CLI tools and allows for more precise, programmatic handling. This affects edge cases (like empty pattern matches and invert matches) and should be considered when migrating scripts or tests.</p>"}, {"location": "migrations/PYTHON_TO_GRAPA_MIGRATION/#custom-match-function-for-regex", "title": "Custom match() Function for Regex", "text": "<p>Python users often use <code>re.match</code> or <code>re.search</code> for regex checks. You can define a similar function in Grapa:</p> <pre><code># Define a match function that returns true if the pattern is found\nmatch = op(\"text\"=\"\", \"pattern\"=\"\") {\n    text.grep(pattern, \"x\").len() &gt; 0;\n};\n\n# Usage\nif (match(\"hello world\", \"world\")) {\n    \"Found!\".echo();\n} else {\n    \"Not found.\".echo();\n}\n</code></pre> <p>This is a handy workaround until Grapa adds a native <code>.match()</code> method.</p>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/", "title": "Ruby-to-Grapa Migration Guide", "text": "<p>Important: Access Patterns for .get() and Indexing (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation $ARRAY \u2717 \u2717 \u2713 \u2014 $LIST \u2717 \u2717 \u2713 \u2713 $file \u2713 \u2717 \u2014 \u2014 $TABLE \u2713 \u2717 \u2014 \u2014 $OBJ \u2717 \u2717 \u2713 \u2713 $STR \u2717 \u2717 \u2713 \u2014 <p>See Basic Syntax Guide for details.</p>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#common-ruby-to-grapa-mappings", "title": "Common Ruby-to-Grapa Mappings", "text": "Ruby Grapa Equivalent <code>require 'json'</code> <code>$file().get(\"file.json\").decode(\"JSON\")</code> <code>File.write('file.txt', d)</code> <code>$file().set(\"file.txt\", d)</code> <code>raise</code> <code>exit</code> <code>Thread.new { ... }</code> <code>$thread().start(op() { ... })</code> <code>sleep 1</code> <code>$sys().sleep(1000)</code> <code>ENV['HOME']</code> <code>$sys().getenv($HOME)</code> <code>system('ls')</code> <code>$file().ls()</code> <code>exit</code> <code>exit</code> <code>class Foo; end</code> <code>class Foo {}</code> <code>module Bar; end</code> WIP <code>include Bar</code> WIP <code>attr_accessor :x</code> <code>obj.x</code> (direct property access) <code>@x</code> <code>@x</code> (reference variable by name) <code>@@x</code> <code>$global.x</code> or <code>$root.x</code> (global/root scope) <code>$x</code> <code>$global.x</code> <code>:symbol</code> WIP <code>lambda { |x| ... }</code> <code>op(x){...}</code> or <code>op(x)(\"...\")</code> <code>proc { |x| ... }</code> <code>op(x){...}</code> <code>method(:foo)</code> <code>obj.getname()</code> (partial reflection) <code>send(:foo)</code> WIP <code>respond_to?(:foo)</code> WIP <code>Object.new</code> <code>obj {}</code> <code>self</code> <code>self</code> <code>super</code> <code>super</code> <code>yield</code> WIP <code>block_given?</code> WIP <code>begin ... ensure ... end</code> WIP <code>alias :foo :bar</code> WIP <code>undef :foo</code> WIP <code>defined?(foo)</code> WIP <code>__FILE__</code> WIP <code>__LINE__</code> WIP"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#notes", "title": "Notes", "text": "<ul> <li>See Operators and System docs for more details.</li> <li>Grapa supports variable scoping with <code>$global</code>, <code>$local</code>, and <code>$root</code>.</li> <li>Use <code>@x</code> to reference a variable by name.</li> <li>Use <code>$sys().getenv()</code> for environment variables.</li> <li>Use <code>$thread()</code> for threading and <code>$sys().sleep()</code> for sleep.</li> <li>Use <code>op(){}</code> for lambdas and function definitions. </li> </ul>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#ruby-to-grapa-migration-guide-wip-features", "title": "Ruby-to-Grapa Migration Guide (WIP Features)", "text": ""}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#main-table-core-gaps-tracked-for-enhancement", "title": "Main Table: Core Gaps (Tracked for Enhancement)", "text": "Ruby Feature Grapa Equivalent Status/Note <code>alias :foo :bar</code> \u2014 GAP: Meta-programming not yet supported <code>undef :foo</code> \u2014 GAP: Meta-programming not yet supported <code>defined?(foo)</code> \u2014 GAP: Meta-programming not yet supported <code>__FILE__</code> \u2014 GAP: No file macro <code>__LINE__</code> \u2014 GAP: No line macro <code>yield</code> \u2014 GAP: Block/yield not supported <code>block_given?</code> \u2014 GAP: Block/yield not supported <code>begin ... ensure ... end</code> \u2014 GAP: No ensure/finally"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "Ruby Feature Grapa Equivalent Note <code>respond_to?(:foo)</code> \u2014 Reflection, rarely needed <code>send(:foo)</code> \u2014 Reflection, rarely needed <code>:symbol</code> \u2014 Ruby-specific, not common <code>class inheritance</code> <code>class (ParentClass)</code> Grapa supports inheritance <code>method overriding</code> \u2014 Use regular method definitions <code>object/class composition</code> <code>class {...}</code>/object Grapa supports composition"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "Ruby Feature Grapa Equivalent Note <code>module Bar; end</code> \u2014 Ruby module system, not relevant <code>include Bar</code> \u2014 Ruby module system, not relevant"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some Ruby idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Meta-programming: <code>alias</code>, <code>undef</code>, <code>defined?</code> - No meta-programming capabilities</li> <li>File/line macros: <code>__FILE__</code>, <code>__LINE__</code> - No file/line macros</li> <li>Block/yield: <code>yield</code>, <code>block_given?</code> - No block/yield mechanism</li> <li>Ensure/finally: <code>begin ... ensure ... end</code> - No ensure/finally mechanism</li> <li>Symbols: <code>:symbol</code> - No symbol type</li> <li>Method reflection: <code>respond_to?</code>, <code>send</code> - Limited reflection capabilities</li> <li>Module system: <code>module</code>, <code>include</code> - No module system</li> <li>Mixins: - No mixin system</li> <li>Singleton classes: - No singleton class system</li> <li>Method missing: - No method missing mechanism</li> <li>Method aliasing: - No method aliasing</li> <li>Method undefining: - No method undefining</li> <li>Method redefinition: - No method redefinition</li> <li>Method visibility: <code>private</code>, <code>protected</code> - No access control</li> <li>Method arity: - No method arity system</li> <li>Method parameters: - No method parameter system</li> <li>Method defaults: - No method default parameters</li> <li>Method splat: - No splat operator</li> <li>Method keyword args: - No keyword arguments</li> </ul>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#nice-to-have_1", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Class inheritance: - Use object composition</li> <li>Method overriding: - Use regular method definitions</li> <li>Method super: - Use regular method calls</li> <li>Method chaining: - Use regular method calls</li> <li>Method composition: - Use function composition</li> <li>Method currying: - Use function composition</li> <li>Method partial application: - Use function composition</li> <li>Method memoization: - Use caching</li> <li>Method caching: - Use caching</li> <li>Method optimization: - Use Grapa's built-in optimization</li> </ul>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#rarely-used_1", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Ruby-specific features: - Use Grapa equivalents</li> <li>Ruby gems: - Use Grapa's library system</li> <li>Ruby bundler: - Use Grapa's dependency management</li> <li>Ruby rake: - Use Grapa's build system</li> <li>Ruby irb: - Use Grapa's REPL</li> <li>Ruby pry: - Use Grapa's debugging tools</li> <li>Ruby rspec: - Use Grapa's testing framework</li> <li>Ruby minitest: - Use Grapa's testing framework</li> <li>Ruby cucumber: - Use Grapa's testing framework</li> <li>Ruby capybara: - Use Grapa's testing framework</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, Ruby's meta-programming is replaced by Grapa's built-in code generation, and Ruby's blocks are replaced by Grapa's function composition.</p>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer Ruby-style function calls, you can define your own <code>puts()</code> function in Grapa:</p> <pre><code># Define a puts function similar to Ruby\nputs = op(\"value\"=\"\"){value.echo();};\nputs(\"Hello from Grapa!\");\n</code></pre> <p>This can make migration easier for those used to Ruby's <code>puts()</code> or similar functions.</p> <p>Advanced: Grapa also allows advanced users to customize or extend the language syntax using <code>$RULE</code> or by modifying <code>$global</code> rules. This enables you to inject your own grammar or override built-in behaviors to match your preferred style. For most users, we recommend learning the canonical Grapa method syntax, but this flexibility is available if needed.</p>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#see-also", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more Ruby idioms you want mapped to Grapa, please open an issue or PR!</p>"}, {"location": "migrations/RUBY_TO_GRAPA_MIGRATION/#custom-match-function-for-regex", "title": "Custom match() Function for Regex", "text": "<p>Ruby users often use <code>str.match</code> for regex checks. You can define a similar function in Grapa:</p> <pre><code># Define a match function that returns true if the pattern is found\nmatch = op(\"text\"=\"\", \"pattern\"=\"\") {\n    text.grep(pattern, \"x\").len() &gt; 0;\n};\n\n# Usage\nif (match(\"hello world\", \"world\")) {\n    \"Found!\".echo();\n} else {\n    \"Not found.\".echo();\n}\n</code></pre> <p>This is a handy workaround until Grapa adds a native <code>.match()</code> method.</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/", "title": "Rust-to-Grapa Migration Guide", "text": "<p>Important: Access Patterns for .get() and Indexing (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation $ARRAY \u2717 \u2717 \u2713 \u2014 $LIST \u2717 \u2717 \u2713 \u2713 $file \u2713 \u2717 \u2014 \u2014 $TABLE \u2713* \u2717 \u2014 \u2014 $OBJ \u2717 \u2717 \u2717 \u2713 *$TABLE .get() requires two arguments: key and field. <ul> <li>For $LIST and $OBJ, use bracket or dot notation (e.g., obj[\"key\"], obj.key, obj[2]).</li> <li>For $ARRAY, use bracket notation (e.g., arr[1]).</li> <li>Only $file and $TABLE support .get().</li> <li>This is based on direct testing in Grapa v0.0.39.</li> </ul> <p>This guide helps Rust users transition to Grapa by mapping common Rust idioms, patterns, and code to their Grapa equivalents.</p> <p>See Also: - Basic Syntax Guide - Operator Reference</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#syntax-mapping-table", "title": "Syntax Mapping Table", "text": "Rust Grapa <code>let mut x = 5;</code> <code>x = 5;</code> <code>x += 1;</code> <code>x += 1;</code> <code>let s = String::from(\"hi\");</code> <code>s = \"hi\";</code> <code>s.push_str(\"!\");</code> <code>s += \"!\";</code> <code>let arr = vec![1,2,3];</code> <code>arr = [1, 2, 3];</code> <code>arr[0]</code> <code>arr[0]</code><code>arr.get(0)</code> <code>let map = HashMap::new();</code> <code>obj = {}</code> <code>map[\"key\"]</code> <code>obj[\"key\"]</code><code>obj.key</code><code>obj.\"key\"</code> <code>for x in arr { ... }</code> <code>i = 0; while (i &lt; arr.len()) { x = arr[i]; ...; i += 1; }</code><code>arr.map(op(x) { ... })</code><code>(n).range(0,1).map(op(i) { ... })</code> <code>if cond { ... } else { ... }</code> <code>if (cond) { ... } else { ... }</code> <code>fn f(x: i32) -&gt; i32 { ... }</code> <code>f = op(x) { ... };</code> <code>/* comment */</code> (block only, own line) <code>/* comment */</code> (block only, own line) <code>Some(x)</code> / <code>None</code> <code>x</code> / <code>null</code> <code>Result&lt;T, E&gt;</code> <code>value or $ERR</code> <code>match x { ... }</code> <code>if/else</code> chain <code>arr.iter().map(|x| x+1)</code> <code>arr.map(op(x) { x + 1; })</code> <code>arr.iter().filter(|x| *x &gt; 0)</code> <code>arr.filter(op(x) { x &gt; 0; })</code> <code>arr.iter().fold(0, |a, x| a + x)</code> <code>arr.reduce(op(a, x) { a + x; }, 0)</code> <code>arr.len()</code> <code>arr.len()</code> <code>format!(\"{} {}\", a, b)</code> <code>(\"\" + a.str() + \" \" + b.str())</code> <p>Note: Both <code>x = x + 1;</code> and <code>x += 1;</code> (and <code>s = s + \"x\";</code> and <code>s += \"x\";</code>) are valid in Grapa. The <code>+=</code> form is idiomatic and preferred in most cases.</p> <p>Note: <code>.get(\"key\")</code> is only for <code>$file</code> and <code>$TABLE</code>. For <code>$LIST</code>/<code>$OBJ</code>, use <code>obj[\"key\"]</code>, <code>obj.key</code>, or <code>obj.\"key\"</code>. For <code>$ARRAY</code>, use <code>arr[index]</code> or <code>arr.get(index)</code>.</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#access-patterns-objects-lists-arrays-files-and-tables", "title": "Access Patterns: Objects, Lists, Arrays, Files, and Tables", "text": "<p>Below are all valid ways to access elements in Grapa data structures. See the canonical Basic Syntax Guide for the latest tested rules.</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#list-and-obj", "title": "$LIST and $OBJ", "text": "<pre><code>obj = {\"a\": 1, \"b\": 2, \"c\": 3};\n\nvalue = obj[\"b\"];      /* Returns 2 */\nvalue = obj.key;        /* Returns value for key 'key' if present */\nvalue = obj.\"b\";       /* Returns 2 */\n\n/* $LIST only: */\nvalue = obj[1];         /* Returns 2 (by index) */\nname = obj.getname(1);  /* Returns \"b\" (key name at index 1) */\n</code></pre> <ul> <li>Dot notation (<code>obj.key</code>) and bracket notation (<code>obj[\"key\"]</code>) are both valid for $LIST/$OBJ.</li> <li><code>.get()</code> is NOT valid for $LIST/$OBJ.</li> </ul>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#array", "title": "$ARRAY", "text": "<pre><code>arr = [10, 20, 30];\n\nvalue = arr[1];         /* Returns 20 */\nvalue = arr.get(1);     /* Returns 20 */\n</code></pre> <ul> <li>Use bracket notation or <code>.get(index)</code> for $ARRAY.</li> <li>Dot notation and <code>.get(\"key\")</code> are NOT valid for $ARRAY.</li> </ul>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#file", "title": "$file", "text": "<pre><code>files = $file().ls();\nfile_info = files.get(0);   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(index)</code> for $file results.</li> <li>Bracket and dot notation are NOT valid for $file.</li> </ul>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#table", "title": "$TABLE", "text": "<pre><code>table = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"user1\", \"Alice\", \"name\");\n\nvalue = table.get(\"user1\", \"name\");   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(key, field)</code> for $TABLE.</li> <li>Bracket and dot notation are NOT valid for $TABLE.</li> </ul> <p>Reference Table: | Type      | .get(\"key\") | .get(index) | Bracket Notation | Dot Notation | |-----------|:-----------:|:-----------:|:----------------:|:------------:| | $ARRAY    |      \u2717      |     \u2717      |       \u2713         |      \u2014       | | $LIST     |      \u2717      |     \u2717      |       \u2713         |     \u2713       | | $file     |      \u2713      |     \u2717      |        \u2014         |      \u2014       | | $TABLE    |     \u2713      |     \u2717      |        \u2014         |      \u2014       | | $OBJ      |      \u2717      |     \u2717      |       \u2717         |     \u2713       | $TABLE .get() requires two arguments: key and field.</p> <p>See Basic Syntax Guide for empirical test results and future updates.</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#common-pitfalls", "title": "Common Pitfalls", "text": "<ul> <li>No <code>for</code>/<code>foreach</code> loops\u2014use <code>while</code> or <code>.range()</code>+functional methods</li> <li>No <code>match</code>\u2014use <code>if/else</code> chains</li> <li>No <code>.push()</code>/<code>.append()</code>\u2014use <code>+=</code> for append</li> <li>No <code>/* comment */</code> comments\u2014only block comments (<code>/* ... */</code>), always on their own line</li> <li>No implicit truthy/falsy\u2014use explicit boolean checks</li> <li>All statements and blocks must end with a semicolon (<code>;</code>)</li> <li>Use <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> as methods, not global functions</li> <li>Use <code>.range()</code> for sequence generation instead of manual while loops</li> <li>Use <code>.range()</code> with <code>.reduce()</code> for for-loop-like accumulation or collection tasks</li> <li>Use <code>.range().map()</code> and <code>.range().filter()</code> for parallel sequence generation and filtering. For large arrays, always specify a thread count to avoid too many threads</li> <li>Use <code>.iferr()</code> for simple error fallback; use <code>if (result.type() == $ERR)</code> only for explicit error handling</li> </ul>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#example-code-pairs", "title": "Example Code Pairs", "text": "<p>Rust: <pre><code>// Sum squares of even numbers\nlet result = arr.iter().filter(|x| *x % 2 == 0).map(|x| x * x).sum::&lt;i32&gt;();\n</code></pre> Grapa: <pre><code>result = arr.filter(op(x) { x % 2 == 0; }).map(op(x) { x * x; }).reduce(op(a, b) { a + b; }, 0);\n</code></pre></p> <p>Rust: <pre><code>// Read file lines\nuse std::fs;\nlet lines = fs::read_to_string(\"file.txt\").unwrap().lines().collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre> Grapa: <pre><code>lines = $file().read(\"file.txt\").split(\"\\n\");\n</code></pre></p> <p>Rust: <pre><code>// HashMap access\nlet value = map[\"key\"];\n</code></pre> Grapa: <pre><code>value = obj[\"key\"];\nvalue = obj.key;\nvalue = obj.\"key\";\n</code></pre></p> <p>Rust: <pre><code>// File access (custom struct or map)\nlet value = file[\"key\"];\n</code></pre> Grapa: <pre><code>value = file.get(\"key\");\n</code></pre></p> <p>Rust: <pre><code>// Generate numbers 0..9\nlet seq: Vec&lt;_&gt; = (0..10).collect();\n</code></pre> Grapa: <pre><code>seq = (10).range(0,1);\n</code></pre></p> <p>Rust: <pre><code>// Sum numbers 0..9\nlet sum: i32 = (0..10).sum();\n</code></pre> Grapa: <pre><code>sum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);\n</code></pre></p> <p>Rust: <pre><code>// Collect even numbers 0..9\nlet evens: Vec&lt;_&gt; = (0..10).filter(|x| x % 2 == 0).collect();\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).filter(op(x) { x % 2 == 0; });\n</code></pre></p> <p>Rust: <pre><code>// Error fallback\nlet result = some_operation().unwrap_or(0);\n</code></pre> Grapa: <pre><code>result = some_operation().iferr(0);\n</code></pre></p> <p>Warning: <code>.map()</code> and <code>.filter()</code> are parallel by default. For large arrays, specify a thread count: <pre><code>big = (1000000).range(0,1).map(op(x) { x * x; }, 8);  // Limit to 8 threads\n</code></pre></p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#see-also", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more Rust idioms you want mapped to Grapa, please open an issue or PR! </p> <p>Clarification on .get() Usage: - <code>.get()</code> is required for <code>$file</code> and <code>$TABLE</code> access. - <code>.get()</code> is not supported for <code>$ARRAY</code>, <code>$LIST</code>, or <code>$OBJ</code> as of this writing. - Use bracket and dot notation for <code>$ARRAY</code>, <code>$LIST</code>, and <code>$OBJ</code>. - If more objects support <code>.get()</code> in the future, this guide will be updated. </p> <p>Comment Style: - Only block comments (<code>/* ... */</code>) are supported in Grapa, and must always be on their own line. - <code>//</code> and <code>#</code> comments are not supported and will cause errors. </p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some Rust idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Ownership system: <code>let x = String::new();</code> - Grapa has automatic memory management</li> <li>Static typing: <code>let x: i32</code> - Grapa uses dynamic typing by design (see note below)</li> <li>Borrowing: <code>&amp;mut x</code> - Grapa has no borrowing, all values are owned</li> <li>Lifetimes: <code>'a</code> - Grapa has automatic lifetime management</li> <li>Unsafe blocks: <code>unsafe { }</code> - Grapa is memory-safe by design</li> <li>Raw pointers: <code>*const T</code> - Grapa has no raw pointers</li> <li>FFI: <code>extern \"C\"</code> - No direct FFI support</li> <li>Const generics: <code>[T; N]</code> - No compile-time const generics</li> <li>Higher-ranked trait bounds: <code>for&lt;'a&gt;</code> - No higher-ranked types</li> <li>Inline assembly: <code>asm!()</code> - No inline assembly</li> <li>Global allocators: - No custom allocator support</li> </ul> <p>Important Note on Dynamic Typing: Grapa's dynamic typing is a fundamental design choice, not a limitation. It enables Grapa's core strengths: - Dynamic code execution and meta-programming capabilities - Runtime type introspection with <code>.type()</code> method - Flexible data processing without compile-time type constraints - System integration that doesn't require type definitions</p> <p>Grapa provides type safety through runtime checking and rich type introspection, which is often more flexible than static typing for data processing and system integration tasks.</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Traits: <code>trait MyTrait</code> - Use object composition and duck typing</li> <li>Generics: <code>&lt;T&gt;</code> - Grapa has dynamic typing</li> <li>Pattern matching: <code>match x { Some(y) =&gt; y, None =&gt; 0 }</code> - Use <code>if/else</code> chains</li> <li>Result types: <code>Result&lt;T, E&gt;</code> - Use <code>.iferr()</code> or explicit error checking</li> <li>Option types: <code>Option&lt;T&gt;</code> - Use explicit null checks</li> <li>Macros: <code>macro_rules!</code> - Use Grapa's built-in code generation</li> <li>Associated types: <code>type Output</code> - Use regular types</li> <li>Default implementations: - Use regular method definitions</li> <li>Trait bounds: <code>where T: Display</code> - Use dynamic typing</li> <li>Impl blocks: <code>impl MyStruct</code> - Use object constructors</li> <li>Derive macros: <code>#[derive(Debug)]</code> - Use regular methods</li> <li>Structs: <code>struct MyStruct</code> - Use object constructors</li> <li>Enums: <code>enum MyEnum</code> - Use objects with type fields</li> <li>Modules: <code>mod my_module</code> - Use Grapa's file system</li> <li>Crates: - Use Grapa's library system</li> <li>Cargo: - Use Grapa's build system</li> <li>Workspaces: - Use directory organization</li> <li>Features: <code>[features]</code> - Use conditional compilation</li> <li>Dependencies: - Use Grapa's dependency management</li> <li>Publishing: - Use Grapa's distribution system</li> <li>Documentation: <code>///</code> - Use regular comments</li> </ul>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Unions: <code>union MyUnion</code> - Use regular types</li> <li>Bit fields: - Use bitwise operations</li> <li>Inline assembly: <code>asm!()</code> - Use Grapa's system calls</li> <li>Global allocators: - Use Grapa's memory management</li> <li>Custom target specifications: - Use Grapa's platform abstraction</li> <li>Linker scripts: - Use Grapa's build system</li> <li>Platform intrinsics: - Use Grapa's system integration</li> <li>SIMD: - Use Grapa's parallel processing</li> <li>Atomic operations: - Use Grapa's threading</li> <li>Memory ordering: - Use Grapa's memory model</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, Rust's ownership system is replaced by Grapa's automatic memory management, and Rust's async/await is replaced by Grapa's built-in parallel processing.</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#see-also_1", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more Rust idioms you want mapped to Grapa, please open an issue or PR!</p>"}, {"location": "migrations/RUST_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer Rust-style macro calls, you can define your own <code>println()</code> function in Grapa:</p> <pre><code>// Define a println function similar to Rust\nprintln = op(\"value\"=\"\"){value.echo();};\nprintln(\"Hello from Grapa!\");\n</code></pre>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/", "title": "Swift-to-Grapa Migration Guide", "text": "<p>Important: Access Patterns for .get() and Indexing (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation $ARRAY \u2717 \u2717 \u2713 \u2014 $LIST \u2717 \u2717 \u2713 \u2713 $file \u2713 \u2717 \u2014 \u2014 $TABLE \u2713 \u2717 \u2014 \u2014 $OBJ \u2717 \u2717 \u2713 \u2713 $STR \u2717 \u2717 \u2713 \u2014 <p>See Basic Syntax Guide for details.</p>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#swift-to-grapa-migration-guide-wip-features", "title": "Swift-to-Grapa Migration Guide (WIP Features)", "text": "<p>Note: All core language gaps are tracked internally for future development.</p>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#main-table-core-gaps-tracked-for-enhancement", "title": "Main Table: Core Gaps (Tracked for Enhancement)", "text": "Swift Feature Grapa Equivalent Status/Note <code>import Foundation</code> \u2014 GAP: No module/import system <code>protocol Baz {}</code> \u2014 GAP: No protocol/interface <code>extension Foo {}</code> \u2014 GAP: No extension support <code>defer</code> \u2014 GAP: No defer/finally <code>#file</code> \u2014 GAP: No file macro <code>#line</code> \u2014 GAP: No line macro <code>typealias Foo = Bar</code> \u2014 GAP: No typealias <code>Any</code> \u2014 GAP: No Any/advanced type <code>as?</code> (optional cast) \u2014 GAP: No optional cast <code>is</code> (type check) \u2014 GAP: No direct type check <code>guard</code> \u2014 GAP: No guard statement <code>@escaping</code> \u2014 GAP: No annotation/meta-programming <code>@objc</code> \u2014 GAP: No annotation/meta-programming"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "Swift Feature Grapa Equivalent Note <code>lazy var x: Int = ...</code> \u2014 Rarely needed, not blocking <code>var x: Int? = nil</code> \u2014 Rarely needed, not blocking <code>x ?? 0</code> \u2014 Rarely needed, not blocking <code>x?.doSomething()</code> \u2014 Rarely needed, not blocking <code>x!</code> \u2014 Rarely needed, not blocking <code>guard let x = y else { ... }</code> \u2014 Rarely needed, not blocking <code>#available(iOS 13, *)</code> \u2014 Rarely needed, not blocking <code>@available(iOS 13, *)</code> \u2014 Rarely needed, not blocking <code>struct Bar {}</code> <code>obj Bar {}</code> Use object constructors <code>class Foo {}</code> <code>class Foo {}</code> Use object constructors <code>inheritance</code> <code>class (ParentClass)</code> Grapa supports inheritance <code>method overriding</code> \u2014 Use regular method definitions <code>method overloading</code> \u2014 Use different function names <code>default parameters</code> \u2014 Use explicit checks <code>variadic parameters</code> \u2014 Use array arguments <code>inout parameters</code> \u2014 Use regular parameters <code>autoclosure</code> \u2014 Use regular closures <code>escaping closures</code> \u2014 Use regular closures"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "Swift Feature Grapa Equivalent Note <code>func foo&lt;T&gt;(x: T) -&gt; T</code> \u2014 Generics, rarely needed <code>inout</code> \u2014 Rarely needed <code>@autoclosure</code> \u2014 Rarely needed"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some Swift idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Module system: <code>import Foundation</code> - No module system</li> <li>Protocols: <code>protocol Baz {}</code> - No protocol system</li> <li>Extensions: <code>extension Foo {}</code> - No extension system</li> <li>Defer: <code>defer</code> - No defer mechanism</li> <li>File/line macros: <code>#file</code>, <code>#line</code> - No file/line macros</li> <li>Type aliases: <code>typealias Foo = Bar</code> - No type alias system</li> <li>Any type: <code>Any</code> - No Any type system</li> <li>Optional casting: <code>as?</code> - No optional casting</li> <li>Type checking: <code>is</code> - No type checking operator</li> <li>Guard statements: <code>guard</code> - No guard statement</li> <li>Annotations: <code>@escaping</code>, <code>@objc</code> - No annotation system</li> <li>Generics: <code>&lt;T&gt;</code> - No generic system</li> <li>Optionals: <code>Int?</code> - No optional type system</li> <li>Optional chaining: <code>x?.doSomething()</code> - No optional chaining</li> <li>Force unwrapping: <code>x!</code> - No force unwrapping</li> <li>Nil coalescing: <code>x ?? 0</code> - No nil coalescing</li> <li>Lazy properties: <code>lazy var</code> - No lazy property system</li> <li>Computed properties: - No computed property system</li> <li>Property observers: - No property observer system</li> <li>Access control: <code>private</code>, <code>public</code> - No access control system</li> </ul>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#nice-to-have_1", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Structs: <code>struct Bar {}</code> - Use object constructors</li> <li>Classes: <code>class Foo {}</code> - Use object constructors</li> <li>Inheritance: - Use object composition</li> <li>Method overriding: - Use regular method definitions</li> <li>Method overloading: - Use different function names</li> <li>Default parameters: - Use explicit checks</li> <li>Variadic parameters: - Use array arguments</li> <li>Inout parameters: <code>inout</code> - Use regular parameters</li> <li>Autoclosure: <code>@autoclosure</code> - Use regular closures</li> <li>Escaping closures: <code>@escaping</code> - Use regular closures</li> </ul>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#rarely-used_1", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Swift-specific features: - Use Grapa equivalents</li> <li>SwiftUI: - Use Grapa's UI system</li> <li>Combine: - Use Grapa's event system</li> <li>Core Data: - Use Grapa's data system</li> <li>Foundation: - Use Grapa's built-in functions</li> <li>UIKit: - Use Grapa's UI system</li> <li>AppKit: - Use Grapa's UI system</li> <li>Swift Package Manager: - Use Grapa's dependency management</li> <li>CocoaPods: - Use Grapa's dependency management</li> <li>Carthage: - Use Grapa's dependency management</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, Swift's optionals are replaced by Grapa's explicit null checking, and Swift's protocols are replaced by Grapa's object composition and duck typing.</p>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#common-swift-to-grapa-mappings", "title": "Common Swift-to-Grapa Mappings", "text": "Swift Grapa Equivalent <code>FileManager.default.createFile(...)</code> <code>$file().set(...)</code> <code>Thread.sleep(forTimeInterval: 1)</code> <code>$sys().sleep(1000)</code> <code>ProcessInfo.processInfo.environment[\"HOME\"]</code> <code>$sys().getenv($HOME)</code> <code>exit(0)</code> <code>exit</code> <code>class Foo {}</code> <code>class Foo {}</code> <code>struct Bar {}</code> <code>obj Bar {}</code> <code>func foo(x: Int) -&gt; Int</code> <code>op(x){...}</code> or <code>op(x)(\"...\")</code> <code>let x = ...</code> <code>x = ...</code> <code>var x = ...</code> <code>x = ...</code> <code>self</code> <code>self</code> <code>super</code> <code>super</code> <code>switch x { ... }</code> <code>switch(x) { ... }</code> <code>x = condition ? a : b</code> <code>x = (condition) ? a : b</code> <code>try { ... } catch { ... }</code> <code>try { ... } catch (err) { ... }</code> <code>@escaping</code> WIP <code>@objc</code> WIP"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#notes", "title": "Notes", "text": "<ul> <li>See Operators and System docs for more details.</li> <li>Grapa supports variable scoping with <code>$global</code>, <code>$local</code>, and <code>$root</code>.</li> <li>Use <code>@x</code> to reference a variable by name.</li> <li>Use <code>$sys().getenv()</code> for environment variables.</li> <li>Use <code>$thread()</code> for threading and <code>$sys().sleep()</code> for sleep.</li> <li>Use <code>op(){}</code> for lambdas and function definitions. </li> </ul>"}, {"location": "migrations/SWIFT_TO_GRAPA_MIGRATION/#customizing-grapa-for-familiar-syntax", "title": "Customizing Grapa for Familiar Syntax", "text": "<p>If you prefer Swift-style function calls, you can define your own <code>print()</code> function in Grapa:</p> <pre><code>// Define a print function similar to Swift\nprint = op(\"value\"=\"\"){value.echo();};\nprint(\"Hello from Grapa!\");\n</code></pre>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/", "title": "TypeScript-to-Grapa Migration Guide", "text": "<p>Important: Access Patterns for .get() and Indexing (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation $ARRAY \u2717 \u2717 \u2713 \u2014 $LIST \u2717 \u2717 \u2713 \u2713 $file \u2713 \u2717 \u2014 \u2014 $TABLE \u2713* \u2717 \u2014 \u2014 $OBJ \u2717 \u2717 \u2717 \u2713 *$TABLE .get() requires two arguments: key and field. <ul> <li>For $LIST and $OBJ, use bracket or dot notation (e.g., obj[\"key\"], obj.key, obj[2]).</li> <li>For $ARRAY, use bracket notation (e.g., arr[1]).</li> <li>Only $file and $TABLE support .get().</li> <li>This is based on direct testing in Grapa v0.0.39.</li> </ul> <p>This guide helps TypeScript users transition to Grapa by mapping common TypeScript idioms, patterns, and code to their Grapa equivalents.</p> <p>See Also: - Basic Syntax Guide - Operator Reference</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#syntax-mapping-table", "title": "Syntax Mapping Table", "text": "TypeScript Grapa <code>let x: number = 5;</code> <code>x = 5;</code> <code>x += 1;</code> <code>x += 1;</code> <code>let s: string = \"hi\";</code> <code>s = \"hi\";</code> <code>s += \"!\";</code> <code>s += \"!\";</code> <code>let arr: number[] = [1,2,3];</code> <code>arr = [1, 2, 3];</code> <code>arr[0]</code> <code>arr[0]</code><code>arr.get(0)</code> <code>let obj: {[key: string]: number} = {};</code> <code>obj = {}</code> <code>obj[\"key\"]</code> <code>obj[\"key\"]</code><code>obj.key</code><code>obj.\"key\"</code> <code>for (let i=0; i&lt;arr.length; i++)</code> <code>i = 0; while (i &lt; arr.len()) { ...; i += 1; }</code><code>arr.map(op(x) { ... })</code><code>(n).range(0,1).map(op(i) { ... })</code> <code>if (cond) { ... } else { ... }</code> <code>if (cond) { ... } else { ... }</code> <code>function f(x: number): number { ... }</code> <code>f = op(x) { ... };</code> <code>/* comment */</code> (block only, own line) <code>/* comment */</code> (block only, own line) <code>null/undefined</code> <code>null</code> <code>arr.map(f)</code> <code>arr.map(op(x) { f(x); })</code> <code>arr.filter(f)</code> <code>arr.filter(op(x) { f(x); })</code> <code>arr.reduce(f, init)</code> <code>arr.reduce(op(a, b) { f(a, b); }, init)</code> <code>arr.length</code> <code>arr.len()</code> <code>x = x + 1</code> <code>x = x + 1;</code><code>x += 1;</code> (preferred) <code>s = s + \"x\"</code> <code>s = s + \"x\";</code><code>s += \"x\";</code> (preferred) <p>Note: Both <code>x = x + 1;</code> and <code>x += 1;</code> (and <code>s = s + \"x\";</code> and <code>s += \"x\";</code>) are valid in Grapa. The <code>+=</code> form is idiomatic and preferred in most cases.</p> <p>Note: <code>.get(\"key\")</code> is only for <code>$file</code> and <code>$TABLE</code>. For <code>$LIST</code>/<code>$OBJ</code>, use <code>obj[\"key\"]</code>, <code>obj.key</code>, or <code>obj.\"key\"</code>. For <code>$ARRAY</code>, use <code>arr[index]</code> or <code>arr.get(index)</code>.</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#access-patterns-objects-lists-arrays-files-and-tables", "title": "Access Patterns: Objects, Lists, Arrays, Files, and Tables", "text": "<p>Below are all valid ways to access elements in Grapa data structures. See the canonical Basic Syntax Guide for the latest tested rules.</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#list-and-obj", "title": "$LIST and $OBJ", "text": "<pre><code>obj = {\"a\": 1, \"b\": 2, \"c\": 3};\n\nvalue = obj[\"b\"];      /* Returns 2 */\nvalue = obj.key;        /* Returns value for key 'key' if present */\nvalue = obj.\"b\";       /* Returns 2 */\n\n/* $LIST only: */\nvalue = obj[1];         /* Returns 2 (by index) */\nname = obj.getname(1);  /* Returns \"b\" (key name at index 1) */\n</code></pre> <ul> <li>Dot notation (<code>obj.key</code>) and bracket notation (<code>obj[\"key\"]</code>) are both valid for $LIST/$OBJ.</li> <li><code>.get()</code> is NOT valid for $LIST/$OBJ.</li> </ul>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#array", "title": "$ARRAY", "text": "<pre><code>arr = [10, 20, 30];\n\nvalue = arr[1];         /* Returns 20 */\nvalue = arr.get(1);     /* Returns 20 */\n</code></pre> <ul> <li>Use bracket notation or <code>.get(index)</code> for $ARRAY.</li> <li>Dot notation and <code>.get(\"key\")</code> are NOT valid for $ARRAY.</li> </ul>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#file", "title": "$file", "text": "<pre><code>files = $file().ls();\nfile_info = files.get(0);   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(index)</code> for $file results.</li> <li>Bracket and dot notation are NOT valid for $file.</li> </ul>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#table", "title": "$TABLE", "text": "<pre><code>table = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"user1\", \"Alice\", \"name\");\n\nvalue = table.get(\"user1\", \"name\");   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get(key, field)</code> for $TABLE.</li> <li>Bracket and dot notation are NOT valid for $TABLE.</li> </ul> <p>Reference Table: | Type      | .get(\"key\") | .get(index) | Bracket Notation | Dot Notation | |-----------|:-----------:|:-----------:|:----------------:|:------------:| | $ARRAY    |      \u2717      |     \u2717      |       \u2713         |      \u2014       | | $LIST     |      \u2717      |     \u2717      |       \u2713         |     \u2713       | | $file     |      \u2713      |     \u2717      |        \u2014         |      \u2014       | | $TABLE    |     \u2713      |     \u2717      |        \u2014         |      \u2014       | | $OBJ      |      \u2717      |     \u2717      |       \u2717         |     \u2713       | $TABLE .get() requires two arguments: key and field.</p> <p>See Basic Syntax Guide for empirical test results and future updates.</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#common-pitfalls", "title": "Common Pitfalls", "text": "<ul> <li>No <code>for</code>/<code>foreach</code> loops\u2014use <code>while</code> or <code>.range()</code>+functional methods</li> <li>No <code>.push()</code>/<code>.pop()</code>\u2014use <code>+=</code> and manual index for pop</li> <li>No <code>/* comment */</code> comments\u2014only block comments (<code>/* ... */</code>), always on their own line</li> <li>No implicit truthy/falsy\u2014use explicit boolean checks</li> <li>All statements and blocks must end with a semicolon (<code>;</code>)</li> <li>Use <code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code> as methods, not global functions</li> <li>Use <code>.range()</code> for sequence generation instead of manual while loops</li> <li>Use <code>.range()</code> with <code>.reduce()</code> for for-loop-like accumulation or collection tasks</li> <li>Use <code>.range().map()</code> and <code>.range().filter()</code> for parallel sequence generation and filtering. For large arrays, always specify a thread count to avoid too many threads</li> <li>Use <code>.iferr()</code> for simple error fallback; use <code>if (result.type() == $ERR)</code> only for explicit error handling</li> </ul>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#example-code-pairs", "title": "Example Code Pairs", "text": "<p>TypeScript: <pre><code>// Sum squares of even numbers\nlet result = arr.filter(x =&gt; x % 2 === 0).map(x =&gt; x * x).reduce((a, b) =&gt; a + b, 0);\n</code></pre> Grapa: <pre><code>result = arr.filter(op(x) { x % 2 == 0; }).map(op(x) { x * x; }).reduce(op(a, b) { a + b; }, 0);\n</code></pre></p> <p>TypeScript: <pre><code>// Read file lines\nlet lines = fs.readFileSync('file.txt', 'utf-8').split('\\n');\n</code></pre> Grapa: <pre><code>lines = $file().read(\"file.txt\").split(\"\\n\");\n</code></pre></p> <p>TypeScript: <pre><code>// Object access\nlet value = obj[\"key\"];\n</code></pre> Grapa: <pre><code>value = obj[\"key\"];\nvalue = obj.key;\nvalue = obj.\"key\";\n</code></pre></p> <p>TypeScript: <pre><code>// File access\nlet value = file[\"key\"];\n</code></pre> Grapa: <pre><code>value = file.get(\"key\");\n</code></pre></p> <p>TypeScript: <pre><code>// Generate numbers 0..9\nlet seq = Array.from({length: 10}, (_, i) =&gt; i);\n</code></pre> Grapa: <pre><code>seq = (10).range(0,1);\n</code></pre></p> <p>TypeScript: <pre><code>// Sum numbers 0..9\nlet sum = Array.from({length: 10}, (_, i) =&gt; i).reduce((a, x) =&gt; a + x, 0);\n</code></pre> Grapa: <pre><code>sum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);\n</code></pre></p> <p>TypeScript: <pre><code>// Collect even numbers 0..9\nlet evens = Array.from({length: 10}, (_, i) =&gt; i).filter(x =&gt; x % 2 === 0);\n</code></pre> Grapa: <pre><code>evens = (10).range(0,1).filter(op(x) { x % 2 == 0; });\n</code></pre></p> <p>TypeScript: <pre><code>// Error fallback\nlet result = someOperation() ?? 0;\n</code></pre> Grapa: <pre><code>result = someOperation().iferr(0);\n</code></pre></p> <p>Warning: <code>.map()</code> and <code>.filter()</code> are parallel by default. For large arrays, specify a thread count: <pre><code>big = (1000000).range(0,1).map(op(x) { x * x; }, 8);  // Limit to 8 threads\n</code></pre></p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#see-also", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more TypeScript idioms you want mapped to Grapa, please open an issue or PR! </p> <p>Clarification on .get() Usage: - <code>.get()</code> is required for <code>$file</code> and <code>$TABLE</code> access. - <code>.get()</code> is not supported for <code>$ARRAY</code>, <code>$LIST</code>, or <code>$OBJ</code> as of this writing. - Use bracket and dot notation for <code>$ARRAY</code>, <code>$LIST</code>, and <code>$OBJ</code>. - If more objects support <code>.get()</code> in the future, this guide will be updated. </p> <p>Comment Style: - Only block comments (<code>/* ... */</code>) are supported in Grapa, and must always be on their own line. - <code>//</code> and <code>#</code> comments are not supported and will cause errors. </p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#work-in-progress-wip-items", "title": "Work-in-Progress (WIP) Items", "text": "<p>Some TypeScript idioms don't have direct Grapa equivalents yet. These are categorized by priority:</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#core-gaps-true-language-gaps", "title": "Core Gaps (True Language Gaps)", "text": "<p>These represent fundamental language features that genuinely cannot be accomplished in Grapa:</p> <ul> <li>Static typing: <code>let x: number</code> - Grapa uses dynamic typing by design (see note below)</li> <li>Type aliases: <code>type MyType = string</code> - No type alias system</li> <li>Union types: <code>string | number</code> - No union type system</li> <li>Intersection types: <code>A &amp; B</code> - No intersection type system</li> <li>Literal types: <code>\"hello\"</code> - No literal type system</li> <li>Template literal types: <code>`Hello ${string}`</code> - No template literal types</li> <li>Conditional types: <code>T extends U ? X : Y</code> - No conditional type system</li> <li>Mapped types: <code>{ [K in keyof T]: T[K] }</code> - No mapped type system</li> <li>Utility types: <code>Partial&lt;T&gt;</code>, <code>Required&lt;T&gt;</code> - No utility type system</li> <li>Namespace: <code>namespace MyNamespace</code> - Grapa has dynamic namespaces (see note below)</li> <li>Declaration merging: - No declaration merging</li> <li>Const assertions: <code>as const</code> - Grapa has superior runtime const protection (see note below)</li> </ul> <p>Important Note on Dynamic Typing: Grapa's dynamic typing is a fundamental design choice, not a limitation. It enables Grapa's core strengths: - Dynamic code execution and meta-programming capabilities - Runtime type introspection with <code>.type()</code> method - Flexible data processing without compile-time type constraints - System integration that doesn't require type definitions</p> <p>Grapa provides type safety through runtime checking and rich type introspection, which is often more flexible than static typing for data processing and system integration tasks.</p> <p>Important Note on Namespaces: Grapa has a dynamic namespace system that's more flexible than TypeScript's static namespaces: - $global namespace: Global variables accessible everywhere - $local namespace: Function-local variables (automatic) - Dynamic namespace creation: Namespaces are created automatically for each execution context - No explicit namespace declarations: Namespaces are managed automatically by the execution tree - Hierarchical access: Variables can be accessed from parent namespaces</p> <p>Important Note on Const Protection: Grapa's <code>const</code> operator provides superior runtime protection compared to TypeScript's <code>as const</code>: - Runtime modification prevention: Grapa's const prevents actual modification at runtime - Dynamic control: Can toggle const on/off with <code>.setconst(false/true)</code> - Performance optimization: Designed for caching and optimization - Thread safety: Prevents blocking on access for concurrent threads - No static type narrowing: Grapa uses dynamic typing, so no compile-time literal type inference</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#nice-to-have", "title": "Nice to Have", "text": "<p>These would improve developer experience but aren't essential:</p> <ul> <li>Interfaces: <code>interface MyInterface</code> - Use object composition and duck typing</li> <li>Generics: <code>&lt;T&gt;</code> - Grapa has dynamic typing</li> <li>Type guards: <code>x is string</code> - Use <code>.type()</code> checks</li> <li>Type assertions: <code>x as string</code> - Use explicit conversion</li> <li>Modules: <code>import/export</code> - Use Grapa's file system</li> <li>Decorators: <code>@decorator</code> - Use function composition</li> <li>Enums: <code>enum MyEnum</code> - Use objects with constants</li> <li>Class syntax: <code>class MyClass</code> - Use object constructors</li> <li>Access modifiers: <code>private</code>, <code>public</code> - Use naming conventions</li> <li>Abstract classes: <code>abstract class</code> - Use regular classes</li> <li>Method overloading: - Use different function names</li> <li>Index signatures: <code>[key: string]: any</code> - Use regular objects</li> <li>Call signatures: - Use regular functions</li> <li>Construct signatures: - Use object constructors</li> <li>Generic constraints: <code>T extends U</code> - Use runtime checks</li> <li>Default type parameters: <code>&lt;T = string&gt;</code> - Use default values</li> <li>Infer types: <code>infer U</code> - Use dynamic typing</li> </ul>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#rarely-used", "title": "Rarely Used", "text": "<p>These are advanced features that most developers won't miss:</p> <ul> <li>Conditional types: - Use runtime checks</li> <li>Template literal types: - Use regular strings</li> <li>Mapped types: - Use object manipulation</li> <li>Utility types: - Use object manipulation</li> <li>Declaration merging: - Use object composition</li> <li>Ambient declarations: <code>declare</code> - Use regular definitions</li> <li>Triple-slash directives: - Use regular imports</li> <li>Module augmentation: - Use object composition</li> <li>Type-only imports: <code>import type</code> - Use regular imports</li> <li>Satisfies operator: - Use regular assignment</li> </ul> <p>Note: Many \"missing\" features are actually available in Grapa through different mechanisms. For example, TypeScript's static typing is replaced by Grapa's dynamic typing with runtime type checking via <code>.type()</code>.</p>"}, {"location": "migrations/TYPESCRIPT_TO_GRAPA_MIGRATION/#see-also_1", "title": "See Also", "text": "<ul> <li>Basic Syntax Guide</li> <li>Operator Reference</li> </ul> <p>If you have more TypeScript idioms you want mapped to Grapa, please open an issue or PR!</p>"}, {"location": "obj/document/", "title": "From $OBJ", "text": "<p>See also: Web/Data Scraping &amp; Automation Best Practices</p> <p>Best Practices: - Always check for <code>$ERR</code> when accessing attributes or elements that may not exist. - Use functional chaining (<code>.map()</code>, <code>.reduce()</code>, <code>.filter()</code>) for processing extraction results. - Prefer <code>.findall()</code> for complex queries and nested extraction patterns.</p>", "tags": ["user", "highlevel"]}, {"location": "obj/document/#data-jsonrawdata", "title": "data = json(rawdata)", "text": "", "tags": ["user", "highlevel"]}, {"location": "obj/document/#data-xmlrawxml", "title": "data = xml(rawxml)", "text": "", "tags": ["user", "highlevel"]}, {"location": "obj/document/#data-htmlrawhtml", "title": "data = html(rawhtml)", "text": "", "tags": ["user", "highlevel"]}, {"location": "obj/document/#data-findallterm", "title": "data = findall(term)", "text": "<p>Searches for all occurances of a match against JSON, XML or HTML data.</p> <p>Each item in search is optional. </p> <p>The has, nhas, and, nand, or, nor are all recursive. </p> <p>n in nhas, nand, and nor indicates negation. </p> <pre><code>search = {\n  name:\"\", \n  value:\"\", \n  attr:attrlist, \n  has:searchlist, \n  nhas:searchlist, \n  and:searchlist, \n  nand:searchlist, \n  or:searchlist, \n  nor:searchlist\n  }\n attrlist = {attr, attr, etc}\n attr = name: value\n searchlist = [search, search, etc]\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "obj/document/#advanced-usage-extracting-data-from-html", "title": "Advanced Usage: Extracting Data from HTML", "text": "<pre><code>/* Parse HTML and extract all &lt;a&gt; tags with an &lt;img&gt; child */\nhtml = $file().get(\"page.html\").str().html();\nanchors_with_images = html.body.findall({name:\"a\", has:{name:\"img\"}});\n\n/* Extract hrefs, filtering out any &lt;a&gt; without an href attribute */\nhrefs = anchors_with_images.reduce(op(acc, a) {\n    if (a.$LIST.href.type() != $ERR) {\n        acc += a.$LIST.href;\n    }\n}, []);\n</code></pre> <p>Explanation: - <code>findall({name:\"a\", has:{name:\"img\"}})</code> finds all <code>&lt;a&gt;</code> tags that contain an <code>&lt;img&gt;</code> child. - The <code>.reduce()</code> collects the <code>href</code> attributes, skipping any that are missing.</p>", "tags": ["user", "highlevel"]}, {"location": "obj/document/#query-syntax-recap", "title": "Query Syntax Recap", "text": "<ul> <li><code>name</code>: Tag name to match (e.g., <code>\"a\"</code>, <code>\"div\"</code>)</li> <li><code>attr</code>: Match attributes (e.g., <code>{id:\"main\", class:\"header\"}</code>)</li> <li><code>has</code>: Require child/descendant elements matching a query</li> <li><code>nhas</code>: Require absence of child/descendant elements</li> <li><code>and</code>, <code>or</code>, <code>nand</code>, <code>nor</code>: Combine multiple queries (logical operations)</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "obj/document/#best-practices", "title": "Best Practices", "text": "<ul> <li>Chain <code>.findall()</code> calls to traverse nested structures.</li> <li>Use functional methods (<code>.map()</code>, <code>.reduce()</code>) to process results.</li> <li>Always check for <code>$ERR</code> when accessing properties that may not exist.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "obj/document/#note-on-json-and-xml", "title": "Note on JSON and XML", "text": "<p>The same <code>.findall()</code> principles apply to complex JSON and XML documents. You can use the same query patterns to extract nested data, filter by attributes/keys, and process results with functional methods.</p> <p>See Also: - Language Reference - Python-to-Grapa Migration Guide - JS-to-Grapa Migration Guide - Examples</p>", "tags": ["user", "highlevel"]}, {"location": "obj/encode/", "title": "Encode", "text": "<p>References</p> <ul> <li>$math</li> </ul>"}, {"location": "obj/encode/#key-methodgenkeysoptions", "title": "key = method.genkeys(options)", "text": ""}, {"location": "obj/encode/#rsa", "title": "\"rsa\"", "text": "<p>RSA_generate_key</p> <p>options - bits (default=1024) - e (default=65537)</p> <pre><code>grapa: /&gt;\"rsa\".genkeys({bits:1024, e:65537});\n{\"method\":\"rsa\",\"n\":153343860242731826718997454922543948246319786484738710266065697186566851303969929744525118374830275413173691343298483355967655653707943038260978178989870480981813864975853444332967984168167971315164681129567478872720168346499340635885246889112254404613308384241361659956685429052350776397599870929204283799727,\"e\":65537,\"d\":79055022445659402007335810450096775552716887040295814635390111095145249324919236710228881006612913550893380981980039628730017876494656017726225944634797947775686645431513668671692142235308537648915581979668299541155091041081197126102417671890829285804060548022166826534910977714874080213766562525384158510233,\"p\":12927549674691586875163180066905699166335405091224131481044213102404425715203497636737871644864054092888178130162387310855633573554296177378467548678038211,\"q\":11861788513791973340894513760762175330214406628819766321709624619984772343399257289407679201931012919105862007733677390652191686844294289003006359142734757,\"dmp1\":421535524281183471202888685825983476791106713458748019820734598773795836754655758574680435556624251895906688804141503018119366871927780201379146917389683,\"dmq1\":2422782566269730917515509730405152493557075348785897919990311353328900660523711156690284782596831391964097667508781383817846985978877936930195814936366441,\"iqmp\":4751564343152764182762436394942179636976979980491913680362394619885466773528151935033468867078538523266366855637186571425698958155097556787751966441250519}\n\ngrapa: /&gt;nodeA = \"rsa\".genkeys();\ngrapa: /&gt;tstr = \"this is a test of this is a test\".left(nodeA.n.bytes()-42);\ngrapa: /&gt;enc = tstr.encode(nodeA);\ngrapa: /&gt;enc;\n0xC492D258D8213815771868C08197E89834FD553EF26DE0FD1E957E37282B5F75805A0538EA47C93A0B767999CD0B034176FBEB85960211D9D12AB598FBBA0D54162E2AECE5F5DFB0168D8ADD5BC5CA33964216FDE2E5C7525AFABD7DE0111C4C2F253A1C6F14810EF30E93E99364220D58DF55A970994A9DFC0EBD3850000917\ngrapa: /&gt;enc.decode(nodeA).str();\nthis is a test of this is a test\n\ngrapa: /&gt;nodeA = \"rsa\".genkeys();\ngrapa: /&gt;sig = \"test\".sign(nodeA)\ngrapa: /&gt;sig\n0xA86168258CCCAF03D502AF220D29C56DF689E29A881792203A30F55E9F5DC620D9BA72A69FA7BB8E5DB6DB40E74DC7F37AE10E94267EB69BD178310F9AE713E36559B789A2A1D88D80D7B7631C53C8F0D65DD74F2129F3C065F0CFB7982013625E22EF052AF829A44C07CDCA33334229B6A23058ECA50D6B7C7B8DCB54AD6402\ngrapa: /&gt;sig.verify(nodeA,\"test\")\n1\ngrapa: /&gt;sig.verify(nodeA,\"test2\")\n0\ngrapa: /&gt;sig.verifyrecover(nodeA).str()\ntest\n</code></pre>"}, {"location": "obj/encode/#dh-diffie-hellman-key-exchange", "title": "\"dh\" - Diffie-Hellman key exchange", "text": "<p>DH_generate_key</p> <p>options - bits (default=1024) - g (default=2) - p (from other node)</p> <pre><code>grapa: /&gt;\"dh\".genkeys({bits:1024, g:2});\n{\"method\":\"dh\",\"p\":155060894798916672436294955495808726921562912418691946735299981488630632728917641139720322303293804373154953309741508291858037753320020908034625492504226207533520275246218001191529318164644965512204584496862649121961720039055278601771796332158129094227178861323999156687238560468911736859258982900594036495419,\"g\":2,\"pub\":32452604788320682188849350932531192941087970270462344515271303858654517731576279803429572719652061802609399632204622690115682073041731861373289670753479025573602436383635155882438039975820160596493133927013148569271558813144843665089688971452982482929762826761875748093517340605310796965292388347247601517927,\"prv\":85108738216648176726657906323697936988639742459594685112244281495890189161229363404509137286685931354323324249119565623639407205879234061660167646352177376062162362276676470273884923897379280600025611946952284789763517326405782930856345819438343010650014807653972154357078710716080052243407709981947131030820}\n\ngrapa: /&gt;nodeA = \"dh\".genkeys();\ngrapa: /&gt;nodeB = \"dh\".genkeys({p:nodeA.p, g:nodeA.g});\ngrapa: /&gt;nodeA.secret({method:nodeB.method, pub:nodeB.pub});\n41411399464032750193815617500918575158768059683378407298669269983997192654320169347707063521253943511427030448681025344568888491017373725518403783432343686587216160306110643977085792902295674526020669661500697334078419157529204684347818535354141358922052361205641014829108645061072280570433902877036291304733\ngrapa: /&gt;nodeB.secret({method:nodeA.method, pub:nodeA.pub});\n41411399464032750193815617500918575158768059683378407298669269983997192654320169347707063521253943511427030448681025344568888491017373725518403783432343686587216160306110643977085792902295674526020669661500697334078419157529204684347818535354141358922052361205641014829108645061072280570433902877036291304733\ngrapa: /&gt;nodeA.secret({method:b.method, pub:nodeB.pub}) == b.secret({method:nodeA.method, pub:nodeA.pub});\ntrue\n</code></pre>"}, {"location": "obj/encode/#ec", "title": "\"ec\"", "text": "<p>EC_KEY_generate_key</p> <p>options - curve (default=\"prime256v1\")</p> <p>curve - \"secp224r1\" - \"prime256v1\"</p> <pre><code>grapa: /&gt;\"ec\".genkeys()\n{\"method\":\"ec\",\"curve\":\"prime256v1\",\"pub\":349854664772403873294259339017252697866055805081789380369591127264988512574728,\"prv\":109253108998027222598743004106159085619823908146992540608529858792290817953562}\n\ngrapa: /&gt;\"ec\".genkeys({curve:\"secp224r1\", bits:256})\n{\"method\":\"EC\",\"curve\":\"secp224r1\",\"pub\":94005469537357239932833357907049107441874311457299400778270964405582,\"prv\":5192160124916624753659544220564622206602718051022940651336084962189}\n\ngrapa: /&gt;nodeA = \"ec\".genkeys({curve:\"prime256v1\"});\ngrapa: /&gt;sig = \"test\".sign(nodeA)\ngrapa: /&gt;sig\n0x304402207601D7909310BC4DE38DB17D8FE52AB71B7A21CE2976238E1A4870CCD5EE8FE202207072F45DBF7C35D46CE23AAEC4BF89B2FA62E158DD1FA69B28FEF935ACC01807\ngrapa: /&gt;sig.verify(nodeA,\"test\")\n1\ngrapa: /&gt;sig.verify(nodeA,\"test2\")\n0\n\ngrapa: /&gt;nodeA = \"ec\".genkeys({curve:\"prime256v1\"});\ngrapa: /&gt;nodeB = \"ec\".genkeys({curve:nodeA.curve});\ngrapa: /&gt;nodeA.secret({method:nodeB.method, curve:nodeB.curve, pub:nodeB.pub});\n-32833883556403339571501877545325088412797888782971835903758327481485027662328\ngrapa: /&gt;nodeB.secret({method:nodeA.method, curve:nodeA.curve, pub:nodeA.pub});\n-32833883556403339571501877545325088412797888782971835903758327481485027662328\ngrapa: /&gt;nodeA.secret({method:nodeB.method, curve:nodeB.curve, pub:nodeB.pub}) == nodeB.secret({method:nodeA.method, curve:nodeA.curve, pub:nodeA.pub});\ntrue\n</code></pre>"}, {"location": "obj/encode/#bc", "title": "\"bc\"", "text": "<p>EVP_CipherInit_ex</p> <p>options - cipher (default=\"aes-256-cbc\") - key - iv - digest (default=\"sha512\") - count - salt - data</p> <p>cyper - \"des-ecb\" - \"des-ede\" - \"des-ede3\" - \"des-ede-ecb\" - \"des-ede3-ecb\" - \"des-cfb64\" - \"des-cfb1\" - \"des-cfb8\" - \"des-ede-cfb64\" - \"des-ede3-cfb64\" - \"des-ede3-cfb1\" - \"des-ede3-cfb8\" - \"des-ofb\" - \"des-ede-ofb\" - \"des-ede3-ofb\" - \"des-cbc\" - \"des-ede-cbc\" - \"des-ede3-cbc\" - \"desx-cbc\" - \"des-ede3-wrap\" - \"rc4\" - \"rc4-40\" - \"rc4-hmac-md5\" - \"idea-ecb\" - \"idea-cfb64\" - \"idea-ofb\" - \"idea-cbc\" - \"rc2-ecb\" - \"rc2-cbc\" - \"rc2-40-cbc\" - \"rc2-64-cbc\" - \"rc2-cfb64\" - \"rc2-ofb\" - \"bf-ecb\" - \"bf-cbc\" - \"bf-cfb64\" - \"bf-ofb\" - \"cast5-ecb\" - \"cast5-cbc\" - \"cast5-cfb64\" - \"cast5-ofb\" - \"rc5-32-12-16-cbc\" - \"rc5-32-12-16-ecb\" - \"rc5-32-12-16-cfb64\" - \"rc5-32-12-16-ofb\" - \"aes-128-ecb\" - \"aes-128-cbc\" - \"aes-128-cfb1\" - \"aes-128-cfb8\" - \"aes-128-cfb128\" - \"aes-128-ofb\" - \"aes-128-ctr\" - \"aes-128-ccm\" - \"aes-128-gcm\" - \"aes-128-xts\" - \"aes-128-wrap\" - \"aes-128-wrap-pad\" - \"aes-128-ocb\" - \"aes-192-ecb\" - \"aes-192-cbc\" - \"aes-192-cfb1\" - \"aes-192-cfb8\" - \"aes-192-cfb128\" - \"aes-192-ofb\" - \"aes-192-ctr\" - \"aes-192-ccm\" - \"aes-192-gcm\" - \"aes-192-wrap\" - \"aes-192-wrap-pad\" - \"aes-192-ocb\" - \"aes-256-ecb\" - \"aes-256-cbc\" - \"aes-256-cfb1\" - \"aes-256-cfb8\" - \"aes-256-cfb128\" - \"aes-256-ofb\" - \"aes-256-ctr\" - \"aes-256-ccm\" - \"aes-256-gcm\" - \"aes-256-xts\" - \"aes-256-wrap\" - \"aes-256-wrap-pad\" - \"aes-256-ocb\" - \"aes-128-cbc-hmac-sha1\" - \"aes-256-cbc-hmac-sha1\" - \"aes-128-cbc-hmac-sha256\" - \"aes-256-cbc-hmac-sha256\" - \"aria-128-ecb\" - \"aria-128-cbc\" - \"aria-128-cfb1\" - \"aria-128-cfb8\" - \"aria-128-cfb128\" - \"aria-128-ctr\" - \"aria-128-ofb\" - \"aria-128-gcm\" - \"aria-128-ccm\" - \"aria-192-ecb\" - \"aria-192-cbc\" - \"aria-192-cfb1\" - \"aria-192-cfb8\" - \"aria-192-cfb128\" - \"aria-192-ctr\" - \"aria-192-ofb\" - \"aria-192-gcm\" - \"aria-192-ccm\" - \"aria-256-ecb\" - \"aria-256-cbc\" - \"aria-256-cfb1\" - \"aria-256-cfb8\" - \"aria-256-cfb128\" - \"aria-256-ctr\" - \"aria-256-ofb\" - \"aria-256-gcm\" - \"aria-256-ccm\" - \"camellia-128-ecb\" - \"camellia-128-cbc\" - \"camellia-128-cfb1\" - \"camellia-128-cfb8\" - \"camellia-128-cfb128\" - \"camellia-128-ofb\" - \"camellia-128-ctr\" - \"camellia-192-ecb\" - \"camellia-192-cbc\" - \"camellia-192-cfb1\" - \"camellia-192-cfb8\" - \"camellia-192-cfb128\" - \"camellia-192-ofb\" - \"camellia-192-ctr\" - \"camellia-256-ecb\" - \"camellia-256-cbc\" - \"camellia-256-cfb1\" - \"camellia-256-cfb8\" - \"camellia-256-cfb128\" - \"camellia-256-ofb\" - \"camellia-256-ctr\" - \"chacha20\" - \"chacha20-poly1305\" - \"seed-ecb\" - \"seed-cbc\" - \"seed-cfb128\" - \"seed-ofb\" - \"sm4-ecb\" - \"sm4-cbc\" - \"sm4-cfb128\" - \"sm4-ofb\" - \"sm4-ctr\"</p> <pre><code>grapa: /&gt;nodeA = \"bc\".genkeys({cipher:\"aes-256-cbc\", key:\"thisisatest\"})\ngrapa: /&gt;nodeA\n{\"method\":\"bc\",\"cipher\":\"aes-256-cbc\",\"key\":0x7468697369736174657374,\"iv\":null}\ngrapa: /&gt;enc = \"this is a test\".encode(nodeA);\ngrapa: /&gt;enc\n0x4E12DB388BBE0173A35A82D6972C0BBA\ngrapa: /&gt;enc.decode(nodeA).str();\nthis is a test\n\ngrapa: /&gt;enc = \"this is a test\".encode({method:\"bc\", cipher:\"aes-256-cbc\", key:\"thisisatest\"});\ngrapa: /&gt;enc\n0x4E12DB388BBE0173A35A82D6972C0BBA\ngrapa: /&gt;enc.decode({method:\"bc\", cipher:\"aes-256-cbc\", key:\"thisisatest\"}).str();\nthis is a test\n</code></pre>"}, {"location": "obj/encode/#md", "title": "\"md\"", "text": "<p>digest - \"md4\" - \"md5\" - \"md5-sha1\" - \"blake2b512\" - \"blake2s256\" - \"sha1\" - \"sha224\" - \"sha256\" - \"sha384\" - \"sha512\" - \"sha512-224\" - \"sha512-256\" - \"sha3-224\" - \"sha3-256\" - \"sha3-384\" - \"sha3-512\" - \"shake128\" - \"shake256\" - \"mdc2\" - \"ripemd160\" - \"whirlpool\" - \"sm3\"</p> <pre><code>grapa: /&gt;nodeA = \"md\".genkeys({digest:\"sha3-256\"});\ngrapa: /&gt;nodeA;\n{\"method\":\"md\",\"digest\":\"sha3-256\"}\ngrapa: /&gt;\"test\".encode(nodeA);\n0x36F028580BB02CC8272A9A020F4200E346E276AE664E45EE80745574E2F5AB80\n\ngrapa: /&gt;\"test\".encode({method:\"md\", digest:\"sha3-256\"});\n0x36F028580BB02CC8272A9A020F4200E346E276AE664E45EE80745574E2F5AB80\n</code></pre>"}, {"location": "obj/encode/#rpk", "title": "\"rpk\"", "text": "<p>EVP_PKEY_keygen_init</p> <p>options - alg (default=\"ED25519\") - pub - prv</p> <p>alg - \"ED25519\" - \"X25519\" - \"ED448\" - \"X448\"</p> <pre><code>grapa: /&gt;\"rpk\".genkeys({alg:\"ED25519\"})\n{\"method\":\"rpk\",\"alg\":\"ed25519\",\"pub\":0x60BEEACB0D9B67B617E98B3DFFF047B0951413A5817685E6FD2125853B07DDB5,\"prv\":0x1C8390953C4E0B5B5720E55C3C4A1C21FF4B105C61B69ADAA065C7E655722B59}\n\ngrapa: /&gt;g=\"rpk\".genkeys()\ngrapa: /&gt;g\n{\"method\":\"rpk\",\"alg\":\"ed25519\",\"pub\":0x1780BB5267C0EC8A10C2A99A836930991B909608045F123668596C9AF28F2FC,\"prv\":0xF0A90D5C818DF2E62B0C3B49DF668501A77B3D6E1C8DAD98F7F49FDE5DE2C723}\ngrapa: /&gt;\"test\".sign(g)\n0xA3FDB87097F7ED99F5B1E15387E392DCF7870C32904544D9039941A1C9D6A111B48392931F6447BBEC6FDDB7CCB2E3408060E504379B3E19DC27F21F4E579A08\ngrapa: /&gt;\"test\".sign(g).verify(g,\"test\")\n1\ngrapa: /&gt;\"test\".sign(g).verify(g,\"test2\")\n0\n\ngrapa: /&gt;nodeA = \"rpk\".genkeys({alg:\"X25519\"});\ngrapa: /&gt;nodeB = \"rpk\".genkeys({alg:nodeA.alg});\ngrapa: /&gt;nodeA.secret({method:nodeB.method, alg:nodeB.alg, pub:nodeB.pub});\n33649166166276908480251638309469536773081960395558481192191946345661575379713\ngrapa: /&gt;nodeB.secret({method:nodeA.method, alg:nodeA.alg, pub:nodeA.pub});\n33649166166276908480251638309469536773081960395558481192191946345661575379713\ngrapa: /&gt;nodeA.secret({method:nodeB.method, alg:nodeB.alg, pub:nodeB.pub}) == nodeB.secret({method:nodeA.method, alg:nodeA.alg, pub:nodeA.pub});\ntrue\n</code></pre>"}, {"location": "obj/encode/#kdf", "title": "\"kdf\"", "text": "<p>options: - alg (default=\"hkdf\") - digest (default=\"sha256\") - count - size - salt - secret - info</p> <p>alg - \"hkdf\" - \"pbkdf2\"</p> <pre><code>grapa: /&gt;seed = (256).random();\ngrapa: /&gt;\"kdf\".genkeys({alg:\"hkdf\",digest:\"blake2b512\",salt:\"SIG-KEYGEN-SALT-\",secret:((seed.uint()) &lt;&lt; 8),info:((\"test1\".raw().uint()&lt;&lt;16)|48),count:5});\n{\"method\":\"kdf\",\"alg\":\"hkdf\",\"sk\":0x9A11D899176B8AA59205D37295FC2492B55E93C7057FD765537488A96463851A2CCE6A1DE6397A3377F556A7EF21CA53BD7BD4880322643EA274812935D1F56BA5F43782DD46534B996A65D26AA15035F1586C79916B395D6A882174210D709F569700F0F4936BF831B9AD8F3CA4687220AE20E0DE2D5DEA28CDE582CD15F15F7823E95B15420DA8FCE8136EA88D060F5EED8D0743D3905CA65F5DA2C7798403A06E563CDA61A50E52977D9FB3541630E92F7A852EC56C3F9434D3875649DAD3A29B35E4C08759C10C2DD00A6E200474F678E135C8E2AE9BA7DA63E068C12583250EC87FD54744F412EF0CFA494A469CF07B5BE81DCC7CDB1C529D40D880E191}\n</code></pre>"}, {"location": "obj/encode/#encdata-rawdataencode-method-options", "title": "encdata = rawdata.encode (method, options)", "text": "<p>encode/decode types: Method | Options | Description ------------ | ------------- | ------------- \"RSA\" | {n,e,d [,p,q,dp,dq,qi]} | Data size must be exactly byte count of d  minus 32. \"AES256\" | {key [,iv]} | key is 32 bits and iv is 16 bits \"ZIP-GRAPA\" | | \"BASE64\" | | \"ESCAPE\" | | \"FLOAT\" | | \"JSON\" | | Only encode. \"XML\" | | Only encode. \"SHAKE256\" | | Only encode. \"SHAKE128\" | | Only encode. SHA3-256\" | | Only encode. SHA3-384\" | | Only encode. \"SHA3-512\" | | Only encode. \"PEM\" | | Only decode.</p> <p>Example of RSA using hard coded RSA key.</p> <pre><code>e = 65537;\nd = (0xA4954A19EA13D5FF06C86E7719AB6B6D5F37EF2D0A453713F08CD3FF2847C7BE80F2A3D0159C2EA862997DEE93DC08CD18CDFBD96DCC077B978904D05B2FCA5988A63).uraw();\nd = (d + (0x2CEB3B7286ACEF97682F418172B30509BD29A1C56E0244D79CFADD5A60C83D2F28A8B72643CB82AABA08871E094B36E6613B108166768B33F5C4860BD21).uraw()).uint();\nn = (0xB47D8ABBD7A33B5AD29C8EFD291433D62695BA043F4130F8E677CD179315FD0DD39989539EC710EB3BCBCACBDED2230DE8575FAEE3ED2835B256ADB1AAEF2F34C430E).uraw();\nn = (n + (0xAB9934FAF1977FA83E12B947806CE1F8D06692F02068FD18E4DE952895DDD2D9BDEE923E94257E84B63D21C92EC1F74B8AF4AF9A33608C7E8247F1C820F).uraw()).uint();\ng = {\"method\":\"rsa\",\"n\":n,\"e\":e, \"d\":d};\nlen = g.n.bytes()-42;\nv = \"this is a test of this is a test of 86 chars to see if we can encode with RSA. It needs to be exact size chars to see if we can encode with RSA. It needs to be exact size...so need to make it so.\".left(len);\nv.encode(g).decode(g).str();\n</code></pre> <pre><code>v.encode(\"AES256\",{key:\"12345678123456781234567812345678\",iv:\"1234567812345678\"}).decode(\"AES256\",{key:\"12345678123456781234567812345678\",iv:\"1234567812345678\"}).str();\nv.encode(\"SHA3-256\");\nv.encode(\"SHAKE128\");\n{1,2,3}.encode(\"ZIP-GRAPA\").decode(\"ZIP-GRAPA\");\nv.encode(\"BASE64\").decode(\"BASE64\").str();\n</code></pre>"}, {"location": "obj/encode/#rawdata-encdatadecode-method-options", "title": "rawdata = encdata.decode (method, options)", "text": "<p>See encode.</p>"}, {"location": "obj/encode/#sig-rawdatasign-method-options", "title": "sig = rawdata.sign (method, options)", "text": "<pre><code>curve = \"prime256v1\";\npub = 0x25074E1882EF3F6230925ADFFEA56EC322F7EB4F23C3DECF12BFF5A24E11BA21C;\nprv = 0x5A44899AE665F34833146FD9805222B9E7C22B8BE94B7F9C34A54AA9B9D89890;\ng = {\"method\":\"ec\",\"curve\":curve,\"pub\":pub,\"prv\":prv};\n\"test\".sign(g).verify(g,\"test\");\n</code></pre>"}, {"location": "obj/encode/#sig-sigsignadd-method-value-options", "title": "sig = sig.signadd (method, value, options)", "text": "<p>Not implemented yet. Used for pairwise eliptic curves where sigatures can be added.</p>"}, {"location": "obj/encode/#ispass-sigverify-method-value-options", "title": "ispass = sig.verify (method, value, options)", "text": "<p>See sign.</p>"}, {"location": "obj/encode/#rawdata-sigverifyrecover-method-options", "title": "rawdata = sig.verifyrecover (method, options)", "text": "<p>Recovers signed data.</p> <pre><code>a = \"rsa\".genkeys();\nb = \"hello\".sign(a);\nb.verifyrecover(a).str();\n</code></pre>"}, {"location": "obj/encode/#value-keysecret-key", "title": "value = key.secret (key)", "text": "<p>Diffie-Hellman key exchange. Node A generates the staring keys and sends \"p\" and \"g\" to node B. Node B then generates its keys using \"p\" and \"g\" from node A. Both nodes can then generate the shared secret, and they will be equal.  </p> <pre><code>grapa: /&gt;nodeA = \"dh\".genkeys();\ngrapa: /&gt;nodeB = \"dh\".genkeys({p:nodeA.p, g:nodeA.g});\ngrapa: /&gt;nodeA.secret({method:nodeB.method, pub:nodeB.pub});\n41411399464032750193815617500918575158768059683378407298669269983997192654320169347707063521253943511427030448681025344568888491017373725518403783432343686587216160306110643977085792902295674526020669661500697334078419157529204684347818535354141358922052361205641014829108645061072280570433902877036291304733\ngrapa: /&gt;nodeB.secret({method:nodeA.method, pub:nodeA.pub});\n41411399464032750193815617500918575158768059683378407298669269983997192654320169347707063521253943511427030448681025344568888491017373725518403783432343686587216160306110643977085792902295674526020669661500697334078419157529204684347818535354141358922052361205641014829108645061072280570433902877036291304733\ngrapa: /&gt;nodeA.secret({method:b.method, pub:nodeB.pub}) == b.secret({method:nodeA.method, pub:nodeA.pub});\ntrue\n\ngrapa: /&gt;nodeA = \"ec\".genkeys({curve:\"prime256v1\"});\ngrapa: /&gt;nodeB = \"ec\".genkeys({curve:nodeA.curve});\ngrapa: /&gt;nodeA.secret({method:nodeB.method, curve:nodeB.curve, pub:nodeB.pub});\n-32833883556403339571501877545325088412797888782971835903758327481485027662328\ngrapa: /&gt;nodeB.secret({method:nodeA.method, curve:nodeA.curve, pub:nodeA.pub});\n-32833883556403339571501877545325088412797888782971835903758327481485027662328\ngrapa: /&gt;nodeA.secret({method:nodeB.method, curve:nodeB.curve, pub:nodeB.pub}) == nodeB.secret({method:nodeA.method, curve:nodeA.curve, pub:nodeA.pub});\ntrue\n\ngrapa: /&gt;nodeA = \"rpk\".genkeys({alg:\"X25519\"});\ngrapa: /&gt;nodeB = \"rpk\".genkeys({alg:nodeA.alg});\ngrapa: /&gt;nodeA.secret({method:nodeB.method, alg:nodeB.alg, pub:nodeB.pub});\n33649166166276908480251638309469536773081960395558481192191946345661575379713\ngrapa: /&gt;nodeB.secret({method:nodeA.method, alg:nodeA.alg, pub:nodeA.pub});\n33649166166276908480251638309469536773081960395558481192191946345661575379713\ngrapa: /&gt;nodeA.secret({method:nodeB.method, alg:nodeB.alg, pub:nodeB.pub}) == nodeB.secret({method:nodeA.method, alg:nodeA.alg, pub:nodeA.pub});\ntrue\n</code></pre>"}, {"location": "obj/grep/", "title": "Unicode Grep Documentation", "text": "<p>See Also: Python Integration Guide for Python grep examples</p>"}, {"location": "obj/grep/#overview", "title": "Overview", "text": "<p>The Unicode grep functionality in Grapa provides advanced text searching capabilities with full Unicode support, PCRE2-powered regular expressions, and comprehensive output options. It's designed to handle international text, emoji, and complex Unicode properties while maintaining high performance.</p>"}, {"location": "obj/grep/#output-formatting-and-array-design", "title": "Output Formatting and Array Design", "text": ""}, {"location": "obj/grep/#why-arrays-instead-of-strings", "title": "Why Arrays Instead of Strings?", "text": "<p>Grapa grep is designed as an integrated programming language feature, not a standalone console tool. This fundamental difference explains the output format:</p> <p>Grapa Grep (Integrated Language): - Returns arrays of strings for programmatic use - Removes delimiters from output strings (clean data for processing) - Designed for scripting and data manipulation - Example: <code>[\"line1\", \"line2\", \"line3\"]</code> (no <code>\\n</code> in strings)</p> <p>ripgrep/GNU grep (Console Tools): - Outputs single string with embedded delimiters - Preserves delimiters in output for console display - Designed for command-line text processing - Example: <code>\"line1\\nline2\\nline3\\n\"</code> (with <code>\\n</code> in string)</p>"}, {"location": "obj/grep/#delimiter-removal-behavior", "title": "Delimiter Removal Behavior", "text": "<p>Grapa grep automatically removes delimiters from output strings:</p> <pre><code>/* Input with custom delimiter */\ninput = \"line1|||line2|||line3\";\n\n/* Grapa grep removes delimiters from output */\nresult = input.grep(\"line\", \"o\", \"|||\");\n/* Result: [\"line1\", \"line2\", \"line3\"] (clean strings, no |||) */\n\n/* For console output, you can join with delimiter */\nconsole_output = result.join(\"|||\");\n/* Result: \"line1|||line2|||line3\" */\n</code></pre>"}, {"location": "obj/grep/#console-output-equivalence", "title": "Console Output Equivalence", "text": "<p>To get console-equivalent output in Grapa:</p> <pre><code>/* Grapa approach */\ninput = \"line1\\nline2\\nline3\";\nresult = input.grep(\"line\", \"o\");  /* [\"line1\", \"line2\", \"line3\"] */\nconsole_output = result.join(\"\\n\");  /* \"line1\\nline2\\nline3\" */\n\n/* This matches ripgrep output: \"line1\\nline2\\nline3\" */\n</code></pre>"}, {"location": "obj/grep/#benefits-of-array-design", "title": "Benefits of Array Design", "text": "<ol> <li>Programmatic Use: Arrays are easier to process in scripts</li> <li>Clean Data: No delimiter artifacts in output strings</li> <li>Flexible Output: Can join with any delimiter for different formats</li> <li>Language Integration: Natural fit with Grapa's array-based design</li> <li>Python Integration: Arrays map naturally to Python lists</li> </ol>"}, {"location": "obj/grep/#custom-delimiter-support", "title": "Custom Delimiter Support", "text": "<p>Grapa grep fully supports multi-character delimiters:</p> <pre><code>/* Single character delimiter */\n\"line1|line2|line3\".grep(\"line\", \"o\", \"|\")\n/* Result: [\"line1\", \"line2\", \"line3\"] */\n\n/* Multi-character delimiter */\n\"line1|||line2|||line3\".grep(\"line\", \"o\", \"|||\")\n/* Result: [\"line1\", \"line2\", \"line3\"] */\n\n/* Complex delimiter */\n\"line1&lt;DELIM&gt;line2&lt;DELIM&gt;line3\".grep(\"line\", \"o\", \"&lt;DELIM&gt;\")\n/* Result: [\"line1\", \"line2\", \"line3\"] */\n</code></pre> <p>Note: All delimiters are automatically removed from output strings, regardless of length or complexity.</p>"}, {"location": "obj/grep/#key-features", "title": "Key Features", "text": ""}, {"location": "obj/grep/#unicode-support", "title": "\ud83d\udd0d Unicode Support", "text": "<ul> <li>Full Unicode character handling (Cyrillic, Chinese, Japanese, Korean, Arabic, Hebrew, Thai, etc.)</li> <li>Unicode normalization (NFC, NFD, NFKC, NFKD)</li> <li>Advanced Unicode properties (<code>\\p{L}</code>, <code>\\p{N}</code>, <code>\\p{Emoji}</code>, <code>\\p{So}</code>, etc.)</li> <li>Unicode grapheme clusters (<code>\\X</code>)</li> <li>Case-insensitive matching with proper Unicode case folding</li> </ul>"}, {"location": "obj/grep/#advanced-regex-features", "title": "\ud83c\udfaf Advanced Regex Features", "text": "<ul> <li>PCRE2-powered regular expressions</li> <li>Named groups (<code>(?P&lt;name&gt;...)</code>)</li> <li>Unicode properties and script extensions</li> <li>Atomic groups (<code>(?&gt;...)</code>)</li> <li>Lookaround assertions (<code>(?=...)</code>, <code>(?&lt;=...)</code>, <code>(?!...)</code>, <code>(?&lt;!...)</code>)</li> <li>Possessive quantifiers (<code>*+</code>, <code>++</code>, <code>?+</code>, <code>{n,m}+</code>)</li> <li>Conditional patterns (<code>?(condition)...</code>)</li> <li>Unicode categories (<code>\\p{L}</code>, <code>\\p{N}</code>, <code>\\p{Z}</code>, <code>\\p{P}</code>, <code>\\p{S}</code>, <code>\\p{C}</code>, <code>\\p{M}</code>)</li> <li>Unicode scripts (<code>\\p{sc=Latin}</code>, <code>\\p{sc=Han}</code>, etc.)</li> <li>Unicode script extensions (<code>\\p{scx:Han}</code>, etc.)</li> <li>Unicode general categories (<code>\\p{Lu}</code>, <code>\\p{Ll}</code>, etc.)</li> </ul>"}, {"location": "obj/grep/#output-formats", "title": "\ud83d\udcca Output Formats", "text": "<ul> <li>Standard text output</li> <li>JSON output with named groups, offsets, and line numbers</li> <li>Context lines (before/after matches)</li> <li>Line numbers and byte offsets</li> <li>Match-only or full-line output</li> </ul>"}, {"location": "obj/grep/#syntax", "title": "Syntax", "text": "<pre><code>string.grep(pattern, options, delimiter, normalization, mode, num_workers)\n</code></pre>"}, {"location": "obj/grep/#parameters", "title": "Parameters", "text": "<p>Required Parameters: - string: The input text to search - pattern: PCRE2 regular expression pattern with Unicode support</p> <p>Optional Parameters (all have sensible defaults): - options: String containing option flags (default: <code>\"\"</code> - no options) - delimiter: Custom line delimiter (default: <code>\"\\n\"</code>) - normalization: Unicode normalization form: <code>\"NONE\"</code>, <code>\"NFC\"</code>, <code>\"NFD\"</code>, <code>\"NFKC\"</code>, <code>\"NFKD\"</code> (default: <code>\"NONE\"</code>) - mode: Processing mode: <code>\"UNICODE\"</code> for full Unicode processing, <code>\"BINARY\"</code> for raw byte processing (default: <code>\"UNICODE\"</code>) - num_workers: Number of worker threads for parallel processing: <code>0</code> for auto-detection, <code>1</code> for sequential, <code>2+</code> for parallel (default: <code>0</code> - auto-detection)</p>"}, {"location": "obj/grep/#simple-usage-examples", "title": "Simple Usage Examples", "text": "<pre><code>/* Minimal usage - only required parameters */\n\"Hello world\".grep(\"world\");\n/* Result: [\"Hello world\"] */\n\n/* With options */\n\"Hello world\".grep(\"world\", \"i\");\n/* Result: [\"Hello world\"] */\n\n/* With parallel processing (auto-detection) */\n\"Hello world\".grep(\"world\", \"i\", \"\", \"\", \"\", 0);\n/* Result: [\"Hello world\"] - Uses optimal number of threads */\n\n/* Manual parallel processing */\n\"Hello world\".grep(\"world\", \"i\", \"\", \"\", \"\", 4);\n/* Result: [\"Hello world\"] - Uses 4 worker threads */\n\n/* All parameters (rarely needed) */\n\"Hello world\".grep(\"world\", \"i\", \"\\n\", \"NONE\", \"UNICODE\", 2);\n/* Result: [\"Hello world\"] */\n</code></pre>"}, {"location": "obj/grep/#options-reference", "title": "Options Reference", "text": ""}, {"location": "obj/grep/#basic-options", "title": "Basic Options", "text": "Option Description Example <code>a</code> All-mode (match across full input string, context options ignored) <code>\"text\".grep(\"pattern\", \"a\")</code> <code>i</code> Case-insensitive matching <code>\"Text\".grep(\"text\", \"i\")</code> <code>v</code> Invert match (return lines that do NOT match the pattern) <code>\"text\".grep(\"pattern\", \"v\")</code> <code>x</code> Exact line match (whole line must match) <code>\"text\".grep(\"^text$\", \"x\")</code> <code>N</code> Normalize input and pattern to NFC <code>\"caf\u00e9\".grep(\"cafe\", \"N\")</code> <code>d</code> Diacritic-insensitive matching (strip accents/diacritics from both input and pattern, robust Unicode-aware) <code>\"caf\u00e9\".grep(\"cafe\", \"d\")</code>"}, {"location": "obj/grep/#diacritic-insensitive-matching-d-option", "title": "Diacritic-Insensitive Matching (<code>d</code> option)", "text": "<p>The <code>d</code> option enables diacritic-insensitive matching. When enabled, both the input and the pattern are: 1. Unicode normalized (NFC by default, or as specified) 2. Case folded (Unicode-aware, not just ASCII) 3. Diacritics/accents are stripped (works for Latin, Greek, Cyrillic, Turkish, Vietnamese, and more)</p> <p>This allows matches like: - <code>\"caf\u00e9\".grep(\"cafe\", \"d\")</code> \u2192 <code>[\"caf\u00e9\"]</code> - <code>\"CAF\u00c9\".grep(\"cafe\", \"di\")</code> \u2192 <code>[\"CAF\u00c9\"]</code> - <code>\"ma\u00f1ana\".grep(\"manana\", \"d\")</code> \u2192 <code>[\"ma\u00f1ana\"]</code> - <code>\"\u0130stanbul\".grep(\"istanbul\", \"di\")</code> \u2192 <code>[\"\u0130stanbul\"]</code> - <code>\"\u03ba\u03b1\u03c6\u03ad\u03c2\".grep(\"\u03ba\u03b1\u03c6\u03b5\u03c2\", \"d\")</code> \u2192 <code>[\"\u03ba\u03b1\u03c6\u03ad\u03c2\"]</code> - <code>\"\u043a\u043e\u0444\u0435\".grep(\"\u043a\u043e\u0444\u0435\", \"di\")</code> \u2192 <code>[\"\u043a\u043e\u0444\u0435\"]</code></p>"}, {"location": "obj/grep/#special-capabilities", "title": "Special Capabilities", "text": "<ul> <li>Handles both precomposed (NFC) and decomposed (NFD) Unicode forms</li> <li>Supports diacritic-insensitive matching for Latin, Greek, Cyrillic, Turkish, Vietnamese, and more</li> <li>Works with case-insensitive (<code>i</code>) and normalization (<code>N</code>, or normalization parameter) options</li> <li>Robust for international text, including combining marks</li> </ul>"}, {"location": "obj/grep/#limitations", "title": "Limitations", "text": "<ul> <li>Only covers scripts and diacritics explicitly mapped (Latin, Greek, Cyrillic, Turkish, Vietnamese, etc.)</li> <li>Does not transliterate between scripts (e.g., Greek to Latin)</li> <li>Does not remove all possible Unicode marks outside supported ranges (e.g., rare/archaic scripts)</li> <li>For full Unicode normalization, use with the normalization parameter (e.g., <code>\"NFC\"</code>, <code>\"NFD\"</code>)</li> <li>Does not perform locale-specific collation (e.g., German \u00df vs ss)</li> </ul>"}, {"location": "obj/grep/#example", "title": "Example", "text": "<pre><code>input = \"caf\u00e9\\nCAF\u00c9\\ncafe\\u0301\\nCafe\\nCAF\u00c9\\nma\u00f1ana\\nman\u0303ana\\n\u0130stanbul\\nistanbul\\nISTANBUL\\nstra\u00dfe\\nSTRASSE\\nStra\u00dfe\\n\u043a\u043e\u0444\u0435\\n\u041a\u043e\u0444\u0435\\n\u03ba\u03b1\u03c6\u03ad\u03c2\\n\u039a\u03b1\u03c6\u03ad\u03c2\\n\";\nresult = input.grep(r\"cafe\", \"di\");\n/* Result: [\"caf\u00e9\", \"CAF\u00c9\", \"cafe\u0301\", \"Cafe\", \"CAF\u00c9\"] */\n</code></pre>"}, {"location": "obj/grep/#output-options", "title": "Output Options", "text": "Option Description Example <code>o</code> Match-only (output only matched text) <code>\"Hello world\".grep(\"\\\\w+\", \"o\")</code> <code>n</code> Prefix matches with line numbers <code>\"text\".grep(\"pattern\", \"n\")</code> <code>l</code> Line number only output <code>\"text\".grep(\"pattern\", \"l\")</code> <code>b</code> Output byte offset with matches <code>\"text\".grep(\"pattern\", \"b\")</code> <code>j</code> JSON output format with named groups, offsets, and line numbers <code>\"text\".grep(\"pattern\", \"oj\")</code>"}, {"location": "obj/grep/#context-options", "title": "Context Options", "text": "Option Description Example <code>A&lt;n&gt;</code> Show n lines after match <code>\"text\".grep(\"pattern\", \"A2\")</code> <code>B&lt;n&gt;</code> Show n lines before match <code>\"text\".grep(\"pattern\", \"B1\")</code> <code>C&lt;n&gt;</code> Show n lines before and after <code>\"text\".grep(\"pattern\", \"C3\")</code> <code>A&lt;n&gt;B&lt;m&gt;</code> Show n lines after and m lines before <code>\"text\".grep(\"pattern\", \"A2B1\")</code> <code>B&lt;m&gt;C&lt;n&gt;</code> Show m lines before and n lines before/after <code>\"text\".grep(\"pattern\", \"B1C2\")</code> <p>Note: Context options can be combined flexibly. For example, <code>\"A2B1C3\"</code> would show 2 lines after, 1 line before, and 3 lines before/after the match. Overlapping context lines are allowed (like ripgrep behavior) to ensure all relevant context is shown.</p>"}, {"location": "obj/grep/#processing-options", "title": "Processing Options", "text": "Option Description Example <code>c</code> Count of matches <code>\"text\".grep(\"pattern\", \"c\")</code> <code>d</code> Deduplicate results <code>\"text\".grep(\"pattern\", \"d\")</code> <code>g</code> Group results per line <code>\"text\".grep(\"pattern\", \"g\")</code> <p>Important: Count-Only Behavior - The count-only option (<code>c</code>) returns the count as a single item in an array, not as a number - Example: <code>\"Hello world\\nGoodbye world\".grep(\"Hello\", \"c\")</code> returns <code>[\"2\"]</code> not <code>2</code> - To get the count as a number: <code>\"Hello world\\nGoodbye world\".grep(\"Hello\", \"c\")[0].int()</code> - This design maintains consistency with Grapa's array-based return values</p>"}, {"location": "obj/grep/#additional-parameters", "title": "Additional Parameters", "text": ""}, {"location": "obj/grep/#unicode-normalization", "title": "Unicode Normalization", "text": "<p>The <code>normalization</code> parameter controls Unicode normalization:</p> Value Description Use Case <code>\"NONE\"</code> No normalization (default) Standard text processing <code>\"NFC\"</code> Normalization Form Canonical Composition Most common for text storage <code>\"NFD\"</code> Normalization Form Canonical Decomposition Unicode analysis <code>\"NFKC\"</code> Normalization Form Compatibility Composition Search and matching <code>\"NFKD\"</code> Normalization Form Compatibility Decomposition Compatibility processing <p>Note: Unicode normalization (N, or normalization parameter) does not remove diacritics or accents. It only canonicalizes Unicode forms. To match characters with and without accents (e.g., <code>cafe</code> vs <code>caf\u00e9</code>), you must use the <code>d</code> option for diacritic-insensitive matching.</p>"}, {"location": "obj/grep/#processing-mode", "title": "Processing Mode", "text": "<p>The <code>mode</code> parameter controls how the input is processed:</p> Value Description Use Case <code>\"UNICODE\"</code> Full Unicode processing (default) Text files, user input <code>\"BINARY\"</code> Raw byte processing Binary files, network data"}, {"location": "obj/grep/#examples", "title": "Examples", "text": ""}, {"location": "obj/grep/#basic-usage", "title": "Basic Usage", "text": "<pre><code>/* Simple pattern matching */\n\"Hello world\".grep(\"world\");\n/* Result: [\"Hello world\"] */\n\n/* Case-insensitive matching */\n\"Hello WORLD\".grep(\"world\", \"i\");\n/* Result: [\"Hello WORLD\"] */\n\n/* Match-only output */\n\"Hello world\".grep(\"\\\\w+\", \"o\");\n/* Result: [\"Hello\", \"world\"] */\n\n/* Raw string literals for better readability */\n\"Hello world\".grep(r\"\\w+\", \"o\");\n/* Result: [\"Hello\", \"world\"] - No need to escape backslashes */\n\n/* Complex patterns with raw strings */\n\"file.txt\".grep(r\"^[a-zA-Z0-9_]+\\.txt$\", \"x\");\n/* Result: [\"file.txt\"] - Much more readable than \"\\\\^[a-zA-Z0-9_]\\\\+\\\\.txt\\\\$\" */\n\n/* Raw strings preserve literal escape sequences */\n\"\\\\x45\".grep(r\"\\x45\", \"o\");\n/* Result: [\"\\\\x45\"] - Literal string, not character \"E\" */\n</code></pre>"}, {"location": "obj/grep/#unicode-examples", "title": "Unicode Examples", "text": "<pre><code>/* Unicode characters */\n\"\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440\".grep(\"\u043c\u0438\u0440\");\n/* Result: [\"\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440\"] */\n\n/* Unicode properties */\n\"Hello \u4e16\u754c 123 \u20ac\".grep(\"\\\\p{L}+\", \"o\");\n/* Result: [\"Hello\", \"\u4e16\u754c\"] */\n\n/* Emoji handling */\n\"Hello \ud83d\udc4b world \ud83c\udf0d\".grep(\"(?:\\\\p{So}(?:\\\\u200D\\\\p{So})*)+\", \"o\");\n/* Result: [\"\ud83d\udc4b\", \"\ud83c\udf0d\"] */\n\n/* Emoji sequence (family) */\n\"Family: \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\".grep(\"(?:\\\\p{So}(?:\\\\u200D\\\\p{So})*)+\", \"o\");\n/* Result: [\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"] */\n\n/* Unicode grapheme clusters */\n\"Hello \ud83d\udc4b world \ud83c\udf0d\".grep(\"\\\\X\", \"o\");\n/* Result: [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"\ud83d\udc4b\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \" \", \"\ud83c\udf0d\"] */\n\n/* Emoji sequences as grapheme clusters */\n\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\".grep(\"\\\\X\", \"o\");\n/* Result: [\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"] (entire family emoji as one grapheme cluster) */\n\n/* Combining characters as grapheme clusters */\n\"caf\u00e9 ma\u00f1ana\".grep(\"\\\\X\", \"o\");\n/* Result: [\"c\", \"a\", \"f\", \"\u00e9\", \" \", \"m\", \"a\", \"\u00f1\", \"a\", \"n\", \"a\"] (\u00e9 and \u00f1 as single grapheme clusters) */\n\n/* Unicode normalization */\n\"caf\u00e9\".grep(\"cafe\", \"N\");\n/* Result: [\"caf\u00e9\"] */\n</code></pre>"}, {"location": "obj/grep/#raw-string-literals", "title": "Raw String Literals", "text": "<p>For better readability of regex patterns, you can use raw string literals by prefixing the string with <code>r</code>. This prevents escape sequence processing, making patterns much more readable:</p> <pre><code>/* Without raw string (requires escaping) */\n\"file.txt\".grep(\"^[a-zA-Z0-9_]+\\\\.txt$\", \"x\")\n/* Result: [\"file.txt\"] */\n\n/* With raw string (no escaping needed) */\n\"file.txt\".grep(r\"^[a-zA-Z0-9_]+\\.txt$\", \"x\")\n/* Result: [\"file.txt\"] - Much cleaner! */\n\n/* Complex patterns benefit greatly */\n\"user@domain.com\".grep(r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\", \"x\")\n/* Result: [\"user@domain.com\"] */\n\n/* Named groups with raw strings */\n\"John Doe (30)\".grep(r\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\((?P&lt;age&gt;\\\\d+)\\)\", \"oj\")\n/* Result: [{\"match\":\"John Doe (30)\",\"first\":\"John\",\"last\":\"Doe\",\"age\":\"30\",\"offset\":0,\"line\":1}] */\n</code></pre> <p>Note: Raw strings suppress all escape sequences except for escaping the quote character used to enclose the string. This means <code>\\x45</code> becomes the literal string <code>\"\\x45\"</code> rather than the character <code>\"E\"</code>. If you need hex or Unicode escapes to be processed, use regular string literals.</p>"}, {"location": "obj/grep/#json-output-format", "title": "JSON Output Format", "text": "<p>The <code>j</code> option produces JSON output with detailed match information. Each match is returned as a JSON object containing:</p> <ul> <li><code>match</code>: The full matched substring</li> <li>Named groups: Each named group from the regex pattern (e.g., <code>year</code>, <code>month</code>, <code>day</code>)</li> <li><code>offset</code>: Byte offset of the match in the input string</li> <li><code>line</code>: Line number where the match was found</li> </ul>"}, {"location": "obj/grep/#json-object-structure", "title": "JSON Object Structure", "text": "<pre><code>{\n  \"match\": \"matched text\",\n  \"group1\": \"captured value\",\n  \"group2\": \"captured value\",\n  \"offset\": 0,\n  \"line\": 1\n}\n</code></pre>"}, {"location": "obj/grep/#examples_1", "title": "Examples", "text": "<pre><code>/* Basic JSON output */\n\"Hello world\".grep(\"\\\\w+\", \"oj\")\n/* Result: [{\"match\":\"Hello\",\"offset\":0,\"line\":1},{\"match\":\"world\",\"offset\":6,\"line\":1}] */\n\n/* JSON with named groups */\n\"John Doe (30)\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\")\n/* Result: [{\"match\":\"John Doe (30)\",\"first\":\"John\",\"last\":\"Doe\",\"age\":\"30\",\"offset\":0,\"line\":1}] */\n\n/* Date parsing with named groups */\n\"2023-04-27\\n2022-12-31\".grep(\"(?&lt;year&gt;\\\\d{4})-(?&lt;month&gt;\\\\d{2})-(?&lt;day&gt;\\\\d{2})\", \"oj\")\n/* Result: [\n  {\"match\":\"2023-04-27\",\"year\":\"2023\",\"month\":\"04\",\"day\":\"27\",\"offset\":0,\"line\":1},\n  {\"match\":\"2022-12-31\",\"year\":\"2022\",\"month\":\"12\",\"day\":\"31\",\"offset\":11,\"line\":2}\n] */\n\n/* Complex JSON example with multiple patterns */\n\"Email: user@domain.com, Phone: +1-555-1234\".grep(\"(?P&lt;email&gt;[\\\\w.-]+@[\\\\w.-]+)|(?P&lt;phone&gt;\\\\+\\\\d{1,3}-\\\\d{3}-\\\\d{4})\", \"oj\")\n/* Result: [\n  {\"match\":\"user@domain.com\",\"email\":\"user@domain.com\",\"phone\":null,\"offset\":7,\"line\":1},\n  {\"match\":\"+1-555-1234\",\"email\":null,\"phone\":\"+1-555-1234\",\"offset\":31,\"line\":1}\n] */\n</code></pre>"}, {"location": "obj/grep/#accessing-named-groups", "title": "Accessing Named Groups", "text": "<pre><code>/* Extract specific groups from JSON output */\nresult = \"John Doe (30)\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\")\nfirst_name = result[0][\"first\"]  /* \"John\" */\nlast_name = result[0][\"last\"]    /* \"Doe\" */\nage = result[0][\"age\"]           /* \"30\" */\n</code></pre>"}, {"location": "obj/grep/#notes", "title": "Notes", "text": "<ul> <li>Named groups: All named groups from the regex pattern are included in the JSON output</li> <li>Unmatched groups: Groups that don't match are set to <code>null</code></li> <li>Line numbers: Correctly calculated based on newline characters in the input</li> <li>Offsets: Byte offsets from the start of the input string</li> <li>Order: JSON object key order may vary but all named groups are always present</li> </ul>"}, {"location": "obj/grep/#named-groups", "title": "Named Groups", "text": "<pre><code>/* Basic named groups */\n\"John Doe\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+)\", \"oj\")\n/* Result: [{\"match\":\"John Doe\",\"first\":\"John\",\"last\":\"Doe\",\"offset\":0,\"line\":1}] */\n\n/* Email extraction */\n\"Contact: john@example.com\".grep(\"(?P&lt;email&gt;[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,})\", \"oj\")\n/* Result: [{\"match\":\"john@example.com\",\"email\":\"john@example.com\",\"offset\":9,\"line\":1}] */\n\n/* Phone number parsing */\n\"Call +1-555-123-4567\".grep(\"(?P&lt;country&gt;\\\\+\\\\d{1,3})-(?P&lt;area&gt;\\\\d{3})-(?P&lt;prefix&gt;\\\\d{3})-(?P&lt;line&gt;\\\\d{4})\", \"oj\")\n/* Result: [{\"match\":\"+1-555-123-4567\",\"country\":\"+1\",\"area\":\"555\",\"prefix\":\"123\",\"line\":\"4567\",\"offset\":5,\"line\":1}] */\n\n/* Direct access to named groups */\nresult = \"John Doe\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+)\", \"oj\")\nfirst = result[0][\"first\"]  /* \"John\" */\nlast = result[0][\"last\"]    /* \"Doe\" */\n</code></pre>"}, {"location": "obj/grep/#context-lines", "title": "Context Lines", "text": "<p>Context lines provide surrounding context for matches, similar to ripgrep's <code>-A</code>, <code>-B</code>, and <code>-C</code> options:</p> <pre><code>input = \"Header\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nFooter\";\n\n/* After context (2 lines after match) */\ninput.grep(\"Line 2\", \"A2\")\n[\"Line 2\", \"Line 3\", \"Line 4\"]\n\n/* Before context (2 lines before match) */\ninput.grep(\"Line 5\", \"B2\")\n[\"Line 3\", \"Line 4\", \"Line 5\"]\n\n/* Combined context (1 line before and after) */\ninput.grep(\"Line 4\", \"A1B1\")\n[\"Line 3\", \"Line 4\", \"Line 5\"]\n\n/* Context merging - overlapping regions are automatically merged */\ninput2 = \"a\\nb\\nc\\nd\\ne\\nf\";\ninput2.grep(\"c|d\", \"A1B1\")\n[\"b\", \"c\", \"d\", \"e\"]  /* Overlapping context merged into single block */\n</code></pre> <p>Context Merging: Overlapping context regions are automatically merged into single blocks, ensuring all relevant context is shown without duplication. This matches ripgrep's behavior for optimal readability and prevents redundant context lines.</p>"}, {"location": "obj/grep/#context-separators", "title": "Context Separators", "text": "<p>When multiple non-overlapping context blocks exist, they are separated by <code>--</code> lines (matching ripgrep/GNU grep behavior):</p> <pre><code>/* Multiple matches with context - separated by -- lines */\ninput = \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\";\ninput.grep(\"Line 2|Line 6\", \"A1B1\")\n/* Result: [\"Line 1\", \"Line 2\", \"Line 3\", \"--\", \"Line 5\", \"Line 6\", \"Line 7\"] */\n\n/* Context separators are not output in match-only mode */\ninput.grep(\"Line 2|Line 6\", \"oA1B1\")\n/* Result: [\"Line 2\", \"Line 6\"]  - Only matches, no context or separators */\n\n/* JSON output uses --- as separator */\ninput.grep(\"Line 2|Line 6\", \"jA1B1\")\n/* Result: [\"Line 1\", \"Line 2\", \"Line 3\", \"---\", \"Line 5\", \"Line 6\", \"Line 7\"] */\n</code></pre> <p>Note: Context separators are only added between non-overlapping context blocks. When context blocks overlap or are adjacent, no separator is needed.</p>"}, {"location": "obj/grep/#advanced-regex-features_1", "title": "Advanced Regex Features", "text": "<pre><code>/* Unicode categories */\n\"Hello \u4e16\u754c 123 \u20ac\".grep(\"\\\\p{L}+\", \"o\")\n/* Result: [\"Hello\", \"\u4e16\u754c\"] */\n\n/* Unicode scripts */\n\"Hello \u4e16\u754c\".grep(\"\\\\p{sc=Latin}\", \"o\")\n/* Result: [\"Hello\"] */\n\n/* Unicode script extensions */\n\"Hello \u4e16\u754c\".grep(\"\\\\p{scx:Han}\", \"o\")\n/* Result: [\"\u4e16\u754c\"] */\n\n/* Unicode general categories */\n\"Hello World\".grep(\"\\\\p{Lu}\", \"o\")\n/* Result: [\"H\", \"W\"] */\n\n/* Atomic groups */\n\"aaaa\".grep(\"(?&gt;a+)a\", \"o\")\n/* Result: [] (atomic group prevents backtracking) */\n\n/* Lookaround assertions */\n/* Positive lookahead - word followed by number */\n\"word123 text456\".grep(\"\\\\w+(?=\\\\d)\", \"o\")\n/* Result: [\"word\", \"text\"] */\n\n/* Negative lookahead - word not followed by number */\n\"word123 text456\".grep(\"\\\\w+(?!\\\\d)\", \"o\")\n/* Result: [\"word123\", \"text456\"] */\n\n/* Positive lookbehind - number preceded by word */\n\"word123 text456\".grep(\"(?&lt;=\\\\w)\\\\d+\", \"o\")\n/* Result: [\"123\", \"456\"] */\n\n/* Negative lookbehind - number not preceded by word */\n\"123 word456\".grep(\"(?&lt;!\\\\w)\\\\d+\", \"o\")\n/* Result: [\"123\"] */\n\n/* Complex password validation */\n\"password123\".grep(\"(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\d).{8,}\", \"o\")\n/* Result: [] (no uppercase letter) */\n\n\"Password123\".grep(\"(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\d).{8,}\", \"o\")\n/* Result: [\"Password123\"] (valid password) */\n\n/* Advanced Unicode properties */\n\"Hello \ud83d\ude00 World \ud83c\udf0d\".grep(\"\\\\p{Emoji}\", \"o\")\n/* Result: [\"\ud83d\ude00\", \"\ud83c\udf0d\"] */\n\n\"Hello \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 World\".grep(\"\\\\p{So}\", \"o\")\n/* Result: [\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"] */\n\n/* Advanced Unicode properties with mixed content */\n\"Hello \u4e16\u754c \ud83d\ude00 \ud83c\udf0d\".grep(\"\\\\p{So}\", \"o\")\n/* Result: [\"\ud83d\ude00\", \"\ud83c\udf0d\"] (symbols only, not Han characters) */\n\n/* Emoji sequences as symbols */\n\"Family: \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\".grep(\"\\\\p{So}\", \"o\")\n/* Result: [\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"] (entire family emoji as one symbol) */\n\n/* Possessive quantifiers */\n\"aaaa\".grep(\"a++a\", \"o\")\n/* Result: [] (possessive quantifier prevents backtracking) */\n\n\"aaa\".grep(\"a++\", \"o\")\n/* Result: [\"aaa\"] (matches all a's greedily without backtracking) */\n\n/* Edge cases for possessive quantifiers */\n\"a\".grep(\"a?+\", \"o\")\n/* Result: [\"a\"] (possessive optional quantifier) */\n\n\"abc\".grep(\"a*+b\", \"o\")\n/* Result: [\"ab\"] (possessive star with following character) */\n\n/* Conditional patterns */\n\"abc123\".grep(\"(a)?(?(1)b|c)\", \"o\")\n/* Result: [\"ab\"] (conditional pattern works) */\n\n\"c123\".grep(\"(a)?(?(1)b|c)\", \"o\")\n/* Result: [\"c\"] (alternative branch when 'a' is not present) */\n\n/* More complex conditional patterns */\n\"xyz\".grep(\"(x)?(?(1)y|z)\", \"o\")\n/* Result: [\"xy\"] (first branch when 'x' is present) */\n\n\"yz\".grep(\"(x)?(?(1)y|z)\", \"o\")\n/* Result: [\"z\"] (second branch when 'x' is not present) */\n\n/* Context lines */\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\".grep(\"Line 3\", \"A1\")\n/* Result: [\"Line 3\", \"Line 4\"] (shows 1 line after) */\n\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\".grep(\"Line 3\", \"B1\")\n/* Result: [\"Line 2\", \"Line 3\"] (shows 1 line before) */\n\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\".grep(\"Line 3\", \"C1\")\n/* Result: [\"Line 2\", \"Line 3\", \"Line 4\"] (shows 1 line before and after) */\n\n/* Named groups with JSON output */\n\"John Doe (30)\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\")\n/* Result: [{\"match\":\"John Doe (30)\",\"first\":\"John\",\"last\":\"Doe\",\"age\":\"30\",\"offset\":0,\"line\":1}] */\n</code></pre>"}, {"location": "obj/grep/#json-output-examples", "title": "JSON Output Examples", "text": "<pre><code>/* Basic JSON output */\n\"Hello world\".grep(\"\\\\w+\", \"oj\")\n/* Result: [{\"match\":\"Hello\",\"offset\":0,\"line\":1},{\"match\":\"world\",\"offset\":6,\"line\":1}] */\n\n/* JSON with named groups */\n\"John Doe (30)\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\")\n/* Result: [{\"match\":\"John Doe (30)\",\"first\":\"John\",\"last\":\"Doe\",\"age\":\"30\",\"offset\":0,\"line\":1}] */\n\n/* Complex JSON example */\n\"Email: user@domain.com, Phone: +1-555-1234\".grep(\"(?P&lt;email&gt;[\\\\w.-]+@[\\\\w.-]+)|(?P&lt;phone&gt;\\\\+\\\\d{1,3}-\\\\d{3}-\\\\d{4})\", \"oj\")\n/* Result: [\n  {\"match\":\"user@domain.com\",\"email\":\"user@domain.com\",\"offset\":7,\"line\":1},\n  {\"match\":\"+1-555-1234\",\"phone\":\"+1-555-1234\",\"offset\":31,\"line\":1}\n] */\n\n/* Accessing named groups directly */\nresult = \"John Doe (30)\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+) \\\\((?P&lt;age&gt;\\\\d+)\\\\)\", \"oj\")\nfirst_name = result[0][\"first\"]  /* \"John\" */\nlast_name = result[0][\"last\"]    /* \"Doe\" */\nage = result[0][\"age\"]           /* \"30\" */\n</code></pre>"}, {"location": "obj/grep/#additional-parameters-examples", "title": "Additional Parameters Examples", "text": "<pre><code>/* Unicode normalization examples */\n\"caf\u00e9\".grep(\"cafe\", \"o\", \"\", \"NFC\")\n/* Result: [\"caf\u00e9\"] - NFC normalization matches decomposed form */\n\n\"caf\u00e9\".grep(\"cafe\", \"o\", \"\", \"NFD\")\n/* Result: [\"caf\u00e9\"] - NFD normalization matches composed form */\n\n/* Binary mode for raw byte processing */\n\"\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f\".grep(\"Hello\", \"o\", \"\", \"NONE\", \"BINARY\")\n/* Result: [\"Hello\"] - Binary mode processes raw bytes */\n\n/* Custom delimiter with normalization */\n\"apple|||pear|||banana\".grep(\"\\\\w+\", \"o\", \"|||\", \"NFC\")\n/* Result: [\"apple\", \"pear\", \"banana\"] - Custom delimiter with NFC normalization */\n\n/* More custom delimiter examples */\n\"section1###section2###section3\".grep(\"section\\\\d+\", \"o\", \"###\")\n/* Result: [\"section1\", \"section2\", \"section3\"] - Using \"###\" as delimiter */\n\n\"item1|item2|item3\".grep(\"item\\\\d+\", \"o\", \"|\")\n/* Result: [\"item1\", \"item2\", \"item3\"] - Using \"|\" as delimiter */\n\n\"record1---record2---record3\".grep(\"record\\\\d+\", \"o\", \"---\")\n/* Result: [\"record1\", \"record2\", \"record3\"] - Using \"---\" as delimiter */\n\n/* Binary mode with custom delimiter */\n\"data1\\\\x00data2\\\\x00data3\".grep(\"data\\\\d+\", \"o\", \"\\\\x00\", \"NONE\", \"BINARY\")\n/* Result: [\"data1\", \"data2\", \"data3\"] - Binary mode with null delimiter */\n</code></pre>"}, {"location": "obj/grep/#performance-features", "title": "Performance Features", "text": ""}, {"location": "obj/grep/#caching", "title": "Caching", "text": "<ul> <li>Pattern compilation caching</li> <li>Text normalization caching</li> <li>Offset mapping caching</li> <li>Thread-safe cache management</li> </ul>"}, {"location": "obj/grep/#optimization", "title": "Optimization", "text": "<ul> <li>ASCII-only pattern detection</li> <li>Fast path for simple patterns</li> <li>Unicode property optimization</li> <li>Memory-efficient processing</li> </ul>"}, {"location": "obj/grep/#performance-optimization-details", "title": "Performance Optimization Details", "text": "<p>Grapa grep includes several performance optimizations:</p> <ol> <li>Pattern Compilation Caching - Compiled patterns are cached for reuse</li> <li>PCRE2 JIT Compilation - Just-In-Time compilation for fast pattern matching</li> <li>Fast Path Expansions - Optimized paths for simple literal, word, and digit patterns</li> <li>LRU Cache Management - Thread-safe LRU cache for text normalization</li> <li>Parallel Processing - Multi-threaded processing for large inputs</li> </ol>"}, {"location": "obj/grep/#parallel-processing", "title": "Parallel Processing", "text": "<p>Grapa grep now supports parallel processing for large inputs:</p> <ul> <li>Automatic worker detection - Determines optimal number of threads based on input size</li> <li>Smart chunking - Splits input at line boundaries to avoid breaking matches</li> <li>Thread-safe processing - Uses std::async for cross-platform compatibility</li> <li>Fallback to sequential - Automatically uses single-threaded processing for small inputs</li> </ul> <p>Usage: <pre><code>/* Automatic parallel processing (recommended) */\n\"large_input\".grep(\"pattern\", \"o\")\n\n/* Manual parallel processing with specific worker count */\n\"large_input\".grep(\"pattern\", \"o\", \"\", \"\", \"\", \"\", 4)  /* 4 worker threads */\n\n/* Sequential processing (force single-threaded) */\n\"large_input\".grep(\"pattern\", \"o\", \"\", \"\", \"\", \"\", 1)  /* 1 worker thread */\n\n/* Auto-detection (same as default) */\n\"large_input\".grep(\"pattern\", \"o\", \"\", \"\", \"\", \"\", 0)  /* Auto-detect optimal threads */\n</code></pre></p> <p>num_workers Parameter Values: - <code>0</code> (default): Auto-detection - determines optimal number of threads based on input size - <code>1</code>: Sequential processing - forces single-threaded execution - <code>2+</code>: Parallel processing - uses specified number of worker threads</p> <p>Performance characteristics: - Small inputs (&lt; 1MB): Single-threaded processing (auto-detected) - Medium inputs (1-10MB): 2-4 worker threads (auto-detected) - Large inputs (&gt; 10MB): Up to 16 worker threads (auto-detected, configurable)</p> <p>Note: All grep features (context lines, invert match, all-mode) work correctly in parallel mode.</p> <p>Performance Examples: <pre><code>/* Large file processing with parallel workers */\nlarge_content.grep(\"pattern\", \"oj\", \"\", \"\", \"\", \"\", 4)\n/* Result: Faster processing with 4 worker threads */\n\n/* Sequential processing for small inputs */\nsmall_content.grep(\"pattern\", \"oj\", \"\", \"\", \"\", \"\", 1)\n/* Result: Sequential processing, no threading overhead */\n\n/* Auto-detection for optimal performance */\nany_size_content.grep(\"pattern\", \"oj\", \"\", \"\", \"\", \"\", 0)\n/* Result: Automatically chooses best approach */\n</code></pre></p>"}, {"location": "obj/grep/#binary-mode-processing", "title": "Binary Mode Processing", "text": ""}, {"location": "obj/grep/#when-to-use-binary-mode", "title": "When to Use Binary Mode", "text": "<p>Binary mode is useful for: - Binary files: Executables, images, compressed files - Network data: Raw packet analysis - Memory dumps: Forensic analysis - Data that should not be Unicode-processed</p>"}, {"location": "obj/grep/#binary-vs-unicode-mode", "title": "Binary vs Unicode Mode", "text": "Aspect Unicode Mode Binary Mode Processing Full Unicode normalization and case folding Raw byte processing Performance Slower due to Unicode overhead Faster for binary data Memory Higher due to normalization Lower memory usage Use case Text files, user input Binary files, network data <pre><code>/* Unicode mode (default) - for text files */\n\"caf\u00e9\".grep(\"cafe\", \"i\")               /* Case-insensitive with Unicode folding */\n\n/* Binary mode - for binary data */\n\"\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f\".grep(\"Hello\", \"o\", \"\", \"NONE\", \"BINARY\")\n/* Result: [\"Hello\"] - Raw byte processing */\n\n/* Binary data with null delimiters */\n\"data1\\\\x00data2\\\\x00data3\".grep(\"data\\\\d+\", \"o\", \"\\\\x00\", \"NONE\", \"BINARY\")\n/* Result: [\"data1\", \"data2\", \"data3\"] - Binary mode with null delimiter */\n</code></pre>"}, {"location": "obj/grep/#advanced-usage-patterns", "title": "Advanced Usage Patterns", "text": ""}, {"location": "obj/grep/#complex-context-line-combinations", "title": "Complex Context Line Combinations", "text": "<p>Context options can be combined flexibly for sophisticated output:</p> <pre><code>/* Show 2 lines after, 1 line before, and 3 lines before/after */\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\".grep(\"Line 3\", \"A2B1C3\")\n/* Result: [\"Line 2\", \"Line 3\", \"Line 4\", \"Line 5\"] \n(B1: Line 2, A2: Line 4-5, C3: additional context)\nNote: Overlapping context lines are allowed for complete coverage */\n\n/* Show 1 line before and 2 lines after */\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\".grep(\"Line 3\", \"B1A2\")\n/* Result: [\"Line 2\", \"Line 3\", \"Line 4\"] */\n\n/* Show 3 lines before and 1 line after */\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\".grep(\"Line 4\", \"B3A1\")\n/* Result: [\"Line 1\", \"Line 2\", \"Line 3\", \"Line 4\", \"Line 5\"] */\n</code></pre>"}, {"location": "obj/grep/#performance-tuning-for-large-datasets", "title": "Performance Tuning for Large Datasets", "text": "<p>For very large files (&gt;100MB): <pre><code>/* Use 'a' option for single-string processing */\nlarge_content.grep(\"pattern\", \"a\")     /* Process as single string */\n\n/* Use specific Unicode properties instead of broad categories */\nlarge_content.grep(\"\\\\p{Lu}\", \"o\")     /* Better than \\\\p{L} for uppercase only */\n\n/* Disable normalization if not needed */\nlarge_content.grep(\"pattern\", \"o\")     /* No 'N' option unless required */\n\n/* Use fast path patterns when possible */\nlarge_content.grep(\"\\\\w+\", \"o\")        /* Fast path for word matching */\n</code></pre></p> <p>Memory usage considerations: - Cache size: LRU cache limits memory usage automatically - Pattern compilation: Compiled patterns are cached but use memory - Large files: Consider processing in chunks for very large files</p>"}, {"location": "obj/grep/#thread-safety", "title": "Thread Safety", "text": "<p>All grep operations are thread-safe: - Concurrent access: Multiple threads can call grep simultaneously - Cache safety: All caches are protected with mutexes - No shared state: Each grep call is independent</p> <pre><code>/* Thread-safe concurrent usage */\n/* Thread 1 */\nresult1 = text.grep(\"pattern1\", \"oj\")\n\n/* Thread 2 (simultaneous) */\nresult2 = text.grep(\"pattern2\", \"oj\")\n\n/* Both operations are safe and independent */\n</code></pre>"}, {"location": "obj/grep/#troubleshooting", "title": "Troubleshooting", "text": ""}, {"location": "obj/grep/#common-regex-compilation-errors", "title": "Common Regex Compilation Errors", "text": "<p>Invalid pattern syntax: <pre><code>/* Unmatched parentheses */\n\"text\".grep(\"(\", \"j\")                  /* Error: Unmatched '(' */\n\n/* Invalid quantifier */\n\"text\".grep(\"a{\", \"j\")                 /* Error: Invalid quantifier */\n\n/* Invalid Unicode property */\n\"text\".grep(\"\\\\p{Invalid}\", \"j\")       /* Error: Unknown property */\n</code></pre></p> <p>Solutions: <pre><code>/* Fix unmatched parentheses */\n\"text\".grep(\"(group)\", \"j\")            /* Valid: matched parentheses */\n\n/* Fix invalid quantifier */\n\"text\".grep(\"a{1,3}\", \"j\")             /* Valid: proper quantifier */\n\n/* Use valid Unicode properties */\n\"text\".grep(\"\\\\p{L}\", \"j\")             /* Valid: letter property */\n</code></pre></p>"}, {"location": "obj/grep/#performance-issues", "title": "Performance Issues", "text": "<p>Slow pattern matching: <pre><code>/* Problem: Catastrophic backtracking */\n/* Create long string manually (Grapa doesn't have repeat function) */\nlong_string = \"\";\ni = 0;\nwhile (i &lt; 10000) {\n    long_string = long_string + \"a\";\n    i = i + 1;\n}\nlong_string.grep(\"(a+)+\", \"o\")   /* Very slow */\n\n/* Solution: Use atomic groups */\nlong_string.grep(\"(?&gt;a+)+\", \"o\") /* Much faster */\n\n/* Problem: Broad Unicode categories */\n\"text\".grep(\"\\\\p{L}+\", \"o\")            /* Slower for large text */\n\n/* Solution: Use specific properties */\n\"text\".grep(\"\\\\p{Lu}+\", \"o\")           /* Faster for uppercase only */\n</code></pre></p> <p>Memory usage issues: <pre><code>/* Problem: Large cache accumulation */\n/* Solution: Process in smaller chunks or restart application */\n\n/* Problem: Large compiled patterns */\n/* Solution: Use simpler patterns or break into multiple searches */\n</code></pre></p>"}, {"location": "obj/grep/#unicode-normalization-issues", "title": "Unicode Normalization Issues", "text": "<p>Unexpected matches: <pre><code>/* Problem: Different normalization forms */\n\"caf\u00e9\".grep(\"cafe\", \"o\")               /* No match without normalization */\n\n/* Solution: Use normalization */\n\"caf\u00e9\".grep(\"cafe\", \"N\")               /* Matches with NFC normalization */\n\n/* Problem: Case sensitivity with Unicode */\n\"\u0130stanbul\".grep(\"istanbul\", \"i\")       /* May not match due to Turkish '\u0130' */\n\n/* Solution: Use diacritic-insensitive matching */\n\"\u0130stanbul\".grep(\"istanbul\", \"di\")      /* Matches with diacritic stripping */\n</code></pre></p>"}, {"location": "obj/grep/#debugging-tips", "title": "Debugging Tips", "text": "<p>Check pattern validity: <pre><code>/* Test pattern compilation */\nresult = text.grep(\"pattern\", \"j\")\nif (result.type() == $ERR) {\n    echo(\"Pattern compilation failed\")\n    /* Check pattern syntax */\n}\n</code></pre></p> <p>Verify Unicode handling: <pre><code>/* Test Unicode normalization */\n\"caf\u00e9\".grep(\"cafe\", \"N\")               /* Should match with normalization */\n\n/* Test case folding */\n\"CAF\u00c9\".grep(\"cafe\", \"i\")               /* Should match case-insensitive */\n\n/* Test diacritic stripping */\n\"caf\u00e9\".grep(\"cafe\", \"d\")               /* Should match diacritic-insensitive */\n</code></pre></p> <p>Performance profiling: <pre><code>/* Test with small sample first */\nsample = large_text.substring(0, 1000)\nresult = sample.grep(\"pattern\", \"oj\")   /* Test pattern on small sample */\n\n/* If successful, test on full text */\nif (result.type() != $ERR) {\n    full_result = large_text.grep(\"pattern\", \"oj\")\n}\n</code></pre></p>"}, {"location": "obj/grep/#testing-and-verification", "title": "Testing and Verification", "text": ""}, {"location": "obj/grep/#performance-testing", "title": "Performance Testing", "text": "<p>A comprehensive performance test file is available to verify optimizations:</p> <pre><code>/* Run performance tests */\ngrapa -cfile \"test_performance_optimizations.grc\"\n</code></pre> <p>Test Coverage: - JIT compilation detection and functionality - Fast path optimizations for literal, word, and digit patterns - LRU cache functionality for text normalization - Complex Unicode pattern performance - Mixed pattern performance - Edge case handling</p>"}, {"location": "obj/grep/#capability-testing", "title": "Capability Testing", "text": "<p>Verify current Unicode and regex capabilities:</p> <pre><code>/* Run comprehensive capability tests */\ngrapa -cfile \"test_current_capabilities.grc\"\n</code></pre> <p>Test Coverage: - Basic Unicode properties (<code>\\p{L}</code>, <code>\\p{N}</code>, etc.) - Named groups and JSON output - Lookaround assertions - Unicode grapheme clusters - Advanced Unicode properties - Context lines - Atomic groups - Possessive quantifiers - Conditional patterns - Unicode scripts and script extensions - Unicode general categories - Unicode blocks (not supported) - Unicode age properties (not supported) - Unicode bidirectional classes (not supported)</p>"}, {"location": "obj/grep/#feature-specific-tests", "title": "Feature-Specific Tests", "text": "<p>Individual test files for specific features:</p> <pre><code>/* Test Unicode normalization and diacritic handling */\ngrapa -cfile \"test_grapheme_unicode_normalization.grc\"\n\n/* Test advanced Unicode features */\ngrapa -cfile \"test_unicode_advanced_features.grc\"\n\n/* Test lookaround assertions */\ngrapa -cfile \"test_lookaround_assertions.grc\"\n\n/* Test atomic groups */\ngrapa -cfile \"test_atomic_groups.grc\"\n\n/* Test Unicode grapheme clusters */\ngrapa -cfile \"test_unicode_grapheme_clusters.grc\"\n</code></pre>"}, {"location": "obj/grep/#regression-testing", "title": "Regression Testing", "text": "<p>To ensure no regressions after changes:</p> <pre><code>/* Run core functionality tests */\ngrapa -cfile \"test_current_capabilities.grc\"\ngrapa -cfile \"test_performance_optimizations.grc\"\n\n/* Verify basic functionality */\n\"Hello world\".grep(\"world\", \"oj\")       /* Should return matches */\n\"caf\u00e9\".grep(\"cafe\", \"N\")               /* Should match with normalization */\n\"Hello \u4e16\u754c\".grep(\"\\\\p{L}+\", \"oj\")      /* Should match Unicode letters */\n</code></pre>"}, {"location": "obj/grep/#zero-length-match-and-empty-string-output", "title": "Zero-Length Match and Empty String Output", "text": "<p>Update (2024-12): Zero-length matches and explicit empty strings in arrays are now correctly output as <code>\"\"</code> (empty string), never as <code>null</code>. This matches ripgrep's behavior and ensures round-trip consistency and correct scripting semantics. The previous null output bug has been resolved.</p>"}, {"location": "obj/grep/#example-zero-length-match", "title": "Example: Zero-Length Match", "text": "<pre><code>/* Zero-length match example */\n\"a\\nb\\n\".grep(\"^\", \"o\")\n/* Result: [\"\", \"a\", \"\", \"b\", \"\"] */\n</code></pre>"}, {"location": "obj/grep/#example-array-literal-with-empty-string", "title": "Example: Array Literal with Empty String", "text": "<pre><code>[1, \"\", 2]\n/* Result: [1, \"\", 2] */\n</code></pre>"}, {"location": "obj/grep/#output-formatting-and-array-design_1", "title": "Output Formatting and Array Design", "text": ""}, {"location": "obj/grep/#why-arrays-instead-of-strings_1", "title": "Why Arrays Instead of Strings?", "text": "<p>Grapa grep is designed as an integrated programming language feature, not a standalone console tool. This fundamental difference explains the output format:</p> <p>Grapa Grep (Integrated Language): - Returns arrays of strings for programmatic use - Removes delimiters from output strings (clean data for processing) - Designed for scripting and data manipulation - Example: <code>[\"line1\", \"line2\", \"line3\"]</code> (no <code>\\n</code> in strings)</p> <p>ripgrep/GNU grep (Console Tools): - Outputs single string with embedded delimiters - Preserves delimiters in output for console display - Designed for command-line text processing - Example: <code>\"line1\\nline2\\nline3\\n\"</code> (with <code>\\n</code> in string)</p>"}, {"location": "obj/grep/#delimiter-removal-behavior_1", "title": "Delimiter Removal Behavior", "text": "<p>Grapa grep automatically removes delimiters from output strings:</p> <pre><code>/* Input with custom delimiter */\ninput = \"line1|||line2|||line3\";\n\n/* Grapa grep removes delimiters from output */\nresult = input.grep(\"line\", \"o\", \"|||\");\n/* Result: [\"line1\", \"line2\", \"line3\"] (clean strings, no |||) */\n\n/* For console output, you can join with delimiter */\nconsole_output = result.join(\"|||\");\n/* Result: \"line1|||line2|||line3\" */\n</code></pre>"}, {"location": "obj/grep/#console-output-equivalence_1", "title": "Console Output Equivalence", "text": "<p>To get console-equivalent output in Grapa:</p> <pre><code>/* Grapa approach */\ninput = \"line1\\nline2\\nline3\";\nresult = input.grep(\"line\", \"o\");  /* [\"line1\", \"line2\", \"line3\"] */\nconsole_output = result.join(\"\\n\");  /* \"line1\\nline2\\nline3\" */\n\n/* This matches ripgrep output: \"line1\\nline2\\nline3\" */\n</code></pre>"}, {"location": "obj/grep/#benefits-of-array-design_1", "title": "Benefits of Array Design", "text": "<ol> <li>Programmatic Use: Arrays are easier to process in scripts</li> <li>Clean Data: No delimiter artifacts in output strings</li> <li>Flexible Output: Can join with any delimiter for different formats</li> <li>Language Integration: Natural fit with Grapa's array-based design</li> <li>Python Integration: Arrays map naturally to Python lists</li> </ol>"}, {"location": "obj/grep/#custom-delimiter-support_1", "title": "Custom Delimiter Support", "text": "<p>Grapa grep fully supports multi-character delimiters:</p> <pre><code>/* Single character delimiter */\n\"line1|line2|line3\".grep(\"line\", \"o\", \"|\")\n/* Result: [\"line1\", \"line2\", \"line3\"] */\n\n/* Multi-character delimiter */\n\"line1|||line2|||line3\".grep(\"line\", \"o\", \"|||\")\n/* Result: [\"line1\", \"line2\", \"line3\"] */\n\n/* Complex delimiter */\n\"line1&lt;DELIM&gt;line2&lt;DELIM&gt;line3\".grep(\"line\", \"o\", \"&lt;DELIM&gt;\")\n/* Result: [\"line1\", \"line2\", \"line3\"] */\n</code></pre> <p>Note: All delimiters are automatically removed from output strings, regardless of length or complexity.</p>"}, {"location": "obj/grep/#error-output", "title": "Error Output", "text": "<p>Note: Invalid regex patterns always return <code>\"$ERR\"</code> (not a JSON object or other format).</p>"}, {"location": "obj/grep/#test-coverage-and-regression-testing", "title": "Test Coverage and Regression Testing", "text": "<p>Update (2024-12): The test suite now includes explicit checks for empty string vs null output, zero-length matches, and all advanced edge cases to ensure full ripgrep parity (excluding file system features). The previous null output bug is now fixed. See Testing Documentation for details.</p>"}, {"location": "obj/grep/#comprehensive-features-summary", "title": "Comprehensive Features Summary", "text": "<p>Update (2024-06): Grapa grep now matches ripgrep for all in-memory/streaming features, with the only exception being SIMD optimizations and file system integration. All advanced Unicode, regex, and context features are fully supported and tested.</p>"}, {"location": "obj/grep/#fully-supported-features", "title": "\u2705 Fully Supported Features", "text": "<p>Unicode Support: - \u2705 Basic Unicode properties (<code>\\p{L}</code>, <code>\\p{N}</code>, <code>\\p{Z}</code>, <code>\\p{P}</code>, <code>\\p{S}</code>, <code>\\p{C}</code>, <code>\\p{M}</code>) - \u2705 Advanced Unicode properties (<code>\\p{Emoji}</code>, <code>\\p{So}</code>, <code>\\p{Sc}</code>, etc.) - \u2705 Unicode scripts (<code>\\p{sc=Latin}</code>, <code>\\p{sc=Han}</code>, <code>\\p{sc=Cyrillic}</code>, etc.) - \u2705 Unicode script extensions (<code>\\p{scx:Han}</code>, etc.) - \u2705 Unicode general categories (<code>\\p{Lu}</code>, <code>\\p{Ll}</code>, <code>\\p{Lt}</code>, etc.) - \u2705 Unicode grapheme clusters (<code>\\X</code>) - handles emoji sequences, combining characters - \u2705 Unicode normalization (NFC, NFD, NFKC, NFKD) - \u2705 Case-insensitive matching with proper Unicode case folding</p> <p>Advanced Regex Features: - \u2705 Named groups (<code>(?P&lt;name&gt;...)</code>) - \u2705 Atomic groups (<code>(?&gt;...)</code>) - \u2705 Lookaround assertions (<code>(?=...)</code>, <code>(?&lt;=...)</code>, <code>(?!...)</code>, <code>(?&lt;!...)</code>) - \u2705 Possessive quantifiers (<code>*+</code>, <code>++</code>, <code>?+</code>, <code>{n,m}+</code>) - \u2705 Conditional patterns (<code>?(condition)...</code>)</p> <p>Output and Context Features: - \u2705 JSON output with named groups, offsets, and line numbers - \u2705 Context lines (<code>A&lt;n&gt;</code>, <code>B&lt;n&gt;</code>, <code>C&lt;n&gt;</code>) with flexible combinations - \u2705 All basic grep options (<code>o</code>, <code>i</code>, <code>v</code>, <code>x</code>, <code>n</code>, <code>l</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>g</code>)</p> <p>Performance Features: - \u2705 Pattern compilation caching - \u2705 Text normalization caching - \u2705 Offset mapping caching - \u2705 Thread-safe cache management</p>"}, {"location": "obj/grep/#not-supported-3-specialized-features", "title": "\u274c Not Supported (3 specialized features):", "text": "<ul> <li>\u274c Unicode blocks (<code>\\p{In_Basic_Latin}</code>) - use Unicode scripts instead</li> <li>\u274c Unicode age properties (<code>\\p{Age=1.1}</code>) - very specialized</li> <li>\u274c Unicode bidirectional classes (<code>\\p{Bidi_Class:Left_To_Right}</code>) - very specialized</li> </ul> <p>Coverage: Grapa supports 95%+ of practical Unicode and regex use cases with production-ready reliability.</p>"}, {"location": "obj/grep/#features-not-currently-supported", "title": "Features Not Currently Supported", "text": ""}, {"location": "obj/grep/#search-strategy-features", "title": "Search Strategy Features", "text": "<ul> <li>\u2705 Case-insensitive matching - Use \"i\" flag for explicit case-insensitive matching: <code>\"word\".grep(\"hello\", \"i\")</code></li> <li>\u2705 Word boundary mode - Use \"w\" option or <code>\\b</code> pattern anchors: <code>\"word\".grep(\"hello\", \"w\")</code> or <code>\"word\".grep(\"\\\\bhello\\\\b\", \"o\")</code></li> <li>\u2705 Column numbers - Use \"T\" option for column numbers: <code>\"word\".grep(\"hello\", \"oT\")</code></li> </ul> <p>Note: Grapa uses explicit \"i\" flag for case-insensitive matching rather than ripgrep's automatic smart-case behavior. This provides more predictable and explicit control over case sensitivity.</p>"}, {"location": "obj/grep/#file-handling-features-handled-by-grapa-language-or-python-integration", "title": "File Handling Features (handled by Grapa language or Python integration)", "text": "<ul> <li>\u274c Automatic .gitignore support - Grapa handles file filtering separately via <code>file().ls()</code> with filters</li> <li>\u274c File type detection - Use Grapa's file operations (<code>file().extension()</code>, <code>file().type()</code>) instead</li> <li>\u274c File size limits - Use Grapa's file size checking (<code>file().size()</code>) before grep operations</li> <li>\u274c Hidden file filtering - Use Grapa's file listing with filters (<code>file().ls(\".*\", \"h\")</code>)</li> </ul> <p>Note: Many of these features are handled differently in Grapa's integrated environment, where file operations and filtering are managed by the Grapa language or Python integration rather than within the grep function itself. This design provides more flexibility and control over file operations.</p>"}, {"location": "obj/grep/#summary-actual-missing-features-excluding-file-handling", "title": "Summary: Actual Missing Features (Excluding File Handling)", "text": "<p>When you exclude file handling (since that's handled by the Grapa language), Grapa grep is missing just 1 feature that ripgrep has:</p>"}, {"location": "obj/grep/#performance-features-1-missing", "title": "Performance Features (1 missing)", "text": "<ul> <li>\u274c SIMD optimizations - Standard optimizations (ripgrep uses CPU vector instructions)</li> </ul> <p>Bottom Line: Grapa grep has about 95%+ of ripgrep's core text processing features, plus several unique advanced Unicode capabilities that ripgrep doesn't have. The main gaps are in performance optimizations.</p>"}, {"location": "obj/grep/#achieving-missing-features-in-grapa", "title": "Achieving \"Missing\" Features in Grapa", "text": ""}, {"location": "obj/grep/#case-insensitive-matching", "title": "Case-Insensitive Matching", "text": "<pre><code>/* ripgrep: rg -i \"hello\" (explicit case-insensitive) */\n\"Hello WORLD\".grep(\"hello\", \"i\")\n\n/* ripgrep: rg \"HELLO\" (case-sensitive for uppercase) */\n\"Hello WORLD\".grep(\"HELLO\", \"\")\n\n/* Note: Grapa uses explicit \"i\" flag rather than ripgrep's automatic smart-case behavior */\n/* This provides more predictable and explicit control over case sensitivity */\n</code></pre>"}, {"location": "obj/grep/#word-boundary-mode", "title": "Word Boundary Mode", "text": "<pre><code>/* ripgrep: rg --word-regexp \"hello\" */\n\"hello world\".grep(\"hello\", \"wo\")  /* Using 'w' option */\n/* or */\n\"hello world\".grep(\"\\\\bhello\\\\b\", \"o\")  /* Manual word boundaries */\n</code></pre>"}, {"location": "obj/grep/#column-numbers", "title": "Column Numbers", "text": "<pre><code>/* ripgrep: rg --column \"hello\" */\n\"hello world\".grep(\"hello\", \"oT\")  /* Shows column:match format */\n/* Result: [\"1:hello\"] */\n</code></pre>"}, {"location": "obj/grep/#grapa-vs-ripgrep-feature-comparison-summary", "title": "Grapa vs. ripgrep: Feature Comparison Summary", "text": ""}, {"location": "obj/grep/#grapas-strengths-where-grapa-excels", "title": "Grapa's Strengths (Where Grapa excels)", "text": "<ul> <li>\u2705 Advanced Unicode - Grapheme clusters, normalization, diacritic-insensitive matching</li> <li>\u2705 Language Integration - Native part of Grapa language, not standalone</li> <li>\u2705 Advanced Regex - Named groups, atomic groups, lookaround assertions</li> <li>\u2705 JSON Output - Structured output with metadata</li> <li>\u2705 JIT Compilation - Fast pattern matching</li> <li>\u2705 Unicode Properties - Full Unicode categories, scripts, and properties</li> </ul>"}, {"location": "obj/grep/#ripgreps-strengths-where-ripgrep-excels", "title": "ripgrep's Strengths (Where ripgrep excels)", "text": "<ul> <li>\u2705 Performance - SIMD optimizations</li> <li>\u2705 File Handling - Automatic .gitignore, file type detection, size limits, memory-mapped I/O (standalone tool)</li> </ul>"}, {"location": "obj/grep/#shared-strengths-both-tools-excel", "title": "Shared Strengths (Both tools excel)", "text": "<ul> <li>\u2705 Regex Engine - Full PCRE2 support with Unicode</li> <li>\u2705 Case Handling - Case-sensitive and case-insensitive modes</li> <li>\u2705 Context Lines - Before/after context with <code>-A</code>, <code>-B</code>, <code>-C</code></li> <li>\u2705 Binary Mode - Skip binary files or search within them</li> <li>\u2705 Line Numbers - Show line numbers with <code>-n</code></li> <li>\u2705 Invert Match - Show non-matching lines with <code>-v</code></li> <li>\u2705 Case-insensitive matching - Use \"i\" flag for explicit case-insensitive matching</li> <li>\u2705 Word boundary mode - Use \"w\" option or <code>\\b</code> pattern anchors</li> <li>\u2705 Column numbers - Use \"T\" option for column:match format</li> <li>\u2705 Parallel processing - Multi-threaded processing for large inputs</li> </ul>"}, {"location": "obj/grep/#feature-coverage-comparison", "title": "Feature Coverage Comparison", "text": "<p>Grapa grep covers ~95% of ripgrep's non-file-system features: - \u2705 All core text processing, regex, Unicode, and search strategy features - \u274c Only missing: SIMD (vectorized) search optimizations</p> <p>ripgrep covers ~80-85% of Grapa grep's features: - \u2705 Core regex, case handling, context lines, binary mode, line numbers, invert match - \u274c Missing: Unicode normalization, diacritic-insensitive matching, grapheme clusters, advanced Unicode properties, script extensions, flexible JSON output, integrated language features, Python integration</p>"}, {"location": "obj/grep/#when-to-use-each-tool", "title": "When to Use Each Tool", "text": "Use Case Recommended Tool Reason International Text Processing Grapa Best Unicode support, normalization, diacritic-insensitive High-Performance File Search ripgrep Fastest for large file systems, multi-threaded Integrated Development Grapa Part of programming environment, Python integration Command-line Search ripgrep Optimized for CLI usage, smart defaults Unicode Analysis Grapa Grapheme clusters, normalization, advanced Unicode features Large-scale File Operations Grapa Parallel processing, integrated language Cross-platform Scripts Grapa Consistent behavior, integrated language File Processing Workflows Grapa File operations handled by language, grep focuses on text processing <p>Bottom Line: Grapa grep has about 95% of ripgrep's core text processing features, plus unique advanced Unicode capabilities. ripgrep covers about 80-85% of Grapa grep's features. For most text processing tasks, especially Unicode-heavy work, Grapa is quite capable. ripgrep remains the gold standard for high-performance file system searches. </p>"}, {"location": "obj/grep/#grapas-integrated-approach-vs-ripgreps-standalone-approach", "title": "Grapa's Integrated Approach vs. ripgrep's Standalone Approach", "text": ""}, {"location": "obj/grep/#file-handling-philosophy", "title": "File Handling Philosophy", "text": "<p>ripgrep (Standalone Tool): - File handling is built into the grep function - Automatic .gitignore support - File type detection and filtering - File size limits and hidden file handling - Optimized for command-line file system searches</p> <p>Grapa (Integrated Language): - File handling is separated from text processing - File operations use Grapa language functions: <code>file().ls()</code>, <code>file().size()</code>, <code>file().type()</code> - More flexible and programmable file filtering - grep function focuses purely on text pattern matching - Better for complex workflows and integrated development</p>"}, {"location": "obj/grep/#example-file-processing-workflow", "title": "Example: File Processing Workflow", "text": "<p>ripgrep approach: <pre><code>rg \"pattern\" --type python --max-filesize 1M --hidden\n</code></pre></p> <p>Grapa approach: <pre><code>/* File operations handled by language */\nfiles = file().ls(\"*.py\", \"h\");  /* Get Python files, including hidden */\nfiltered = files.filter(f =&gt; file().size(f) &lt; 1024*1024);  /* Size filter */\ncontent = filtered.map(f =&gt; file().read(f));  /* Read files */\nmatches = content.grep(\"pattern\", \"oj\");  /* Pure text processing */\n</code></pre></p> <p>This separation allows Grapa grep to focus on what it does best: advanced Unicode text processing with sophisticated regex features, while file operations are handled by the appropriate language constructs.</p>"}, {"location": "obj/grep/#feature-status", "title": "Feature Status", "text": ""}, {"location": "obj/grep/#fully-implemented-features", "title": "\u2705 Fully Implemented Features", "text": "<p>Core Grep Features: - \u2705 Basic pattern matching - \u2705 Case-insensitive matching (<code>i</code> option) - \u2705 Match-only output (<code>o</code> option) - Comprehensive Unicode support - \u2705 Invert match (<code>v</code> option) - \u2705 Line numbers (<code>n</code> option) - \u2705 Count only (<code>c</code> option) - \u2705 All-mode (<code>a</code> option) - \u2705 Exact match (<code>x</code> option)</p> <p>Advanced Features: - \u2705 Word boundaries (<code>w</code> option) - Full ripgrep compatibility - \u2705 Context lines (A, B, C) - With merging and separators - \u2705 Context separators (<code>--</code> between non-overlapping blocks) - \u2705 Column numbers (<code>T</code> option) - 1-based positioning - \u2705 Color output (<code>L</code> option) - ANSI color codes - \u2705 Custom delimiters - \u2705 JSON output (<code>j</code> option) <p>Unicode Features: - \u2705 Unicode normalization (<code>N</code> option) - \u2705 Diacritic-insensitive matching (<code>d</code> option) - \u2705 Unicode properties (<code>\\p{L}</code>, <code>\\p{N}</code>, etc.) - \u2705 Grapheme clusters (<code>\\X</code> pattern) - \u2705 Comprehensive Unicode \"o\" option support - \u2705 Unicode boundary handling with hybrid mapping</p> <p>Performance Features: - \u2705 JIT compilation - \u2705 Parallel processing - \u2705 Fast path optimizations - \u2705 Binary mode - \u2705 LRU caching</p> <p>Error Handling: - \u2705 Graceful error handling - \u2705 Invalid pattern recovery - \u2705 Bounds checking - \u2705 UTF-8 validation</p>"}, {"location": "obj/grep/#known-limitations", "title": "\u26a0\ufe0f Known Limitations", "text": "<p>File System Features: - \u2705 File searching, directory traversal, and file filtering are fully supported via the <code>$file()</code> API in the scripting layer. - \u274c These features are not built into the <code>.grep()</code> function itself, but are available for scripting flexible workflows. - Design Note: This separation allows for more powerful and programmable file processing, at the cost of not having a single \"one-liner\" CLI for recursive search.</p> <p>Scripting Layer Issues: - \u26a0\ufe0f Unicode string functions (<code>len()</code>, <code>ord()</code>) count bytes not characters - \u26a0\ufe0f Null-data mode limited by string parser (<code>\\x00</code> not converted)</p>"}, {"location": "obj/grep/#ripgrep-parity-status", "title": "\u2705 Ripgrep Parity Status", "text": "<p>FULL PARITY ACHIEVED for all in-memory/streaming features: - \u2705 All core grep functionality - \u2705 All advanced features - \u2705 Complete Unicode support - \u2705 Performance optimizations - \u2705 Error handling - \u2705 Context merging and separators - \u2705 Comprehensive \"o\" option functionality</p>"}, {"location": "obj/grep/#recent-fixes-and-improvements-2024-12", "title": "Recent Fixes and Improvements (2024-12)", "text": "<p>JSON Output Format: - \u2705 Fixed double-wrapping issue in JSON output - \u2705 Now returns valid JSON arrays consistently - \u2705 Proper handling of named groups and metadata - \u2705 Fixed empty pattern with <code>\"j\"</code>/<code>\"oj\"</code> options returning null instead of valid JSON array</p> <p>Zero-Length Matches: - \u2705 Fixed output of empty strings vs null values - \u2705 Proper handling of lookaround assertions and word boundaries - \u2705 Consistent behavior with ripgrep for zero-length matches</p> <p>PCRE2 Integration: - \u2705 Improved Unicode handling and advanced regex features - \u2705 Better support for Unicode properties and grapheme clusters - \u2705 Enhanced error handling for malformed patterns</p> <p>Context Features: - \u2705 Implemented proper <code>--</code> separator lines between context blocks - \u2705 Improved context merging for overlapping regions - \u2705 Better handling of edge cases (file boundaries, multiple matches)</p> <p>Output Options: - \u2705 Fixed T option for column number output (1-based positioning) - \u2705 Fixed L option for ANSI color codes - \u2705 Improved error handling for malformed patterns and edge cases</p> <p>Performance: - \u2705 Up to 9.44x speedup with 16 workers (verified in tests) - \u2705 Consistent results across all worker counts - \u2705 Robust edge case handling for worker counts</p>"}, {"location": "obj/grep/#comprehensive-testing-for-multiline-patterns-and-rare-pcre2-features-2024-12", "title": "Comprehensive Testing for Multiline Patterns and Rare PCRE2 Features (2024-12)", "text": "<p>New Test Coverage: - \u2705 Multiline patterns with custom delimiters (<code>s</code> flag) - \u2705 Atomic groups (<code>(?&gt;...)</code>) with multi-character delimiters - \u2705 Possessive quantifiers (<code>*+</code>, <code>++</code>, <code>?+</code>) with custom delimiters - \u2705 Conditional patterns (<code>?(condition)...</code>) with edge cases - \u2705 Lookaround assertions with multi-character delimiters - \u2705 Unicode properties with custom delimiters - \u2705 Complex multiline patterns with context lines - \u2705 Edge cases with multi-character delimiters - \u2705 JSON output with custom delimiters - \u2705 Performance testing with large multi-character delimiters - \u2705 Rare PCRE2 features with Unicode grapheme clusters - \u2705 Delimiter removal verification for all scenarios</p> <p>Test File: <code>test/test_multiline_and_rare_pcre2.grc</code></p> <p>Key Improvements: - \u2705 Multi-character delimiter support - No longer assumes single-character delimiters - \u2705 Proper delimiter removal - All output strings are clean (no delimiter artifacts) - \u2705 Context line processing - Uses custom delimiters instead of hardcoded <code>\\n</code> - \u2705 Comprehensive edge case coverage - Tests for all rare PCRE2 features - \u2705 Performance validation - Large inputs with complex delimiters - \u2705 Unicode integration - Advanced Unicode features with custom delimiters</p> <p>Example Test Cases: <pre><code>/* Multiline pattern with custom delimiter */\n\"start|||middle|||end\".grep(\"start.*end\", \"s\", \"|||\")\n/* Result: [\"start|||middle|||end\"] (matches across delimiter) */\n\n/* Atomic group with custom delimiter */\n\"aaaa|bbbb|cccc\".grep(\"(?&gt;a+)a\", \"o\", \"|\")\n/* Result: [] (atomic group prevents backtracking) */\n\n/* Possessive quantifier with custom delimiter */\n\"aaa|bbb|ccc\".grep(\"a++\", \"o\", \"|\")\n/* Result: [\"aaa\"] (matches all a's greedily) */\n\n/* Conditional pattern with custom delimiter */\n\"abc123|def456\".grep(\"(a)?(?(1)b|c)\", \"o\", \"|\")\n/* Result: [\"ab\", \"c\"] (conditional branching) */\n</code></pre></p> <p>Benefits: - Robust delimiter handling - Supports any delimiter length or complexity - Clean output - No delimiter artifacts in result strings - Full PCRE2 compatibility - All advanced regex features work with custom delimiters - Performance optimized - Efficient processing of multi-character delimiters - Comprehensive testing - Edge cases and rare features thoroughly tested</p>"}, {"location": "obj/grep/#current-status-and-known-issues", "title": "Current Status and Known Issues", "text": "<p>Working Features: - \u2705 All core functionality working correctly - \u2705 Full Unicode support with normalization and diacritic-insensitive matching - \u2705 Advanced regex features (atomic groups, lookarounds, possessive quantifiers) - \u2705 Comprehensive output formats (JSON, context, line numbers, etc.) - \u2705 Parallel processing with excellent performance scaling - \u2705 Python integration fully functional - \u2705 Ripgrep parity for all in-memory features</p> <p>Minor Issues: - \u26a0\ufe0f Empty patterns return <code>$SYSID</code> instead of <code>$ERR</code> (current behavior, not a bug) - \u26a0\ufe0f Some complex context combinations may not merge exactly as ripgrep does - \u26a0\ufe0f Some Unicode normalization scenarios may have edge cases</p> <p>Test Coverage: - \u2705 Comprehensive test suite covering all features - \u2705 Property-based testing for Unicode/PCRE2 edge cases - \u2705 Performance testing with large inputs - \u2705 Python integration testing - \u2705 Regression testing for all recent fixes</p>"}, {"location": "obj/grep/#advanced-context-examples", "title": "Advanced Context Examples", "text": "<pre><code>/* Context merging - overlapping regions are automatically merged */\ninput = \"a\\nb\\nc\\nd\\ne\\nf\";\ninput.grep(\"c|d\", \"A1B1\")\n[\"b\\n\", \"c\\n\", \"d\\n\", \"e\\n\"]  /* Overlapping context merged into single block */\n\n/* Context separators between non-overlapping blocks */\ninput2 = \"a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\";\ninput2.grep(\"c|i\", \"A1B1\")\n[\"b\\n\", \"c\\n\", \"d\\n\", \"--\\n\", \"h\\n\", \"i\\n\", \"j\\n\"]  /* -- separator between blocks */\n\n/* Complex context with multiple options */\nlog_content.grep(\"error\", \"A2B1io\")  /* 2 lines after, 1 before, match-only, case-insensitive */\n</code></pre>"}, {"location": "obj/grep/#advanced-unicode-o-option-examples", "title": "Advanced Unicode \"o\" Option Examples", "text": "<pre><code>/* Comprehensive Unicode character extraction */\n\"\u00e9\u00f1\u00fc\".grep(\".\", \"o\")\n[\"\u00e9\", \"\u00f1\", \"\u00fc\"]  /* Perfect Unicode character extraction */\n\n/* Unicode with normalization and \"o\" option */\n\"caf\u00e9 r\u00e9sum\u00e9\".grep(\"\\\\X\", \"oN\")\n[\"c\", \"a\", \"f\", \"\u00e9\", \" \", \"r\", \"\u00e9\", \"s\", \"u\", \"m\", \"\u00e9\"]  /* Normalized grapheme clusters */\n\n/* Complex Unicode scenarios with \"o\" option */\n\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\".grep(\"\\\\X\", \"o\")\n[\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"]  /* Family emoji as single grapheme cluster */\n\n/* Unicode properties with \"o\" option */\n\"Hello \u4e16\u754c 123\".grep(\"\\\\p{L}+\", \"o\")\n[\"Hello\", \"\u4e16\u754c\"]  /* Unicode letters only */\n\n/* Diacritic-insensitive with \"o\" option */\n\"caf\u00e9 r\u00e9sum\u00e9 na\u00efve\".grep(\"cafe\", \"od\")\n[\"caf\u00e9\"]  /* Diacritic-insensitive matching */\n\n/* Case-insensitive Unicode with \"o\" option */\n\"\u00c9\u00d1\u00dc\".grep(\".\", \"oi\")\n[\"\u00c9\", \"\u00d1\", \"\u00dc\"]  /* Case-insensitive Unicode character extraction */\n</code></pre>"}, {"location": "obj/grep/#option-flag-coverage-test-status-and-implementation-philosophy-living-status-section", "title": "Option Flag Coverage, Test Status, and Implementation Philosophy (Living Status Section)", "text": "<p>This section is a living document tracking the current state of Grapa grep option flag support, test/code path coverage, and design philosophy. Update this section as new combinations are implemented or tested, or as the philosophy evolves.</p>"}, {"location": "obj/grep/#testing-and-implementation-priorities", "title": "Testing and Implementation Priorities", "text": "<ol> <li>First Priority:</li> <li>Ensure there are tests for all valid combinations of options.</li> <li>The code structure should cover every possible option combination, with minimal unique code paths (maximize code path sharing and composability).</li> <li> <p>This prevents the need for major refactoring as new features or edge cases are added.</p> </li> <li> <p>Second Priority:</p> </li> <li>Once the above is complete, address edge cases.</li> <li>Edge case handling must be implemented in a way that is compatible with all possible option combinations that may reach the relevant code path.</li> <li>Edge cases are exceptions layered on top of the comprehensive option combination coverage.</li> </ol> <p>This approach ensures maintainability, extensibility, and robust architecture.</p>"}, {"location": "obj/grep/#coverage-matrix-option-combinations", "title": "Coverage Matrix: Option Combinations", "text": "Option(s) Description/Example Status Test File(s) o Match-only \u2705 Tested test/grep/test_option_based_behavior.grc f Force full-segment \u2705 Tested test/grep/test_f_flag_combinations.grc a All-mode \u2705 Tested test/grep/test_comprehensive_grep_combinations.grc s Dot matches newline \u2705 Tested test/grep/test_multiline_and_rare_pcre2.grc i Case-insensitive \u2705 Tested test/grep/test_case_insensitive_unicode.grc d Diacritic-insensitive \u2705 Tested test/grep/test_option_combinations_advanced.grc w Word boundary \u2705 Tested test/grep/test_option_combinations_advanced.grc l Line number only output \u2705 Tested test/grep/test_basic_option_combinations.grc u Unique (deduplicate) \u2705 Tested test/grep/test_option_combinations_advanced.grc g Group results per line \u2705 Tested test/grep/test_option_combinations_advanced.grc b Output byte offset \u2705 Tested test/grep/test_edge_case_precedence.grc j JSON output \u2705 Tested test/grep/test_compositional_stress.grc c Count of matches \u2705 Tested test/grep/test_edge_case_precedence.grc n Prefix matches with line numbers \u2705 Tested test/grep/test_basic_option_combinations.grc x Exact line match \u2705 Tested test/grep/test_basic_option_combinations.grc v Invert match \u2705 Tested test/grep/test_compositional_stress.grc N Normalize to NFC \u2705 Tested test/grep/test_unicode_normalization.grc z Reserved/future \u26a0\ufe0f Partial test/grep/test_option_combinations_advanced.grc T Output column numbers \u2705 Tested test/grep/column_test.grc L Color output (ANSI) \u2705 Tested test/grep/test_edge_case_precedence.grc A, B, C Context lines \u2705 Tested test/grep/test_context_lines.grc (pairs/triples) All meaningful pairs/triples \u2705 Tested test/grep/test_option_combinations_matrix.grc (higher-order) Quadruple+ combinations \u2705 Tested test/grep/test_option_combinations_higher_order.grc (parallel) All above with parallel/worker \u2705 Tested test/grep/test_option_combinations_parallel.grc <p>Legend: - \u2705 = Fully tested and implemented - \u26a0\ufe0f = Partially tested, planned, or reserved</p>"}, {"location": "obj/grep/#status", "title": "Status", "text": "<ul> <li>All valid single, pair, triple, higher-order, and parallel option combinations are now systematically covered by dedicated test files.</li> <li>The next step is to proceed with edge case coverage, ensuring all edge case handling is compatible with the full option matrix.</li> </ul>"}, {"location": "obj/grep/#edge-case-handling", "title": "Edge Case Handling", "text": "<ul> <li>Edge case tests will be added after the main option matrix is complete.</li> <li>Edge case handling must be compatible with all option combinations that may reach the relevant code path.</li> <li>Edge case test files will be clearly marked and cross-referenced here.</li> </ul> <p>This living section ensures that the current state of Grapa grep option support, test coverage, and design philosophy is always visible and up to date.</p>"}, {"location": "obj/grep/#rules-for-authoring-grc-files-on-windows-living-reference", "title": "Rules for Authoring .grc Files on Windows (Living Reference)", "text": "<p>This section collects essential rules and conventions for writing or modifying Grapa .grc files on Windows. Follow these to ensure compatibility, correct syntax, and maintainability. Update as new rules are discovered.</p> <ul> <li>Comments:</li> <li>Do not use <code>//</code> for comments. Use block comments for all comments (do not use //). Block comments should be written as in this header. Do not use the literal / ... / inside a block comment, as Grapa does not support nested block comments.</li> <li>Echo/Print:</li> <li>Do not use <code>print</code> or <code>echo()</code> as a bare function.</li> <li>Always use the method form: <code>\"string\".echo();</code> or <code>(str1+str2).echo();</code>.</li> <li>Statement Endings:</li> <li>End every command or statement with a <code>;</code> character.</li> <li>Loops:</li> <li>Use <code>while</code> loops instead of <code>for</code> loops (Grapa does not support <code>for</code>).</li> <li>String Concatenation:</li> <li>When concatenating strings, wrap the entire expression in parentheses: <code>(str1+str2).echo();</code>.</li> <li>Array Access:</li> <li>Access arrays with <code>.get(index)</code>, not with square brackets: <code>arr.get(0);</code>.</li> <li>Object Property Access:</li> <li>Access object properties with <code>.get(\"key\")</code>, not with square brackets: <code>obj.get(\"key\");</code>.</li> <li>General:</li> <li>Validate syntax against known-good .grc files before adding new tests or code.</li> <li>Prefer simple, explicit constructs for maximum compatibility.</li> </ul> <p>Update this section as new rules or best practices are discovered.</p> <ul> <li>Running .grc Files on Windows:</li> <li>To run a .grc file, use the following command in PowerShell or Command Prompt:<ul> <li><code>.\\grep.exe -q -cfile path/file.grc</code></li> </ul> </li> <li> <p>This suppresses the version header (<code>-q</code>) and runs the specified .grc file (<code>-cfile</code>).</p> </li> <li> <p>Array and List Access:</p> </li> <li>Arrays (type $ARRAY) and lists (type $LIST) are accessed with <code>[index]</code> syntax, not <code>.get(index)</code>.</li> <li>Example:     /     ar = [1,2,3];     ar[1]; / returns 2 /     ar = {\"a\":11,\"b\":22,\"c\":33};     ar[1]; / returns 22 /     ar[\"b\"]; / returns 22 /     /</li> <li> <p>Use <code>.get(\"key\")</code> for object property access, not for arrays/lists.</p> </li> <li> <p>String Literals and Quotes:</p> </li> <li>If your string contains double quotes (<code>\"</code>), use single quotes (<code>'</code>) for the outer string, or escape the inner double quotes as (<code>\\\"</code>).</li> <li>If your string contains single quotes (<code>'</code>), use double quotes (<code>\"</code>) for the outer string, or escape the inner single quotes as (<code>\\'</code>).</li> <li>Examples:<ul> <li><code>'Expected: [\"\", \"a\", \"\", \"b\", \"\"]\\n'.echo();</code>  / single quotes outside, double quotes inside /</li> <li><code>(\\\"Expected: [\\\\\\\"\\\\\\\", \\\\\\\"a\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"b\\\\\\\", \\\\\\\"\\\\\\\"]\\\\n\\\").echo();</code>  / double quotes outside, inner double quotes escaped /</li> </ul> </li> </ul>"}, {"location": "obj/grep/#file-system-integration-for-grep-utilities-grapa-scripting-layer", "title": "File System Integration for Grep Utilities (Grapa Scripting Layer)", "text": "<ul> <li>Use <code>$file().ls()</code> to enumerate files in a directory.</li> <li>Use <code>$file().info(\"path\")</code> to check file type/existence.</li> <li>Use <code>$file().get(\"path\")</code> to read file contents. Note: <code>.get()</code> returns binary data (type <code>$BIN</code>); use <code>.str()</code> to convert to string format: <code>$file().get(\"file\").str()</code>.</li> <li>Use <code>$file().set(\"path\", value)</code> to write file contents.</li> <li>These commands provide all file system operations needed for scripting a command-line grep utility in Grapa.</li> </ul> <p>Example workflow: <pre><code>files = $file().ls();\ni = 0;\nwhile (i &lt; files.len()) {\n    f = files[i];\n    info = $file().info(f[\"$KEY\"]);\n    if (info[\"$TYPE\"] == \"FILE\") {\n        content = $file().get(f[\"$KEY\"]).str();\n        matches = content.grep(\"pattern\", \"o\");\n        /* process matches... */\n    }\n    i = i + 1;\n}\n</code></pre> - Note: File handling (enumeration, reading, writing) is performed in the scripting layer, not inside the <code>.grep()</code> function itself. This separation allows for flexible, programmable workflows.</p>"}, {"location": "obj/grep/#production-readiness-edge-case-coverage-2024-06-update", "title": "Production-Readiness Edge Case Coverage (2024-06 Update)", "text": "<p>The following edge cases are now covered by dedicated test files to ensure Grapa grep is suitable for mission-critical production use and ripgrep parity.</p> Edge Case Category Description/Examples Test File(s) Pathological Patterns Catastrophic backtracking, large alternations, deep nesting test/grep/test_pathological_patterns.grc Malformed/Invalid Unicode Invalid UTF-8, unpaired surrogates, noncharacters, BOM test/grep/test_malformed_unicode.grc Ultra-Large Lines Single line &gt;1MB, only delimiters, no newline at EOF test/grep/test_ultra_large_lines.grc (All other edge cases) Zero-length, Unicode, null bytes, context, overlap, etc. See other test/grep/edge_case_*.grc files <ul> <li>These tests are critical for production reliability and ripgrep parity.</li> <li>If any test causes a hang, crash, or error, document and update implementation.</li> <li>See each test file for detailed scenarios and expected results.</li> </ul>"}, {"location": "obj/iterate/", "title": "Part of $OBJ", "text": "<p>/* Thread Safety: Grapa is fully thread safe in all supported environments (command line, Grapa shell, and Python/GrapaPy). All built-in operations\u2014including map, filter, reduce, $thread, and $net\u2014are safe to use concurrently. Users do not need to take any special precautions for thread safety in these environments.</p> <p>Note: Only if Grapa is integrated directly into a non-thread-safe C++ host (not anticipated for normal users) would additional thread safety considerations arise. */</p>"}, {"location": "obj/iterate/#mapop-params", "title": "map($OP [,params])", "text": "<p>See map in the Looping section for full documentation, canonical examples, and troubleshooting. Iterates through a $LIST/$ARRAY calling an $OP. Processes each item in parallel. Result of $OP placed in a $LIST/$ARRAY which is returned at the completion.</p>"}, {"location": "obj/iterate/#filterop-params", "title": "filter($OP [,params])", "text": "<p>See filter in the Looping section for full documentation, canonical examples, and troubleshooting. Iterates through a $LIST/$ARRAY calling an $OP. Processes each item in parallel. If $OP of op is true, item is placed in a $LIST/$ARRAY which is returned at the completion. </p>"}, {"location": "obj/iterate/#reduceop-start-params", "title": "reduce($OP [,start [,params]])", "text": "<p>See reduce in the Looping section for full documentation, canonical examples, and troubleshooting. Iterates through a $LIST/$ARRAY calling an $OP. Processes each item in sequence as the intent is to combine results of each $OP. If \"start\" not provided, the first item of the list is used as the start. </p>"}, {"location": "obj/iterate/#sortaxisorderop", "title": "sort([axis],[order],[op])", "text": "<p>Sorts a $LIST.</p> <ul> <li>axis -&gt; 0 = row, 1 = col</li> <li>order -&gt; 0 = ascend, 1 = decend, or does selection if array if indexes passed in</li> <li>op -&gt; function for the compare</li> </ul> <pre><code>{z:1,m:2,p:3,b:4}.sort() -&gt; {\"b\":4,\"m\":2,\"p\":3,\"z\":1}\n</code></pre> <p>Optionally pass in a compare routine.''' <pre><code>&gt; [\"b\",\"a\",\"B\",\"c\",\"b\",\"A\"].sort()\n[\"A\",\"B\",\"a\",\"b\",\"b\",\"c\"]\n\n&gt; [\"b\",\"a\",\"B\",\"c\",\"b\",\"A\"].sort(0,0,op(a,b){a.upper()&lt;= 3eb.upper();})\n[\"a\",\"A\",\"B\",\"b\",\"b\",\"c\"]\n\n&gt; [\"b\",\"a\",\"B\",\"c\",\"b\",\"A\"].sort(0,0,op(a,b){$local.c=a.upper()&lt;= 3eb.upper();if(c==0)c=a&lt;= 3eb;c;})\n[A,a,B,b,b,c]\n\n&gt; [\"b\",\"a\",\"B\",\"c\",\"b\",\"A\"].sort(0,[1,2])\n[\"a\",\"B\"]\n</code></pre></p>"}, {"location": "obj/iterate/#uniqueop", "title": "unique([op])", "text": "<p>Remove duplicates names.</p> <pre><code>{z:1,b:4,m:2,p:3,m:2,b:4}.unique() -&gt; {\"z\":1,\"b\":4,\"m\":2,\"p\":3}\n</code></pre> <p>Optionally pass in a compare routine.''' <pre><code>&gt; [\"b\",\"a\",\"B\",\"c\",\"b\",\"A\"].unique()\n[\"A\",\"B\",\"a\",\"b\",\"c\"]\n\n&gt; [\"b\",\"a\",\"B\",\"c\",\"b\",\"A\"].unique(op(a,b){a.upper()&lt;= 3eb.upper();})\n[\"A\",\"b\",\"c\"]\n</code></pre></p>"}, {"location": "obj/iterate/#getnameindex", "title": "getname([index])", "text": "<p>Used in a map/reduce/filter to identify the name of the passed in item from the original list (if processing a $LIST). </p> <p>To use, do not de-reference the identify. The getname function will then see that it is an $ID and will attempt to locate it in the namespace. Since what is passed in is a pointer, the function is able to discover the item in the original list and discover the name.</p> <pre><code>&gt; {a:1,b:2}.map(op(a){\"a\".getname()})\n{\"a\":a,\"b\":b}\n</code></pre> <p>Or used to get the name of an item in a $LIST, using the index parameter.</p> <pre><code>&gt; {a:1,b:2}.getname(0)\na\n</code></pre>"}, {"location": "obj/transform/", "title": "From $OBJ", "text": ""}, {"location": "obj/transform/#len", "title": "len()", "text": "<p>Gets the length of the item.</p> <pre><code>\"hi\".len() -&gt; 2\n{1,2,3}.len() -&gt; 3\n</code></pre>"}, {"location": "obj/transform/#leftcount", "title": "left(count)", "text": "<p>Gets the left bytes of an item.</p> <pre><code>\"testing\".left(2) -&gt; \"te\"\n</code></pre> <p>Use a negative number to truncate right.</p> <pre><code>\"testing\".left(-2) -&gt; \"testi\"\n</code></pre>"}, {"location": "obj/transform/#rightcount", "title": "right(count)", "text": "<p>Gets the right bytes of an item.</p> <pre><code>\"testing\".right(2) -&gt; \"ng\"\n</code></pre> <p>Use a negative number to truncate left.</p> <pre><code>\"testing\".right(-2) -&gt; \"sting\"\n</code></pre>"}, {"location": "obj/transform/#midstartlen", "title": "mid(start,len)", "text": "<p>Gets the middle bytes of an item.</p> <pre><code>\"testing\".mid(2,3) -&gt; \"sti\"\n</code></pre>"}, {"location": "obj/transform/#midtrimitems-offset-blocksize", "title": "midtrim(items, offset, blocksize)", "text": "<pre><code>items = array of [label, offset, len, ltrim, rtrim, op]\n\n\"this is a test to see\".midtrim([[\"a\",2,1,\" \",\" \"],[\"b\",10,5,\" \",\" \",op(a){a.len();}]],1,13);\n{\"a\":\"s\",\"b\":3}\n</code></pre>"}, {"location": "obj/transform/#rtrimstr", "title": "rtrim([str])", "text": "<p>Trims right.</p> <pre><code>\"  testing  \".rtrim() -&gt; \"  testing\"\n\"bbbtestingbbb\".rtrim(b) -&gt; \"bbbtesting\"\n</code></pre>"}, {"location": "obj/transform/#ltrimstr", "title": "ltrim([str])", "text": "<p>Trims left.</p> <pre><code>\"  testing  \".ltrim() -&gt; \"testing  \"\n\"bbbtestingbbb\".ltrim(b) -&gt; \"testingbbb\"\n</code></pre>"}, {"location": "obj/transform/#trimstr", "title": "trim([str])", "text": "<p>Trims both left and right.</p> <pre><code>\"  testing  \".trim() -&gt; \"testing\"\n\"bbbtestingbbb\".trim(b) -&gt; \"testing\"\n</code></pre>"}, {"location": "obj/transform/#lpadnstr", "title": "lpad(n,[str])", "text": "<p>Pads left to bring the total size up to n characters. Defaults to pad with a space, but will use str for padding if provided. </p> <p>Will left truncate input if length of input is less than n.</p> <pre><code>\"test\".lpad(7,\"X\") -&gt; \"XXXtest\"\n</code></pre>"}, {"location": "obj/transform/#rpadnstr", "title": "rpad(n,[str])", "text": "<p>Pads left to bring the total size up to n characters. Defaults to pad with a space, but will use str for padding if provided. </p> <p>Will right truncate input if length of input is less than n.</p> <pre><code>\"test\".rpad(7,\"X\") -&gt; \"testXXX\"\n</code></pre>"}, {"location": "obj/transform/#lrotn", "title": "lrot([n])", "text": "<p>For $LIST, $ARRAY, $XML.</p> <p>Moves n (defaul=1) items from the start of the list to the end of the list, 1 at a time.</p> <pre><code>[\"a\",\"b\",\"c\",\"d\",\"e\"].lrot(2) -&gt; [\"c\",\"d\",\"e\",\"a\",\"b\"]\n</code></pre>"}, {"location": "obj/transform/#rrotn", "title": "rrot([n])", "text": "<p>For $LIST, $ARRAY, $XML.</p> <p>Moves n (defaul=1) items from the end of the list to the start of the list, 1 at a time.</p> <pre><code>[\"a\",\"b\",\"c\",\"d\",\"e\"].rrot(2) -&gt; [\"d\",\"e\",\"a\",\"b\",\"c\"]\n</code></pre>"}, {"location": "obj/transform/#reverse", "title": "reverse()", "text": "<p>Reverses the older of a list.</p> <pre><code>{z:1,m:2,p:3,b:4}.reverse() -&gt; {\"b\":4,\"p\":3,\"m\":2,\"z\":1}\n\"testing\".reverse() -&gt; \"gnitset\"\n</code></pre>"}, {"location": "obj/transform/#replaceoldnew", "title": "replace(old,new)", "text": "<p>Replaces iteems.</p> <pre><code>\"testing\".replace(\"t\",\"g\") -&gt; \"gesging\"\n</code></pre>"}, {"location": "obj/transform/#greppattern-options-delimiter-normalization-mode-num_workers", "title": "grep(pattern, options, delimiter, normalization, mode, num_workers)", "text": "<p>Extracts matches from a string using PCRE2-powered regular expressions with full Unicode support. Returns an array of results or JSON format with named groups.</p> <p>For comprehensive Unicode, advanced regex, diacritic-insensitive, and output option documentation, see Unicode Grep Documentation.</p>"}, {"location": "obj/transform/#parameters", "title": "Parameters:", "text": "<ul> <li><code>pattern</code> \u2014 PCRE2 regular expression string with Unicode support, named groups, and advanced features.</li> <li><code>options</code> \u2014 Combination of the following flags:</li> </ul> <p>Matching Options:   - <code>a</code> \u2013 All mode: treat the entire input as one block (no line splitting).   - <code>i</code> \u2013 Case-insensitive match with Unicode case folding.   - <code>d</code> \u2013 Diacritic-insensitive match (strip accents/diacritics from both input and pattern, robust Unicode-aware).   - <code>v</code> \u2013 Invert match (select non-matching lines or spans).   - <code>x</code> \u2013 Match entire line exactly (equivalent to anchoring with <code>^</code> and <code>$</code>).   - <code>N</code> \u2013 Normalize input and pattern to NFC Unicode form.</p> <p>Output Options:   - <code>o</code> \u2013 Output only matched substrings.   - <code>n</code> \u2013 Prefix matches with line number.   - <code>l</code> \u2013 Return only matching line numbers.   - <code>b</code> \u2013 Prefix results with byte offset.   - <code>j</code> \u2013 JSON output format with named groups, offsets, and line numbers.</p> <p>Processing Options:   - <code>c</code> \u2013 Return count of matches (or count of deduplicated matches if <code>d</code> is also set).   - <code>d</code> \u2013 Deduplicate results (line-level by default, or substring-level when combined with <code>o</code>, <code>g</code>, or <code>b</code>).   - <code>g</code> \u2013 Group matches per line.</p> <p>Parallel Processing:   - <code>num_workers</code> \u2013 Number of worker threads: <code>0</code> for auto-detection, <code>1</code> for sequential, <code>2+</code> for parallel processing.</p> <p>Unicode Support:   - Unicode categories: <code>\\p{L}</code>, <code>\\p{N}</code>, <code>\\p{Z}</code>, <code>\\p{P}</code>, <code>\\p{S}</code>, <code>\\p{C}</code>, <code>\\p{M}</code>   - Unicode scripts: <code>\\p{sc=Latin}</code>, <code>\\p{sc=Han}</code>, etc.   - Unicode script extensions: <code>\\p{scx:Han}</code>, etc.   - Unicode general categories: <code>\\p{Lu}</code>, <code>\\p{Ll}</code>, etc.   - Named groups: <code>(?P&lt;name&gt;...)</code>   - Atomic groups: <code>(?&gt;...)</code>   - Lookaround assertions: <code>(?=...)</code>, <code>(?&lt;=...)</code>, <code>(?!...)</code>, <code>(?&lt;!...)</code>   - Unicode grapheme clusters: <code>\\X</code>   - Advanced Unicode properties: <code>\\p{Emoji}</code>, <code>\\p{So}</code>, etc.   - Possessive quantifiers: <code>*+</code>, <code>++</code>, <code>?+</code>, <code>{n,m}+</code>   - Conditional patterns: <code>?(condition)...</code>   - Context lines: <code>A</code>, <code>B</code>, <code>C</code> options</p> <p>Not Supported:   - Unicode blocks: <code>\\p{In_Basic_Latin}</code>, etc.   - Unicode age properties: <code>\\p{Age=...}</code>   - Unicode bidirectional classes: <code>\\p{Bidi_Class:...}</code></p>"}, {"location": "obj/transform/#examples", "title": "Examples:", "text": "<pre><code>/* Basic pattern matching */\n\"apple 123 pear 456\\nbanana 789\".grep(\"\\\\d+\", \"o\");\n/* \u2192 [\"123\", \"456\", \"789\"] */\n\n/* With line numbers */\n\"apple 123 pear 456\\nbanana 789\".grep(\"\\\\d+\", \"on\");\n/* \u2192 [\"1:123\", \"1:456\", \"2:789\"] */\n\n/* Unicode support */\n\"Hello \u4e16\u754c 123 \u20ac\".grep(\"\\\\p{L}+\", \"o\");\n/* \u2192 [\"Hello\", \"\u4e16\u754c\"] */\n\n/* Named groups with JSON output */\n\"John Doe\".grep(\"(?P&lt;first&gt;\\\\w+) (?P&lt;last&gt;\\\\w+)\", \"oj\");\n/* \u2192 [{\"match\":\"John Doe\",\"first\":\"John\",\"last\":\"Doe\",\"offset\":0,\"line\":1}] */\n\n/* Date parsing with JSON output */\n\"2023-04-27\\n2022-12-31\".grep(\"(?&lt;year&gt;\\\\d{4})-(?&lt;month&gt;\\\\d{2})-(?&lt;day&gt;\\\\d{2})\", \"oj\");\n/* \u2192 [\n    {\"match\":\"2023-04-27\",\"year\":\"2023\",\"month\":\"04\",\"day\":\"27\",\"offset\":0,\"line\":1},\n    {\"match\":\"2022-12-31\",\"year\":\"2022\",\"month\":\"12\",\"day\":\"31\",\"offset\":11,\"line\":2}\n  ] */\n\n/* Raw string literals for better readability */\n\"file.txt\".grep(r\"^[a-zA-Z0-9_]+\\.txt$\", \"x\");\n/* \u2192 [\"file.txt\"] - No need to escape backslashes */\n\n\"user@domain.com\".grep(r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\", \"x\");\n/* \u2192 [\"user@domain.com\"] - Much cleaner than escaped version */\n\n/* Raw strings preserve literal escape sequences */\n\"\\\\x45\".grep(r\"\\x45\", \"o\");\n/* \u2192 [\"\\\\x45\"] - Literal string, not character \"E\" */\n\n/* Context lines */\n\"Line 1\\nLine 2\\nLine 3\\nLine 4\".grep(\"Line 2\", \"A1B1\");\n/* \u2192 [\"Line 1\", \"Line 2\", \"Line 3\"] */\n\n/* Unicode normalization (NFC) */\n\"caf\u00e9\".grep(\"cafe\", \"o\", \"\", \"NFC\");\n/* \u2192 [\"caf\u00e9\"] */\n\n/* Binary mode for raw byte processing */\n\"\\\\x48\\\\x65\\\\x6c\\\\x6c\\\\x6f\".grep(\"Hello\", \"o\", \"\", \"NONE\", \"BINARY\");\n/* \u2192 [\"Hello\"] */\n\n/* Custom delimiter examples */\n\"apple|||pear|||banana\".grep(\"\\\\w+\", \"o\", \"|||\");\n/* \u2192 [\"apple\", \"pear\", \"banana\"] */\n\n\"section1###section2###section3\".grep(\"section\\\\d+\", \"o\", \"###\");\n/* \u2192 [\"section1\", \"section2\", \"section3\"] */\n</code></pre> <p>\ud83d\udcd6 For comprehensive Unicode grep documentation including advanced features, named groups, JSON output, and Unicode properties, see Unicode Grep Documentation.</p> <p>\ud83d\udca1 Tip: Use raw string literals (prefix with <code>r</code>) for better regex pattern readability. For example, <code>r\"\\w+\"</code> instead of <code>\"\\\\w+\"</code>. Raw strings suppress all escape sequences except for escaping the quote character used to enclose the string.</p>"}, {"location": "obj/transform/#diacritic-insensitive-matching-d-option", "title": "Diacritic-Insensitive Matching (<code>d</code> option)", "text": "<p>The <code>d</code> option enables diacritic-insensitive matching. When enabled, both the input and the pattern are: 1. Unicode normalized (NFC by default, or as specified) 2. Case folded (Unicode-aware, not just ASCII) 3. Diacritics/accents are stripped (works for Latin, Greek, Cyrillic, Turkish, Vietnamese, and more)</p> <p>This allows matches like: - <code>\"caf\u00e9\".grep(\"cafe\", \"d\")</code> \u2192 <code>[\"caf\u00e9\"]</code> - <code>\"CAF\u00c9\".grep(\"cafe\", \"di\")</code> \u2192 <code>[\"CAF\u00c9\"]</code> - <code>\"ma\u00f1ana\".grep(\"manana\", \"d\")</code> \u2192 <code>[\"ma\u00f1ana\"]</code> - <code>\"\u0130stanbul\".grep(\"istanbul\", \"di\")</code> \u2192 <code>[\"\u0130stanbul\"]</code> - <code>\"\u03ba\u03b1\u03c6\u03ad\u03c2\".grep(\"\u03ba\u03b1\u03c6\u03b5\u03c2\", \"d\")</code> \u2192 <code>[\"\u03ba\u03b1\u03c6\u03ad\u03c2\"]</code> - <code>\"\u043a\u043e\u0444\u0435\".grep(\"\u043a\u043e\u0444\u0435\", \"di\")</code> \u2192 <code>[\"\u043a\u043e\u0444\u0435\"]</code></p>"}, {"location": "obj/transform/#special-capabilities", "title": "Special Capabilities", "text": "<ul> <li>Handles both precomposed (NFC) and decomposed (NFD) Unicode forms</li> <li>Supports diacritic-insensitive matching for Latin, Greek, Cyrillic, Turkish, Vietnamese, and more</li> <li>Works with case-insensitive (<code>i</code>) and normalization (<code>N</code>, or normalization parameter) options</li> <li>Robust for international text, including combining marks</li> </ul>"}, {"location": "obj/transform/#limitations", "title": "Limitations", "text": "<ul> <li>Only covers scripts and diacritics explicitly mapped (Latin, Greek, Cyrillic, Turkish, Vietnamese, etc.)</li> <li>Does not transliterate between scripts (e.g., Greek to Latin)</li> <li>Does not remove all possible Unicode marks outside supported ranges (e.g., rare/archaic scripts)</li> <li>For full Unicode normalization, use with the normalization parameter (e.g., <code>\"NFC\"</code>, <code>\"NFD\"</code>)</li> <li>Does not perform locale-specific collation (e.g., German \u00df vs ss)</li> </ul>"}, {"location": "obj/transform/#example", "title": "Example", "text": "<pre><code>input = \"caf\u00e9\\nCAF\u00c9\\ncafe\\u0301\\nCafe\\nCAF\u00c9\\nma\u00f1ana\\nman\u0303ana\\n\u0130stanbul\\nistanbul\\nISTANBUL\\nstra\u00dfe\\nSTRASSE\\nStra\u00dfe\\n\u043a\u043e\u0444\u0435\\n\u041a\u043e\u0444\u0435\\n\u03ba\u03b1\u03c6\u03ad\u03c2\\n\u039a\u03b1\u03c6\u03ad\u03c2\\n\";\nresult = input.grep(r\"cafe\", \"di\");\n/* Result: [\"caf\u00e9\", \"CAF\u00c9\", \"cafe\u0301\", \"Cafe\", \"CAF\u00c9\"] */\n</code></pre>"}, {"location": "obj/transform/#splitsep-max-axis", "title": "split(sep, max, axis)", "text": "<p>Splits into an array.</p> <pre><code>\"one\\ntwo\\nthree\".split(\"\\n\") -&gt; [\"one\",\"two\",\"three\"]\n\"this is a test\".split(\" \") -&gt; [\"this\",\"is\",\"a\",\"test\"]\n\"this is a test split into parts\".split(3) -&gt; [\"this is a t\",\"est split i\",\"nto parts\"]\n\"this is a test split into parts\".split(\" \", 3) -&gt; [\"this is a test \",\"split into \",\"parts\"]\n</code></pre>"}, {"location": "obj/transform/#joinitem", "title": "join(item)", "text": "<p>Joins what has been split.</p> <pre><code>[\"this is a test \",\"split into \",\"parts\"].join(\"\") -&gt; \"this is a test split into part\"\n</code></pre>"}, {"location": "obj/transform/#upper", "title": "upper()", "text": "<p>Converts to upper case.</p> <pre><code>\"hi\".upper() -&gt; \"HI\"\n</code></pre>"}, {"location": "obj/transform/#lower", "title": "lower()", "text": "<p>Converts to lower.</p> <pre><code>\"HI\".lower() -&gt; \"hi\"\n</code></pre>"}, {"location": "obj/transform/#data-stoprangestartstep", "title": "data = (stop).range(start,step)", "text": "<pre><code>(9).range(1,2);\n[1,3,5,7]\n</code></pre>"}, {"location": "obj/transform/#sortaxisorderkind", "title": "sort(axis,order,kind)", "text": ""}, {"location": "obj/transform/#argsortaxisorderkind", "title": "argsort(axis,order,kind)", "text": ""}, {"location": "obj/transform/#uniqueop", "title": "unique(op)", "text": ""}, {"location": "obj/transform/#groupop1op2op3", "title": "group(op1,op2,op3)", "text": ""}, {"location": "obj/transform/#raw", "title": "raw()", "text": "<p>Converts a value into it's raw bytes. Displays in hex form, but is stored in raw. Required in many cases as an intermediate form. For example, converting from a $STR to an $INT, you have two choices.</p> <pre><code>&gt; \"34\".int();\n34\n\n&gt; \"34\".raw();\n3334\n\n&gt; \"34\".raw().int();\n13108\n</code></pre>"}, {"location": "obj/transform/#uraw", "title": "uraw()", "text": "<p>Converts to an unsigned raw value. To avoid sign issues, a leading zero is added to raw/int. To remove, used uraw and uint.</p> <pre><code>&gt; (0xFF).raw();\n0x0FF\n\n&gt; (0xFF).uraw();\nFF\n\n&gt; (0xFF).raw().int();\n255\n\n&gt; (0xFF).raw().uint();\n255\n\n&gt; (0xFF).uraw().int();\n-1\n\n&gt; (0xFF).uraw().uint();\n255\n</code></pre>"}, {"location": "obj/transform/#bool", "title": "bool()", "text": "<p>Converts to what the system sees as true/false.</p> <pre><code>&gt; \"1\".bool();\ntrue\n\n&gt; (0).bool();\nfalse\n</code></pre>"}, {"location": "obj/transform/#int", "title": "int()", "text": "<p>Converts to $INT.</p> <pre><code>\"44\".int() -&gt; 44\n</code></pre>"}, {"location": "obj/transform/#uint", "title": "uint()", "text": "<p>Converts to unsigned $INT.</p> <p>See $INT.</p>"}, {"location": "obj/transform/#floatbits-extra", "title": "float([bits [,extra]])", "text": "<p>Converts to $FLOAT. Sets bit count for the entire number. Calculations are performed with \"extra\" bits and truncated for display.</p> <pre><code>\"4.21\".float() -&gt; 4.21\n\n\"4.21\".float(300,7) / \"10412.42\".float(300,7) -&gt; 0.00040432483514879346011782083319727786624050893068085997299379010835137268761728\n\n(\"4.21\".float(300,7) / \"10412.42\".float(300,7)).float(50) -&gt; 0.00040432483514879\n</code></pre>"}, {"location": "obj/transform/#fixbits-extra", "title": "fix([bits [,extra]])", "text": "<p>Converts to fixed float. Sets bit count after the decimal to bits. Calculations are performed with \"extra\" bits and truncated for display.</p>"}, {"location": "obj/transform/#setfloatbits-extra", "title": "setfloat([bits [,extra]])", "text": "<p>Sets the default float type to float, and the default bits and extra.</p>"}, {"location": "obj/transform/#setfixbits-extra", "title": "setfix([bits [,extra]])", "text": "<p>Sets the default float type to fix, and the default bits and extra.</p>"}, {"location": "obj/transform/#str", "title": "str()", "text": "<p>Converts to string. </p> <pre><code>(44).str() -&gt; \"44\"\n</code></pre>"}, {"location": "obj/transform/#basebase", "title": "base(base)", "text": "<p>Converts number to base. Base of power of 2 works well. Have not fully tested others. Performed as a series of mods and divisions. So can become expensive on very large numbers. Split large numbers into parts before using - but careful on the split. </p> <pre><code>(15).base(8) -&gt; 17\n(15).base(7) -&gt; 21\n</code></pre>"}, {"location": "obj/transform/#hex", "title": "hex()", "text": "<p>Converts item to hex. The hex value is stored as an ascii representation of '0'-'F' characters.</p>"}, {"location": "obj/transform/#bin", "title": "bin()", "text": "<p>Converts to binary. </p> <pre><code>(0xC).bin() -&gt; 1100\n</code></pre>"}, {"location": "obj/transform/#setconsttruefalse", "title": "setconst(truefalse)", "text": "<p>Sets a bit to lock the variable from being modified. If set as const, the variable will not be locked when accessed. Useful for global variables accessed by multiple threads where if not a const will cause threads to block on access which is not needed if the variable doesn't change.</p> <p>Performance &amp; Parallelism: All array/vector transformation methods (e.g., <code>.map()</code>, <code>.filter()</code>, <code>.reduce()</code>) are parallel by default, robust, and production-ready for ETL workloads. Grapa's parallelism is well tested for high-throughput data processing.</p>"}, {"location": "operators/assignment/", "title": "Assignment Operators", "text": "", "tags": ["user", "highlevel"]}, {"location": "operators/assignment/#_1", "title": "<code>=</code>", "text": "<p>Assign.</p>", "tags": ["user", "highlevel"]}, {"location": "operators/assignment/#_2", "title": "<code>+=</code>", "text": "<p>Add item to source.</p>", "tags": ["user", "highlevel"]}, {"location": "operators/assignment/#_3", "title": "<code>++=</code>", "text": "<p>Concatenate contents to source.</p>", "tags": ["user", "highlevel"]}, {"location": "operators/assignment/#-", "title": "<code>-=</code>", "text": "<p>Subtract item from source.</p>", "tags": ["user", "highlevel"]}, {"location": "operators/bit/", "title": "Bit Operators", "text": ""}, {"location": "operators/bit/#number", "title": "<code>&lt;&lt;</code> number", "text": "<p>Bit shift left. An effet of multiplying by 2 for every bit shifted.</p>"}, {"location": "operators/bit/#number_1", "title": "<code>&gt;&gt;</code> number", "text": "<p>Bit shift left. An effect of dividing by 2 for every bit shifted.</p>"}, {"location": "operators/bit/#_1", "title": "<code>|</code>", "text": "<p>Bitwise or.</p>"}, {"location": "operators/bit/#_2", "title": "<code>&amp;</code>", "text": "<p>Bitwise and.</p>"}, {"location": "operators/bit/#_3", "title": "<code>^</code>", "text": "<p>Bitwise xor.</p>"}, {"location": "operators/command/", "title": "Command Operators", "text": ""}, {"location": "operators/command/#include", "title": "include", "text": "<p>Loads referenced file during compile time. Also useful for testing a library or class file by using \"include\" to reload the file. If included in a script, this is completed during compile time.</p>"}, {"location": "operators/command/#basic-syntax", "title": "Basic Syntax", "text": "<pre><code>include \"lib/grapa/grapa.grc\";\ninclude \"test/test_basic.grz\";\n</code></pre>"}, {"location": "operators/command/#file-types-and-compilation-behavior", "title": "File Types and Compilation Behavior", "text": ""}, {"location": "operators/command/#source-files-grc", "title": "Source Files (.grc)", "text": "<p>When you include a <code>.grc</code> file, it is compiled at the same time as the script that called the include:</p> <pre><code>/* This .grc file will be parsed and compiled during compilation */\ninclude \"lib/custom/string_utils.grc\";\n\n/* The included code is available immediately */\nresult = some_function_from_included_file();\n</code></pre> <p>Compilation Process: 1. Parse Phase: The <code>.grc</code> file is parsed according to Grapa's BNF grammar 2. Tree Building: Execution trees are generated for all code in the file 3. Optimization: Compile-time optimizations are applied 4. Integration: The execution trees are integrated into the main script</p> <p>Performance Characteristics: - Compilation Time: Longer (file must be parsed and compiled) - Runtime Performance: Same as inline code (fully optimized) - Development: Best for active development and debugging</p>"}, {"location": "operators/command/#pre-compiled-files-grz", "title": "Pre-compiled Files (.grz)", "text": "<p>When you include a <code>.grz</code> file, it is already compiled and will shorten the runtime compilation:</p> <pre><code>/* This .grz file is pre-compiled and loads faster */\ninclude \"lib/custom/string_utils.grz\";\n\n/* The included code is available immediately */\nresult = some_function_from_included_file();\n</code></pre> <p>Compilation Process: 1. Load Phase: The pre-compiled execution trees are loaded directly 2. Integration: The execution trees are integrated into the main script 3. No Parsing: No grammar parsing or tree building required</p> <p>Performance Characteristics: - Compilation Time: Very fast (no parsing overhead) - Runtime Performance: Same as source files (fully optimized) - Deployment: Best for production and distribution</p>"}, {"location": "operators/command/#creating-pre-compiled-files", "title": "Creating Pre-compiled Files", "text": "<p>You can create <code>.grz</code> files from <code>.grc</code> files using the system compilation function:</p> <pre><code>/* Compile a source file to pre-compiled format */\n$sys().compilef(\"lib/custom/string_utils.grc\", \"lib/custom/string_utils.grz\");\n</code></pre>"}, {"location": "operators/command/#practical-examples", "title": "Practical Examples", "text": ""}, {"location": "operators/command/#test-suite-organization", "title": "Test Suite Organization", "text": "<pre><code>/* Include multiple test files */\ninclude \"test/core/test_basic.grc\";\ninclude \"test/core/test_advanced.grc\";\ninclude \"test/test_performance.grz\";\n</code></pre>"}, {"location": "operators/command/#library-development", "title": "Library Development", "text": "<pre><code>/* Include core library */\ninclude \"lib/grapa/grapa.grc\";\n\n/* Include custom extensions */\ninclude \"lib/custom/string_utils.grc\";\ninclude \"lib/custom/math_utils.grc\";\n</code></pre>"}, {"location": "operators/command/#production-deployment", "title": "Production Deployment", "text": "<pre><code>/* Use pre-compiled files for production */\ninclude \"lib/grapa/grapa.grz\";\ninclude \"lib/custom/string_utils.grz\";\ninclude \"lib/custom/math_utils.grz\";\n</code></pre>"}, {"location": "operators/command/#compilation-timing", "title": "Compilation Timing", "text": "<p>Includes are processed during compilation, not at runtime:</p> <pre><code>/* This include is processed when the script is compiled */\ninclude \"lib/grapa/grapa.grc\";\n\n/* The included code is available immediately */\nresult = some_function_from_included_file();\n</code></pre>"}, {"location": "operators/command/#performance-optimization", "title": "Performance Optimization", "text": ""}, {"location": "operators/command/#development-phase", "title": "Development Phase", "text": "<pre><code>/* Use .grc files for development */\ninclude \"lib/development/debug_utils.grc\";\ninclude \"lib/development/test_helpers.grc\";\n</code></pre>"}, {"location": "operators/command/#production-phase", "title": "Production Phase", "text": "<pre><code>/* Use .grz files for production */\ninclude \"lib/production/core.grz\";\ninclude \"lib/production/utils.grz\";\n</code></pre>"}, {"location": "operators/command/#error-handling", "title": "Error Handling", "text": ""}, {"location": "operators/command/#file-not-found", "title": "File Not Found", "text": "<pre><code>/* Include with error handling */\ntry {\n    include \"lib/missing_file.grc\";\n} catch (error) {\n    (\"Warning: Could not include missing_file.grc: \" + error).echo();\n}\n</code></pre>"}, {"location": "operators/command/#compilation-errors", "title": "Compilation Errors", "text": "<pre><code>/* Compilation errors in included files are reported during compilation */\ninclude \"lib/syntax_error.grc\";  /* Will fail during compilation */\n</code></pre>"}, {"location": "operators/command/#best-practices", "title": "Best Practices", "text": "<ol> <li>Development: Use <code>.grc</code> files for easy debugging and modification</li> <li>Production: Use <code>.grz</code> files for optimal performance</li> <li>Organization: Use clear, descriptive names for included files</li> <li>Dependencies: Document include dependencies clearly</li> <li>Build Process: Automate compilation from <code>.grc</code> to <code>.grz</code> for deployment</li> </ol>"}, {"location": "operators/command/#exit", "title": "exit", "text": "<p>Causes the command line shell / console to exit. Primarily used for a script that is initiated from the command line.</p> <p>If used in the console, the exit will not happen until another command is issued from the shell. This is because everything is handled async.</p> <p>To exit while in the console, enter a '.' character.</p>"}, {"location": "operators/compare/", "title": "Compare Operators", "text": ""}, {"location": "operators/compare/#_1", "title": "<code>||</code>", "text": "<p>If either of two conditions are true.</p> <pre><code>((1==1) &amp;&amp; (2==2)) -&gt; true\n((1==1) &amp;&amp; (2==3)) -&gt; true\n((1==2) &amp;&amp; (2==3)) -&gt; false\n</code></pre>"}, {"location": "operators/compare/#_2", "title": "<code>&amp;&amp;</code>", "text": "<p>Two conditions must be true.</p> <pre><code>((1==1) &amp;&amp; (2==2)) -&gt; true\n((1==1) &amp;&amp; (2==3)) -&gt; false\n</code></pre>"}, {"location": "operators/compare/#_3", "title": "<code>==</code>", "text": "<p>Equal to.</p>"}, {"location": "operators/compare/#_4", "title": "'&lt;=&gt;'", "text": "<p>Returns -1 if ab. <pre><code>&gt; \"a\"&lt;=&gt;\"b\"\n-1\n</code></pre>"}, {"location": "operators/compare/#_5", "title": "<code>!=</code>", "text": "<p>Not equal to.</p>"}, {"location": "operators/compare/#_6", "title": "<code>&lt;=</code>", "text": "<p>Less than or equal to.</p>"}, {"location": "operators/compare/#_7", "title": "<code>&gt;=</code>", "text": "<p>Greater than or equal to.</p>"}, {"location": "operators/compare/#_8", "title": "<code>&gt;</code>", "text": "<p>Greater than.</p>"}, {"location": "operators/compare/#_9", "title": "<code>&lt;</code>", "text": "<p>Less than</p>"}, {"location": "operators/compare/#modifier-operators", "title": "Modifier Operators", "text": ""}, {"location": "operators/compare/#-", "title": "<code>-</code>", "text": "<p>Negate.</p> <p>-(4+2) -&gt; -6</p>"}, {"location": "operators/compare/#_10", "title": "<code>!</code>", "text": "<p>Not.</p> <p>!true -&gt; false</p>"}, {"location": "operators/compare/#_11", "title": "<code>~</code>", "text": "<p>Bitwise not.</p> <p>(~0x6C).hex() -&gt; FFFFFF93</p>"}, {"location": "operators/condition/", "title": "Condition Operators", "text": ""}, {"location": "operators/condition/#if", "title": "if", "text": "<p>Syntax options: * if (bool) statement; * if (bool) statement; else statement; * if (bool) statement; elseif statement; else statement;</p> <p>Example: <pre><code>&gt; if (1==0) \"1==0\\n\".echo();  else \"none\\n\".echo();\nnone\n\n&gt; if (1==0) \"1==0\\n\".echo(); elseif (2==2) \"2==2\\n\".echo(); else \"none\\n\".echo();\n2==2\n</code></pre></p>"}, {"location": "operators/condition/#switch", "title": "switch", "text": "<p>Syntax options: * swtich (item) {case item1: statement; item2 statement; etc...;}; * swtich (item) {case item1: statement; item2 statement; etc...; default: statement;};</p> <p>The following is a way to use a switch in place of if/ifelse/else sequence. The switch will compare until if arrives at a true.</p> <pre><code>&gt; switch(true){case (1==0):\"1==0\\n\".echo(); case (2==2): \"2==2\\n\".echo(); default: \"none\\n\".echo();};\n2==2\n</code></pre>"}, {"location": "operators/condition/#_1", "title": "<code>?</code>", "text": "<p>Syntax options: * bool ? statement for true; * bool ? statement for true : statement for false; * bool ? : statement for false; * (&lt;0)|(0)|(&gt;0) ? statement for -1 : statement for 0 : statement for 1;</p> <p>Example: <pre><code>&gt; 1?hi:by\nhi\n\n&gt; 0?hi:by\nby\n\n&gt; -55?hi:by:there\nhi\n\n&gt; (\"a\"&lt;=&gt;\"b\")?a:e:b\na\n</code></pre></p>"}, {"location": "operators/constants/", "title": "Constant", "text": ""}, {"location": "operators/constants/#true", "title": "true", "text": "<p>true</p>"}, {"location": "operators/constants/#false", "title": "false", "text": "<p>false</p>"}, {"location": "operators/constants/#null", "title": "null", "text": "<p>null</p>"}, {"location": "operators/constants/#stack", "title": "Stack", "text": ""}, {"location": "operators/constants/#_1", "title": "$$", "text": "<p>There is a stack of a single value, the value of the result of the prior operation. This value can be accessed by accessing the $$ variable.</p> <p>```</p> <p>(52).{@$$3} 30</p>"}, {"location": "operators/function/", "title": "Function Operators", "text": ""}, {"location": "operators/function/#op", "title": "op", "text": "<p>Creating an $OP. See $OP type.</p>"}, {"location": "operators/function/#class", "title": "class", "text": "<p>Creates a class that can be used to generate an instance of the class. The class definition is shared between all instances using the class. If information in the class is altered, a copy is made and the modified variable is added to the instance. The instance stores the class reference and any variables local to the instance. Classes can inherit 1 or more other classes. </p> <pre><code>myC = class {myV = 0; myF = op(a){myV=a};};\nmyC2 = class (myC) {myV2 = 0; myF2 = op(a){myV2=a};};\nmyIns = obj myC2;\n@myIns;\n{}\n\nmyIns.myF(4);\nmyIns.myV;\n4\n\nmyIns.myV2;\n0\n\nmyIns;\n{\"myV\":4}\n</code></pre>"}, {"location": "operators/function/#obj", "title": "obj", "text": "<p>Creating an instance of a class. See class.</p>"}, {"location": "operators/function/#token", "title": "token", "text": "<p>Used to define lexical rules. Currently only used to define special character handling like space and tab, where the default handling is to skip these characters so they do not need to be specified in the grammar. </p>"}, {"location": "operators/function/#rule", "title": "rule", "text": "<p>See $RULE type</p>"}, {"location": "operators/function/#const", "title": "const", "text": "<p>Sets a bit in the variable that prevents it from being changed. Will not be locked when accessed, which is useful for a global variable accssed by concurent threads.</p> <pre><code>x = const {one: \"string one\", two: \"string two\"};\n</code></pre> <p>Once set, the variable can not be modified. To turn off the const bit, use the following: <pre><code>x.setconst(false);\nx += (three:\"th str\");\nx.setconst(true);\n</code></pre></p> <p>Note: <code>const</code> is intended for performance (caching/optimization), not for locking or thread safety. It prevents modification unless <code>setconst</code> is used, but does not synchronize access between threads. For explicit locking, see $thread.</p>"}, {"location": "operators/function/#static", "title": "static", "text": "<p>Compile-time option. The code to construct the array (or value) is executed at compile time (during script loading), not at runtime. This reduces repeated computation and improves performance, but does not affect thread safety or immutability.</p> <pre><code>f = op(s)\n{\n  x = static {one: \"string one\", two: \"string two\"};\n  x[s];\n};\nf(\"two\");\n</code></pre> <p>Here is the compiled function with static: <pre><code>@&lt;[op,@[@&lt;assign,{x,{\"one\":\"string one\",\"two\":\"string two\"}}&gt;,@&lt;search,{@&lt;var,{x}&gt;,@&lt;createlist,{@&lt;var,{s}&gt;}&gt;}&gt;]],{s}&gt;\n</code></pre></p> <p>Here is the compiled funciton without static: <pre><code>@&lt;[op,@[@&lt;assign,{x,@&lt;prepend,{@&lt;createlist,{@&lt;name,{two,\"string two\"}&gt;}&gt;,@&lt;name,{one,\"string one\"}&gt;}&gt;}&gt;,@&lt;search,{@&lt;var,{x}&gt;,@&lt;createlist,{@&lt;var,{s}&gt;}&gt;}&gt;]],{s}&gt;\n</code></pre></p> <p>If the list needs to be constructed using a variable that is passed in, than do not use the static operator and the variable will be constructed at run time.</p> <p>Note: <code>static</code> is for compile-time evaluation only. It does not make a value immutable or thread safe. For thread safety and locking, see $thread.</p>"}, {"location": "operators/function/#literal", "title": "literal", "text": "<p>Any sequence starting with an ascii letter, and including numbers and '_'. </p>"}, {"location": "operators/function/#literal-params", "title": "literal ([params])", "text": "<p>Assumes literal is a variable reference for $OP or $CODE, and runs the routine passing in parameters specified. See $OP and $CODE.</p> <p>```</p>"}, {"location": "operators/loop/", "title": "Loop and Functional Array Methods", "text": "<p>/*</p>"}, {"location": "operators/loop/#thread-safety", "title": "Thread Safety", "text": "<p>Grapa is fully thread safe in all supported environments (command line, Grapa shell, and Python/GrapaPy). All built-in operations\u2014including map, filter, reduce, $thread, and $net\u2014are safe to use concurrently. Users do not need to take any special precautions for thread safety in these environments.</p> <p>Note: Only if Grapa is integrated directly into a non-thread-safe C++ host (not anticipated for normal users) would additional thread safety considerations arise. */</p> <p>/*</p>"}, {"location": "operators/loop/#quick-reference-map-filter-reduce", "title": "Quick Reference: map, filter, reduce", "text": "Method Signature Parallel? Purpose map arr.map(op(x) { ... }, [params...]) Yes Transform each item filter arr.filter(op(x) { ... }, [params...]) Yes Select items matching a test reduce arr.reduce(op(acc, x) { ... }, init, [params]) No Accumulate to a single value <ul> <li>All methods accept an operation (op) as the first argument.</li> <li>For map/filter, the op is called in parallel for each item.</li> <li>For reduce, the op is called sequentially, passing the accumulator.</li> <li>See also: EXAMPLES.md, USE_CASES.md */</li> </ul>"}, {"location": "operators/loop/#while", "title": "while", "text": "<p>Syntax: * while(bool) statement;</p> <p>Example: <pre><code>i = 0;\nwhile (i &lt; 5) {\n    i += 1;\n    (i.str() + \":\").echo();\n};\n\"\\n\".echo();\n/* Output: 1:2:3:4:5: */\n</code></pre></p>"}, {"location": "operators/loop/#map", "title": "map", "text": "<p>Syntax: * arr.map(op(x) { ... }, [params...]);</p> <ul> <li>Calls the operation for each item in the array, in parallel.</li> <li>Returns a new array with the results.</li> </ul> <p>Example: <pre><code>arr = [1,2,3];\ndoubled = arr.map(op(n) { n * 2; });\ndoubled.echo();\n/* Output: [2,4,6] */\n</code></pre></p>"}, {"location": "operators/loop/#filter", "title": "filter", "text": "<p>Syntax: * arr.filter(op(x) { ... }, [params...]);</p> <ul> <li>Calls the operation for each item in the array, in parallel.</li> <li>Returns a new array containing only items for which the op returns a non-null, non-zero, non-empty value.</li> </ul> <p>Minimal Example: <pre><code>arr = [1,2,3,4];\nfiltered = arr.filter(op(x) { x &gt; 2; });\nfiltered.echo();\n/* Output: [3,4] */\n</code></pre></p> <p>Edge Cases: <pre><code>arr = [1,2,3,4];\nfiltered_none = arr.filter(op(x) { 0; });\nfiltered_none.echo();\n/* Output: [] */\n</code></pre></p>"}, {"location": "operators/loop/#reduce", "title": "reduce", "text": "<p>Syntax: * arr.reduce(op(acc, x) { ... }, init, [params...]);</p> <ul> <li>Calls the operation sequentially for each item, passing the accumulator (acc) and the current item (x).</li> <li>The accumulator must be mutated inside the op (e.g., acc += x;), not just returned as a new value.</li> <li>Returns the final value of the accumulator.</li> <li>If init is omitted, the first item is used as the initial value.</li> <li>Reduce is always sequential (not parallel).</li> </ul> <p>Minimal Example (Sum): <pre><code>arr = [1,2,3,4];\nsum = arr.reduce(op(acc, x) { acc += x; }, 0);\nsum.echo();\n/* Output: 10 */\n</code></pre></p> <p>Canonical Example (All Together): <pre><code>arr = [1,2,3,4];\nfiltered_gt2 = arr.filter(op(x) { x &gt; 2; });\nfiltered_eq2 = arr.filter(op(x) { x == 2; });\nfiltered_none = arr.filter(op(x) { 0; });\nreduced_sum = arr.reduce(op(acc, x) { acc += x; }, 0);\n(\"filtered_gt2: \" + filtered_gt2.str() + \"\\n\").echo();\n(\"filtered_eq2: \" + filtered_eq2.str() + \"\\n\").echo();\n(\"filtered_none: \" + filtered_none.str() + \"\\n\").echo();\n(\"reduced_sum: \" + reduced_sum.str() + \"\\n\").echo();\n/*\nOutput:\nfiltered_gt2: [3,4]\nfiltered_eq2: [2]\nfiltered_none: []\nreduced_sum: 10\n*/\n</code></pre></p>"}, {"location": "operators/loop/#important-accumulator-mutation-in-reduce", "title": "Important: Accumulator Mutation in reduce", "text": "<ul> <li>The accumulator variable (acc) must be mutated inside the op for reduce to work as expected.</li> <li>This means you must use <code>acc += x;</code> or similar, not just <code>acc + x;</code>.</li> <li>Returning a new value does NOT update the accumulator.</li> <li>Common mistake: <pre><code>arr = [1,2,3,4];\nsum = arr.reduce(op(acc, x) { acc + x; }, 0);\nsum.echo();\n/* Output: 0 (WRONG!) */\n</code></pre></li> <li>Correct: <pre><code>arr = [1,2,3,4];\nsum = arr.reduce(op(acc, x) { acc += x; }, 0);\nsum.echo();\n/* Output: 10 */\n</code></pre></li> </ul>"}, {"location": "operators/loop/#troubleshooting-reduce", "title": "Troubleshooting reduce", "text": "<ul> <li>If your reduce result is always the initial value, check that you are mutating the accumulator.</li> <li>Use <code>acc += x;</code> or <code>acc = acc * x;</code> as needed.</li> <li>If you want to build an array, use <code>acc += x;</code> with an array accumulator.</li> </ul>"}, {"location": "operators/loop/#best-practices-for-mapfilterreduce", "title": "Best Practices for map/filter/reduce", "text": "<ul> <li>Use map for transformations, filter for selection, reduce for aggregation.</li> <li>For side effects, prefer reduce (sequential) over map/filter (parallel).</li> <li>Always use block comments (<code>/* ... */</code>) for documentation.</li> <li>Test your op in the REPL with small arrays before using in scripts.</li> <li>For complex reductions, consider using an object or array as the accumulator.</li> </ul>"}, {"location": "operators/loop/#see-also", "title": "See Also", "text": "<ul> <li>EXAMPLES.md</li> <li>USE_CASES.md</li> <li>Basic Syntax Guide</li> <li>Array Type</li> </ul> <p>/ End of canonical map/filter/reduce documentation. /</p>"}, {"location": "operators/math/", "title": "Math Operators", "text": ""}, {"location": "operators/math/#_1", "title": "<code>+</code>", "text": "<p>Add.</p>"}, {"location": "operators/math/#-", "title": "<code>-</code>", "text": "<p>Subtract.</p>"}, {"location": "operators/math/#_2", "title": "<code>**</code>", "text": "<p>Power.</p>"}, {"location": "operators/math/#_3", "title": "<code>*/</code>", "text": "<p>Root.</p> <pre><code>&gt; (9*9) */ 2\n9\n\n&gt; (9*9) */ 2.0\n9\n\n&gt; (9*9) */ 2.1\n8.105921431777598477594162942004\n\n&gt; (9*9) */ 4.0\n3\n\n&gt; (9*9) ** 0.5\n9\n\n&gt; (9*9) ** 0.25\n3\n</code></pre>"}, {"location": "operators/math/#_4", "title": "<code>*</code>", "text": "<p>Multiply.</p>"}, {"location": "operators/math/#_5", "title": "<code>/</code>", "text": "<p>Divide.</p>"}, {"location": "operators/math/#_6", "title": "<code>%</code>", "text": "<p>Mod.</p>"}, {"location": "syntax/basic_syntax/", "title": "Basic Grapa Syntax Guide", "text": "<p>Canonical Reference: This file is the canonical, empirically tested reference for Grapa syntax and access patterns. All code in documentation and tests must comply with these rules. If you discover any new rules or exceptions, update this file immediately.</p> <p>Important: Access Patterns for Data Types (Tested, v0.0.39)</p> Type .get(\"key\") .get(index) Bracket Notation Dot Notation .len() .size() $ARRAY \u274c \u274c \u2705 \u2014 \u2705 \u274c $LIST \u274c \u274c \u2705 \u2705 \u2705 \u274c $OBJ \u274c \u274c \u2705 \u2705 \u274c \u274c $file \u2705 \u274c \u2014 \u2014 \u274c \u274c $TABLE \u2705* \u274c \u2014 \u2014 \u274c \u274c <p>*$TABLE .get() requires two arguments: key and field.</p> <p>Key Findings: - Arrays (<code>[]</code>): Use <code>array[index]</code> and <code>array.len()</code> for access and length - Lists (<code>{}</code>): Use <code>list[key]</code> or <code>list.key</code> for access, <code>list.len()</code> for length - Objects (class): Use <code>object.property</code> or <code>object[key]</code> for access - <code>.get()</code> method: Only works on <code>$file</code> and <code>$TABLE</code> types - <code>.size()</code> method: Not supported on any type (use <code>.len()</code> instead) - <code>.keys()</code> method: Not supported on <code>$LIST</code> (use iteration instead)</p> <p>Recommended Patterns: - For arrays: <code>array[index]</code> and <code>array.len()</code> - For lists: <code>list[key]</code> (preferred) or <code>list.key</code>, and <code>list.len()</code> - For objects: <code>object.property</code> (preferred) or <code>object[key]</code> - Avoid <code>.get()</code>, <code>.size()</code>, and <code>.keys()</code> on arrays, lists, and objects</p> <p>Clarification on .get() Usage: - <code>.get()</code> is required for <code>$file</code> and <code>$TABLE</code> access. - <code>.get()</code> is not supported for <code>$ARRAY</code>, <code>$LIST</code>, or <code>$OBJ</code> (returns empty string). - Use bracket and dot notation for <code>$ARRAY</code>, <code>$LIST</code>, and <code>$OBJ</code>. - Length: Use <code>.len()</code> for arrays and lists, not <code>.size()</code>. - Keys: For lists, iterate manually instead of using <code>.keys()</code>. - If more objects support <code>.get()</code> in the future, this guide will be updated.</p> <p>This guide covers the essential syntax patterns for writing Grapa code, based on working examples and best practices.</p> <p>See also: Operator Precedence Table</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#output-and-echo", "title": "Output and Echo", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#correct-echo-syntax", "title": "Correct Echo Syntax", "text": "<p>Use the <code>.echo()</code> method on strings, not function calls:</p> <pre><code>/* \u2705 Correct */\n\"Hello World\".echo();\n(\"Result: \" + value.str()).echo();\n\n/* \u274c Incorrect */\necho(\"Hello World\");\necho(\"Result: \" + value);\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#string-concatenation", "title": "String Concatenation", "text": "<p>Always wrap string concatenation expressions in parentheses:</p> <pre><code>/* \u2705 Correct */\n(\"Name: \" + name.str() + \", Age: \" + age.str()).echo();\n(\"File size: \" + size + \" bytes\").echo();\n\n/* \u274c Incorrect */\n\"Name: \" + name.str() + \", Age: \" + age.str().echo();\n\"File size: \" + size + \" bytes\".echo();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#loops", "title": "Loops", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#while-loops", "title": "While Loops", "text": "<p>Use <code>while</code> loops with explicit increment:</p> <pre><code>/* \u2705 Correct */\ni = 1;\nwhile (i &lt;= 10) {\n    (\"Processing item \" + i.str()).echo();\n    i = i + 1;\n}\n\n/* \u274c Incorrect */\nfor i in 1..10 {\n    echo(\"Processing item \" + i);\n}\n</code></pre> <ul> <li>Only <code>while</code> loops and <code>.range()</code>+functional methods are valid for iteration in Grapa.</li> <li><code>for</code> loops are not supported.</li> <li>If more objects support <code>.get()</code> in the future, this guide will be updated.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#loop-examples", "title": "Loop Examples", "text": "<pre><code>/* Count from 1 to 5 */\ni = 1;\nwhile (i &lt;= 5) {\n    (\"Count: \" + i.str()).echo();\n    i = i + 1;\n}\n\n/* Process array elements */\ni = 0;\nwhile (i &lt; array.len()) {\n    element = array[i];  /* Use bracket notation for arrays */\n    (\"Element \" + i.str() + \": \" + element.str()).echo();\n    i = i + 1;\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#sequence-generation-with-range", "title": "Sequence Generation with .range()", "text": "<p>Use <code>.range()</code> to generate sequences of numbers:</p> <pre><code>/* Generate sequence 0 to 9 */\nseq = (10).range(0,1);  /* [0,1,2,3,4,5,6,7,8,9] */\n\n/* Generate sequence with custom start and step */\nseq = (10).range(1,2);  /* [1,3,5,7,9] */\n\n/* Use .range() with functional methods for iteration */\nsum = (10).range(0,1).reduce(op(acc, x) { acc += x; }, 0);  /* Sum 0-9 */\n\n/* Parallel processing with thread count */\nsquares = (1000000).range(0,1).map(op(x) { x * x; }, 8);  /* Limit to 8 threads */\n</code></pre> <ul> <li>Use <code>.range()</code> instead of manual while loops for sequence generation</li> <li>Combine with <code>.map()</code>, <code>.filter()</code>, <code>.reduce()</code> for functional iteration</li> <li>Specify thread count for large arrays to avoid too many threads</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#functional-programming-methods", "title": "Functional Programming Methods", "text": "<p>Grapa provides powerful functional programming methods for array and list processing:</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#map-transform-elements", "title": ".map() - Transform Elements", "text": "<pre><code>/* Transform each element */\nnumbers = [1, 2, 3, 4, 5];\ndoubled = numbers.map(op(x) { x * 2; });  /* [2, 4, 6, 8, 10] */\n\n/* Transform with string operations */\nnames = [\"john\", \"jane\", \"bob\"];\nuppercase = names.map(op(name) { name.upper(); });  /* [\"JOHN\", \"JANE\", \"BOB\"] */\n\n/* Parallel processing with thread count */\nlarge_data = (1000000).range(0,1);\nsquares = large_data.map(op(x) { x * x; }, 8);  /* Limit to 8 threads */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#filter-select-elements", "title": ".filter() - Select Elements", "text": "<pre><code>/* Filter even numbers */\nnumbers = [1, 2, 3, 4, 5, 6];\nevens = numbers.filter(op(x) { x % 2 == 0; });  /* [2, 4, 6] */\n\n/* Filter non-empty strings */\nlines = [\"hello\", \"\", \"world\", \"\", \"test\"];\nnon_empty = lines.filter(op(line) { line.len() &gt; 0; });  /* [\"hello\", \"world\", \"test\"] */\n\n/* Parallel filtering */\nlarge_data = (1000000).range(0,1);\nfiltered = large_data.filter(op(x) { x % 2 == 0; }, 8);  /* Limit to 8 threads */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#reduce-accumulate-values", "title": ".reduce() - Accumulate Values", "text": "<pre><code>/* Sum all numbers */\nnumbers = [1, 2, 3, 4, 5];\nsum = numbers.reduce(op(acc, x) { acc + x; }, 0);  /* 15 */\n\n/* Build a string */\nwords = [\"hello\", \"world\", \"test\"];\nsentence = words.reduce(op(acc, word) { acc + \" \" + word; }, \"\");  /* \" hello world test\" */\n\n/* Collect even numbers */\nnumbers = [1, 2, 3, 4, 5, 6];\nevens = numbers.reduce(op(acc, x) {\n    if (x % 2 == 0) { acc += x; };\n    acc;\n}, []);  /* [2, 4, 6] */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#method-chaining", "title": "Method Chaining", "text": "<p>Combine multiple functional methods:</p> <pre><code>/* Filter, transform, then sum */\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nresult = numbers\n    .filter(op(x) { x % 2 == 0; })      /* [2, 4, 6, 8, 10] */\n    .map(op(x) { x * x; })              /* [4, 16, 36, 64, 100] */\n    .reduce(op(acc, x) { acc + x; }, 0); /* 220 */\n\n/* Process with .range() */\nresult = (10).range(0,1)\n    .filter(op(x) { x % 2 == 0; })      /* [0, 2, 4, 6, 8] */\n    .map(op(x) { x * x; })              /* [0, 4, 16, 36, 64] */\n    .reduce(op(acc, x) { acc + x; }, 0); /* 120 */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#parallel-processing", "title": "Parallel Processing", "text": "<p>Functional methods support parallel processing for large datasets:</p> <pre><code>/* Large dataset processing */\ndata = (1000000).range(0,1);\n\n/* Parallel map with 8 threads */\nsquares = data.map(op(x) { x * x; }, 8);\n\n/* Parallel filter with 8 threads */\nevens = data.filter(op(x) { x % 2 == 0; }, 8);\n\n/* Parallel reduce with 4 threads */\nsum = data.reduce(op(acc, x) { acc + x; }, 0, 4);\n</code></pre> <p>Important Notes: - <code>.map()</code> and <code>.filter()</code> are parallel by default for large arrays - Always specify thread count for very large datasets to avoid too many threads - <code>.reduce()</code> can be parallel but requires careful consideration of the operation - Method chaining is efficient and readable</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#data-types-and-access-patterns", "title": "Data Types and Access Patterns", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-type-array", "title": "Array Type (<code>$ARRAY</code>)", "text": "<p>Arrays are created with square brackets and support index-based access:</p> <pre><code>/* Create arrays */\nnumbers = [1, 2, 3, 4, 5];\nnames = [\"Alice\", \"Bob\", \"Charlie\"];\nmixed = [1, \"text\", true, 3.14];\n\n/* Access elements */\nfirst = numbers[0];      /* 1 */\nsecond = names[1];       /* \"Bob\" */\nlength = numbers.len();  /* 5 */\n\n/* Iterate over arrays */\ni = 0;\nwhile (i &lt; numbers.len()) {\n    (\"Number \" + i.str() + \": \" + numbers[i]).echo();\n    i += 1;\n}\n</code></pre> <p>Array Methods: - <code>array[index]</code> - Access element by index - <code>array.len()</code> - Get array length - <code>array.size()</code> - Not supported (use <code>.len()</code> instead) - <code>array.get(index)</code> - Not supported (use bracket notation)</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#list-type-list", "title": "List Type (<code>$LIST</code>)", "text": "<p>Lists are created with curly braces and support key-based access:</p> <pre><code>/* Create lists */\nconfig = {\"debug\": true, \"port\": 3000, \"host\": \"localhost\"};\nuser = {\"name\": \"John\", \"age\": 30, \"city\": \"NYC\"};\nnested = {\"level1\": {\"level2\": \"value\"}};\n\n/* Access elements */\ndebug_mode = config[\"debug\"];    /* true */\nuser_name = user.name;           /* \"John\" */\ndeep_value = nested[\"level1\"][\"level2\"];  /* \"value\" */\nlength = config.len();           /* 3 */\n\n/* Iterate over lists */\nkeys = [\"debug\", \"port\", \"host\"];\ni = 0;\nwhile (i &lt; keys.len()) {\n    key = keys[i];\n    value = config[key];\n    (key + \": \" + value.str()).echo();\n    i += 1;\n}\n</code></pre> <p>List Methods: - <code>list[key]</code> - Access element by key (preferred) - <code>list.key</code> - Access element by key (alternative) - <code>list.len()</code> - Get list length - <code>list.get(key)</code> - Not supported (use bracket notation) - <code>list.keys()</code> - Not supported (iterate manually)</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#object-type-obj", "title": "Object Type (<code>$OBJ</code>)", "text": "<p>Objects are instances of classes and support property access:</p> <pre><code>/* Define a class */\nPerson = class {\n    name = \"\";\n    age = 0;\n\n    init = op(n, a) {\n        name = n;\n        age = a;\n    };\n\n    getInfo = op() {\n        (\"Name: \" + name + \", Age: \" + age.str()).echo();\n    };\n};\n\n/* Create object instances */\nperson1 = obj Person;\nperson1.init(\"Alice\", 25);\nperson2 = obj Person;\nperson2.init(\"Bob\", 30);\n\n/* Access properties */\nname = person1.name;             /* \"Alice\" */\nage = person1[\"age\"];            /* 25 */\nperson1.getInfo();               /* Call method */\n</code></pre> <p>Object Methods: - <code>object.property</code> - Access property (preferred) - <code>object[key]</code> - Access property (alternative) - <code>object.method()</code> - Call object methods - <code>object.get(key)</code> - Not supported (use dot notation)</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#type-comparison-summary", "title": "Type Comparison Summary", "text": "Feature $ARRAY $LIST $OBJ Creation <code>[1,2,3]</code> <code>{\"key\":\"value\"}</code> <code>obj Class</code> Access <code>array[index]</code> <code>list[key]</code> or <code>list.key</code> <code>object.property</code> Length <code>array.len()</code> <code>list.len()</code> Not available Iteration Index-based Key-based Property-based", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#variable-assignment", "title": "Variable Assignment", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#basic-assignment", "title": "Basic Assignment", "text": "<pre><code>/* Simple variables */\nname = \"John Doe\";\nage = 30;\nsalary = 75000.50;\n\n/* Incrementing and appending */\nv = v + 1;   /* Valid */\nv += 1;      /* Idiomatic and preferred */\ns = s + \"x\";   /* Valid */\ns += \"x\";      /* Idiomatic and preferred */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#namespace-system", "title": "Namespace System", "text": "<p>Grapa has a dynamic namespace system that's automatically managed by the execution tree:</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#global-namespace", "title": "Global Namespace", "text": "<p>Use <code>$global</code> for variables that need to persist across function calls:</p> <pre><code>/* Create global variable */\n$global.my_table = $file().table(\"ROW\");\n\n/* Use global variable */\nmy_table.mkfield(\"name\", \"STR\", \"VAR\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#local-namespace", "title": "Local Namespace", "text": "<p>Each function execution creates its own namespace automatically:</p> <pre><code>/* Function with local variables */\nfunc = op(x) {\n    local_var = x * 2;  /* This is in the function's local namespace */\n    local_var.echo();\n};\n\nfunc(5);  /* Output: 10 */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#namespace-hierarchy", "title": "Namespace Hierarchy", "text": "<p>Variables can be accessed from parent namespaces:</p> <pre><code>/* Global variable */\n$global.config = {\"debug\": true, \"timeout\": 30};\n\n/* Function can access global variables */\nfunc = op() {\n    if (config.debug) {\n        (\"Debug mode enabled\").echo();\n    }\n    /* Local override */\nlocal_config = {\"debug\": false};\n    local_config.debug.echo();  /* false */\n};\n\nfunc();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#dynamic-namespace-creation", "title": "Dynamic Namespace Creation", "text": "<p>Namespaces are created automatically for each execution context:</p> <pre><code>/* Each block creates a new namespace */\nif (condition) {\n    block_var = \"value\";  /* In block namespace */\n} else {\n    block_var = \"other\";  /* Different block namespace */\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#const-protection", "title": "Const Protection", "text": "<p>Grapa provides runtime const protection that prevents variable modification:</p> <pre><code>/* Create const variable */\nconfig = const {\"debug\": true, \"port\": 3000};\n\n/* Cannot modify (will error) */\nconfig.port = 8080;  /* Error: cannot modify const */\n\n/* Can toggle const protection */\nconfig.setconst(false);\nconfig.port = 8080;  /* Now works */\nconfig.setconst(true);  /* Make const again */\n\n/* Const arrays */\ncolors = const [\"red\", \"green\", \"blue\"];\ncolors += \"yellow\";  /* Error: cannot modify const */\n\n/* Performance optimization */\nstatic_config = static {\"api_url\": \"https://api.example.com\"};\n</code></pre> <p>Benefits of Grapa's const: - Runtime protection: Prevents actual modification at runtime - Dynamic control: Can toggle const on/off as needed - Performance: Optimized for caching and concurrent access - Thread safety: Prevents blocking on access for concurrent threads</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#class-system", "title": "Class System", "text": "<p>Grapa provides a full object-oriented programming system with classes, inheritance, and polymorphism:</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#basic-class-definition", "title": "Basic Class Definition", "text": "<pre><code>/* Define a class */\nPerson = class {\n    name = \"\";\n    age = 0;\n    city = \"\";\n\n    /* Constructor */\n    init = op(n, a, c) {\n        name = n;\n        age = a;\n        city = c;\n    };\n\n    /* Method */\n    getInfo = op() {\n        (\"Name: \" + name + \", Age: \" + age.str() + \", City: \" + city).echo();\n    };\n};\n\n/* Create instance */\nperson = obj Person;\nperson.init(\"John\", 30, \"NYC\");\nperson.getInfo();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#inheritance", "title": "Inheritance", "text": "<pre><code>/* Base class */\nAnimal = class {\n    name = \"\";\n    speak = op() { (\"Some sound\").echo(); };\n};\n\n/* Derived class */\nDog = class (Animal) {\n    breed = \"\";\n    /* Override method */\nspeak = op() { (\"Woof!\").echo(); };\n    fetch = op() { (\"Fetching ball\").echo(); };\n};\n\n/* Usage */\nmyDog = obj Dog;\nmyDog.name = \"Buddy\";\nmyDog.speak();  /* Output: Woof! */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#polymorphism", "title": "Polymorphism", "text": "<pre><code>/* Different animal types */\nanimals = [obj Dog, obj Animal];\ni = 0;\nwhile (i &lt; animals.len()) {\n    animals[i].speak();  /* Calls appropriate method */\n    i += 1;\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#inheritance-and-composition", "title": "Inheritance and Composition", "text": "<p>Grapa supports full object-oriented programming features:</p> <ul> <li>Inheritance: Use <code>class (ParentClass)</code> to create subclasses</li> <li>Method overriding: Subclasses can override parent methods</li> <li>Method sets: Classes have sets of methods, similar to Go/Java</li> <li>Composition: Classes and objects can include other objects as properties</li> <li>Function chaining: Class methods support dot notation chaining (see Function Chaining)</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#example", "title": "Example", "text": "<pre><code>Animal = class {\n    speak = op() { \"Some sound\".echo(); };\n};\nDog = class (Animal) {\n    /* Method override */\n    speak = op() { \"Woof!\".echo(); };\n    /* New method */\n    fetch = op() { \"Fetching...\".echo(); };\n};\nmyDog = obj Dog;\nmyDog.speak();  /* Outputs: Woof! */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#string-operations", "title": "String Operations", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#string-methods", "title": "String Methods", "text": "<pre><code>/* Convert to string */\ntext = value.str();\n\n/* String concatenation */\nfull_name = first_name + \" \" + last_name;\n\n/* String with variables */\nmessage = (\"Hello \" + name + \", you are \" + age.str() + \" years old\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#string-concatenation_1", "title": "String Concatenation", "text": "<pre><code>/* Both forms are valid, but += is preferred */\nmessage = message + \" world\";\nmessage += \"!\";\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#string-literals", "title": "String Literals", "text": "<p>Always use double quotes for string literals:</p> <pre><code>/* \u2705 Correct */\nname = \"John Doe\";\nmessage = \"Hello World\";\n\n/* \u274c Incorrect */\nname = John Doe;\nmessage = Hello World;\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-and-object-access", "title": "Array and Object Access", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-access", "title": "Array Access", "text": "<p>Arrays (<code>$ARRAY</code>) support only bracket notation:</p> <pre><code>arr = [\"a\", \"b\", \"c\"];\nvalue = arr[1];        /* Returns \"b\" */\n</code></pre> <ul> <li>Use bracket notation for <code>$ARRAY</code>.</li> <li><code>.get()</code> is not supported for <code>$ARRAY</code>.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-concatenation", "title": "Array Concatenation", "text": "<p>Use the <code>+=</code> operator to concatenate arrays:</p> <pre><code>arr1 = [\"a\", \"b\"];\narr2 = [\"c\", \"d\"];\narr1 += arr2;          /* arr1 is now [\"a\", \"b\", \"c\", \"d\"] */\n</code></pre> <ul> <li>The <code>+=</code> operator appends all elements from the right array to the left array.</li> <li>This is simpler than using <code>.reduce()</code> or other functional methods.</li> <li>No spread operator (<code>...</code>) is needed or supported.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-slicing-with-range", "title": "Array Slicing with .range()", "text": "<p>Use <code>.range()</code> for array slicing operations:</p> <pre><code>arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n\n/* Get elements from index 1 to end */\nslice1 = arr.range(1, arr.len());  /* [\"b\", \"c\", \"d\", \"e\"] */\n\n/* Get first 3 elements */\nslice2 = arr.range(0, 3);  /* [\"a\", \"b\", \"c\"] */\n\n/* Get elements from index 1 to 3 */\nslice3 = arr.range(1, 3);  /* [\"b\", \"c\"] */\n</code></pre> <ul> <li>Use <code>.range(start, end)</code> for array slicing</li> <li>This replaces slice notation like <code>arr[1:]</code>, <code>arr[:3]</code>, <code>arr[1:3]</code></li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-methods", "title": "Array Methods", "text": "<p>Grapa provides several useful array methods:</p> <pre><code>/* Basic array operations */\narr = [3, 1, 4, 1, 5, 9, 2, 6];\n\n/* Sort array */\nsorted_arr = arr.sort();  /* [1, 1, 2, 3, 4, 5, 6, 9] */\n\n/* Get array length */\nlength = arr.len();  /* 8 */\n\n/* Join array elements into string */\nwords = [\"hello\", \"world\", \"test\"];\nsentence = words.join(\" \");  /* \"hello world test\" */\n\n/* Split string into array */\ntext = \"hello,world,test\";\nparts = text.split(\",\");  /* [\"hello\", \"world\", \"test\"] */\n</code></pre> <p>Important Notes: - Use <code>.sort()</code> for deterministic test output when order is not guaranteed - <code>.len()</code> returns the number of elements in an array - <code>.join(delimiter)</code> combines array elements with the specified delimiter - <code>.split(delimiter)</code> splits a string into an array using the delimiter</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#listobject-access", "title": "List/Object Access", "text": "<p>Lists (<code>$LIST</code>) and objects (<code>$OBJ</code>) support bracket and dot notation:</p> <pre><code>obj = {\"a\": 11, \"b\": 22, \"c\": 33};\nvalue = obj[\"b\"];          /* Returns 22 (key access) */\nvalue = obj.key;            /* Returns value for key 'key' if present */\nvalue = obj.\"b\";           /* Returns 22 (key access) */\n\n/* $LIST supports both key and index access: */\nvalue = obj[1];             /* Returns 22 (index access) */\nvalue = obj[\"a\"];           /* Returns 11 (key access) */\nvalue = obj.a;              /* Returns 11 (dot notation key access) */\nname = obj.getname(1);      /* Returns \"b\" (key name) */\n</code></pre> <ul> <li>Use bracket and dot notation for <code>$LIST</code> and <code>$OBJ</code>.</li> <li>$LIST supports both key access (obj[\"key\"], obj.key) and index access (obj[2]).</li> <li><code>.get()</code> is not supported for <code>$LIST</code> or <code>$OBJ</code>.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#file-and-table-access", "title": "$file and $TABLE Access", "text": "<p>For <code>$file</code> and <code>$TABLE</code> objects, always use <code>.get()</code> method:</p> <pre><code>files = $file().ls();\nfile_info = files.get(0);   /* Correct */\n\ntable = $file().table(\"ROW\");\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"user1\", \"Alice\", \"name\");\nvalue = table.get(\"user1\", \"name\");   /* Correct */\n</code></pre> <ul> <li>Always use <code>.get()</code> for <code>$file</code> and <code>$TABLE</code>.</li> <li>Bracket and dot notation are not valid for <code>$file</code> and <code>$TABLE</code>.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#type-system-philosophy", "title": "Type System Philosophy", "text": "<p>Grapa uses dynamic typing as a fundamental design choice, not a limitation. This enables Grapa's core strengths:</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#dynamic-type-system-benefits", "title": "Dynamic Type System Benefits", "text": "<ul> <li>Runtime flexibility: Types are determined at execution time</li> <li>Dynamic code execution: Enables meta-programming and code generation</li> <li>System integration: Works with data of unknown types</li> <li>Data processing: Ideal for ETL and analysis tasks</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#type-safety-through-runtime-checking", "title": "Type Safety Through Runtime Checking", "text": "<p>Grapa provides robust type safety through runtime checking and introspection:</p> <pre><code>/* Check object types */\nelement = [\"a\", \"b\", \"c\"];\nelement.type();        /* Returns $ARRAY */\n\nobj = {\"a\": 11, \"b\": 22, \"c\": 33};\nobj.type();            /* Returns $LIST */\n\ntable = $file().table(\"ROW\");\ntable.type();          /* Returns $TABLE */\n\n/* Runtime type checking */\nif (value.type() == $INT) {\n    (\"Value is an integer\").echo();\n} else if (value.type() == $STR) {\n    (\"Value is a string\").echo();\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#type-conversion", "title": "Type Conversion", "text": "<p>Grapa provides explicit type conversion methods:</p> <pre><code>/* String conversion */\nvalue = 42;\ntext = value.str();    /* Convert to string */\n\n/* Numeric conversion */\ntext = \"123\";\nnumber = text.int();   /* Convert to integer */\ndecimal = text.float(); /* Convert to float */\n\n/* Type checking before conversion */\nif (input.type() == $STR) {\n    result = input.int();\n} else {\n    result = input;    /* Already numeric */\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#function-calls", "title": "Function Calls", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#method-calls", "title": "Method Calls", "text": "<pre><code>/* File operations */\nfs.set(\"file.txt\", \"content\");\ncontent = fs.get(\"file.txt\").str();\n\n/* Table operations */\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.set(\"key\", \"value\", \"field\");\nvalue = table.get(\"key\", \"field\").str();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#function-definitions-with-default-parameters", "title": "Function Definitions with Default Parameters", "text": "<pre><code>/* Function with default parameters */\nf = op(\"x\"=1, \"y\"=0) { x + y; };\n\n/* Call with all parameters */\nresult1 = f(5, 3);  /* 8 */\n\n/* Call with default for y */\nresult2 = f(5);     /* 6 (y defaults to 0) */\n\n/* Call with defaults for both */\nresult3 = f();      /* 1 (x defaults to 1, y defaults to 0) */\n</code></pre> <ul> <li>Use <code>op(\"param\"=default_value)</code> for default parameters</li> <li>Parameters with defaults can be omitted when calling</li> <li>Parameters without defaults must be provided</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#system-functions", "title": "System Functions", "text": "<pre><code>/* Time functions */\ncurrent_time = $TIME().utc();\n\n/* File functions */\nfile_obj = $file();\ntable_obj = $file().table(\"ROW\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#comments", "title": "Comments", "text": "<p>Grapa only supports block comments (<code>/* ... */</code>). Line comments (<code>// ...</code>) are not supported.</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#comment-rules", "title": "Comment Rules", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#outside-code-blocks", "title": "Outside Code Blocks", "text": "<p>Comments can be placed at the end of lines when not inside <code>{}</code> blocks:</p> <pre><code>/* This is a block comment */\nx = 5;  /* This works outside {} blocks */\ny = 10; /* This also works */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#inside-code-blocks", "title": "Inside Code Blocks (<code>{}</code>)", "text": "<p>When inside <code>{}</code> blocks, comments must be on their own line:</p> <pre><code>/* \u2705 Correct: Comments on their own line */\nif (condition) {\n    /* This comment is correct */\n    x = 5;\n    /* Another correct comment */\n    y = 10;\n}\n\n/* \u274c Incorrect: Comments at end of lines in {} blocks */\nif (condition) {\n    x = 5;  /* This will cause a syntax error */\n    y = 10; /* This will also cause a syntax error */\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#class-and-function-definitions", "title": "Class and Function Definitions", "text": "<p>The same rule applies to class and function definitions:</p> <pre><code>/* \u2705 Correct */\nMyClass = class {\n    /* Method definition */\n    myMethod = op() {\n        /* Method body */\n        \"Hello\".echo();\n    };\n};\n\n/* \u274c Incorrect */\nMyClass = class {\n    myMethod = op() {\n        \"Hello\".echo();  /* This will cause a syntax error */\n    };\n};\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#control-structures", "title": "Control Structures", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#if-statements", "title": "If Statements", "text": "<pre><code>if (condition) {\n    (\"Condition is true\").echo();\n} else {\n    (\"Condition is false\").echo();\n}\n\n/* Example with comparison */\nif (age &gt;= 18) {\n    (\"User is an adult\").echo();\n} else {\n    (\"User is a minor\").echo();\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#comparison-operators", "title": "Comparison Operators", "text": "<pre><code>/* Equality */\nif (name == \"John\") { }\n\n/* Inequality */\nif (age != 0) { }\n\n/* Greater/Less than */\nif (salary &gt; 50000) { }\nif (age &lt; 18) { }\n\n/* Greater/Less than or equal */\nif (count &gt;= 10) { }\nif (value &lt;= 100) { }\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#switch-statements", "title": "Switch Statements", "text": "<p>Grapa provides switch statements for multiple condition checking:</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#type-switching", "title": "Type Switching", "text": "<pre><code>/* Switch based on type */\nswitch (value.type()) {\n    case $STR: \"String value\".echo();\n    case $INT: \"Integer value\".echo();\n    case $ARRAY: \"Array value\".echo();\n    case $LIST: \"List value\".echo();\n    default: \"Unknown type\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#value-switching", "title": "Value Switching", "text": "<pre><code>/* Switch based on value */\nswitch (status) {\n    case \"active\": \"User is active\".echo();\n    case \"inactive\": \"User is inactive\".echo();\n    case \"pending\": \"User is pending\".echo();\n    default: \"Unknown status\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#boolean-switching", "title": "Boolean Switching", "text": "<pre><code>/* Switch based on boolean conditions */\nswitch(true) {\n    case (score &gt;= 90): \"Grade: A\".echo();\n    case (score &gt;= 80): \"Grade: B\".echo();\n    case (score &gt;= 70): \"Grade: C\".echo();\n    case (score &gt;= 60): \"Grade: D\".echo();\n    default: \"Grade: F\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#switch-with-complex-conditions", "title": "Switch with Complex Conditions", "text": "<pre><code>/* Switch with complex expressions */\nswitch(true) {\n    case (age &lt; 18 &amp;&amp; income &lt; 30000): \"Young and low income\".echo();\n    case (age &gt;= 65): \"Senior citizen\".echo();\n    case (income &gt; 100000): \"High income\".echo();\n    default: \"Standard category\".echo();\n};\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#unsupported-syntax-operators", "title": "Unsupported Syntax Operators", "text": "<p>Grapa does not support several modern JavaScript/TypeScript operators. Use explicit alternatives:</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#logical-assignment-operators", "title": "Logical Assignment Operators", "text": "<pre><code>/* \u274c Not supported */\nx ||= y;    /* Logical OR assignment */\nx &amp;&amp;= y;    /* Logical AND assignment */\n\n/* \u2705 Use explicit assignment */\n/* For ||= */\nif (!x) { x = y; }\n/* For &amp;&amp;= */\nif (x) { x = y; }\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#nullish-coalescing", "title": "Nullish Coalescing", "text": "<pre><code>/* \u274c Not supported */\nx ?? y;     /* Nullish coalescing */\n\n/* \u2705 Use explicit null check */\nif (x == null) { x = y; }\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#optional-chaining", "title": "Optional Chaining", "text": "<pre><code>/* \u274c Not supported */\nobj?.prop?.sub;    /* Optional chaining */\n\n/* \u2705 Use explicit null checks */\nif (obj &amp;&amp; obj.prop) { obj.prop.sub; }\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#spread-operator", "title": "Spread Operator", "text": "<pre><code>/* \u274c Not supported */\n[...arr1, ...arr2];    /* Spread operator */\n\n/* \u2705 Use += operator for arrays */\narr1 += arr2;          /* Array concatenation */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#walrus-operator-python", "title": "Walrus Operator (Python)", "text": "<pre><code>/* \u274c Not supported in Python */\nif (x := f()) &gt; 0:     /* Walrus operator */\n\n/* \u2705 Use separate assignment */\nx = f();\nif (x &gt; 0) { ... }\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#error-handling", "title": "Error Handling", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#type-checking", "title": "Type Checking", "text": "<pre><code>/* Check if result is an error */\nif (result.type() == $ERR) {\n    (\"Operation failed\").echo();\n} else {\n    (\"Operation succeeded\").echo();\n}\n\n/* Check for specific error responses */\nif (result == {\"error\":-1}) {\n    (\"Operation returned error -1\").echo();\n}\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#error-fallback-with-iferr", "title": "Error Fallback with .iferr()", "text": "<p>Grapa provides a built-in error fallback mechanism using <code>.iferr()</code>:</p> <pre><code>/* Simple error fallback */\nresult = risky_operation().iferr(0);  /* Returns 0 if operation fails */\n\n/* Error fallback with default value */\nvalue = (10/0).iferr(55);  /* Returns 55 since division by zero fails */\n\n/* Array access with fallback */\nmonths = [\"Jan\", \"Feb\", \"Mar\"];\nvalue = months[\"FFF\"].iferr(-1);  /* Returns -1 for invalid key */\n</code></pre> <ul> <li>Use <code>.iferr(fallback_value)</code> for simple error handling</li> <li>Use <code>if (result.type() == $ERR)</code> for explicit error handling</li> <li><code>.iferr()</code> is preferred for simple fallback scenarios</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#complete-example", "title": "Complete Example", "text": "<pre><code>/* User Management System Example */\n\n/* Create table in global namespace */\n$global.users = $file().table(\"ROW\");\n\n/* Define table schema */\nusers.mkfield(\"name\", \"STR\", \"VAR\");\nusers.mkfield(\"age\", \"INT\");\nusers.mkfield(\"salary\", \"FLOAT\", \"FIX\", 8);\n\n/* Add user data */\nusers.set(\"user1\", \"John Doe\", \"name\");\nusers.set(\"user1\", 30, \"age\");\nusers.set(\"user1\", 75000.50, \"salary\");\n\n/* Retrieve and display user data */\nname = users.get(\"user1\", \"name\").str();\nage = users.get(\"user1\", \"age\").int();\nsalary = users.get(\"user1\", \"salary\").float();\n\n(\"User: \" + name + \", Age: \" + age.str() + \", Salary: \" + salary.str()).echo();\n\n/* Process multiple users */\ni = 1;\nwhile (i &lt;= 5) {\n    user_id = \"user\" + i.str();\n    users.set(user_id, (\"User \" + i.str()), \"name\");\n    users.set(user_id, (20 + i), \"age\");\n    i = i + 1;\n}\n\n(\"Created \" + i.str() + \" users\").echo();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#common-patterns", "title": "Common Patterns", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#file-operations", "title": "File Operations", "text": "<pre><code>/* File system operations */\n$global.fs = $file();\n\n/* Create and write file */\nfs.set(\"test.txt\", \"Hello World\");\ncontent = fs.get(\"test.txt\").str();\n(\"File content: \" + content).echo();\n\n/* Directory operations */\nfs.mk(\"test_dir\");\nfs.cd(\"test_dir\");\nfiles = fs.ls();\nfs.cd(\"..\");\nfs.rm(\"test_dir\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#table-operations", "title": "Table Operations", "text": "<pre><code>/* Table operations */\n$global.table = $file().table(\"ROW\");\n\n/* Create fields */\ntable.mkfield(\"name\", \"STR\", \"VAR\");\ntable.mkfield(\"age\", \"INT\");\ntable.mkfield(\"value\", \"FLOAT\", \"FIX\", 8);\n\n/* Add data */\ntable.set(\"key1\", \"John\", \"name\");\ntable.set(\"key1\", 30, \"age\");\ntable.set(\"key1\", 100.5, \"value\");\n\n/* Retrieve data */\nname = table.get(\"key1\", \"name\").str();\nage = table.get(\"key1\", \"age\").int();\nvalue = table.get(\"key1\", \"value\").float();\n</code></pre> <p>This guide covers the essential syntax patterns for writing correct Grapa code. Follow these patterns to avoid common syntax errors and write maintainable code. </p> <p>/*</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#grapa-basic-syntax-key-rules", "title": "Grapa Basic Syntax: Key Rules", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#statement-and-block-termination", "title": "Statement and Block Termination", "text": "<ul> <li>Every statement must end with a semicolon (<code>;</code>), including after the closing brace of every block (such as <code>if</code>, <code>else</code>, <code>while</code>, and function blocks).</li> <li>Example:   while (cond) {       ...   };   if (cond) {       ...   } else {       ...   };</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-manipulation", "title": "Array Manipulation", "text": "<ul> <li>To append to an array, use the <code>+=</code> operator.</li> <li>Example:     arr = [];     arr += \"foo\";     arr += \"bar\";     / arr is now [\"foo\", \"bar\"] /</li> <li>Do not use <code>.push()</code> or <code>.append()</code>\u2014these are not valid in Grapa.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#array-iteration-and-sorting", "title": "Array Iteration and Sorting", "text": "<ul> <li>The <code>.sort()</code> function is especially useful in tests to ensure deterministic output when order is not guaranteed.</li> <li>Example:   result = input.grep(pattern, options);   result = result.sort();   (result.join(\"\\n\")).echo(); */ </li> </ul> <p>/*</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#grapa-syntax-quick-reference", "title": "Grapa Syntax Quick Reference", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#essential-syntax-rules-summary-table", "title": "Essential Syntax Rules (Summary Table)", "text": "Rule Example Every statement ends with a semicolon (<code>;</code>) <code>x = 5;</code> Every block (after <code>}</code>) ends with a semicolon <code>if (x) { ... };</code> Use block comments only <code>/* comment */</code> Do not use line comments (<code>// ...</code>) Within <code>{}</code> blocks, comments must be on their own line <code>{ /* comment */ x = 5; }</code> Do not put comments at the end of lines in <code>{}</code> blocks <code>{ x = 5; /* wrong */ }</code> Append to arrays with <code>+=</code> <code>arr += \"foo\";</code> No <code>.push()</code> or <code>.append()</code> Access arrays/lists with <code>[index]</code> <code>arr[0];</code> Access object properties with <code>.get(\"key\")</code> <code>obj.get(\"foo\");</code> Use <code>.echo()</code> for output <code>\"Hello\".echo();</code> Use <code>while</code> loops, not <code>for</code> <code>while (cond) { ... };</code> Wrap string concatenations in parentheses <code>(str1 + str2).echo();</code> Increment or append with += <code>v += 1;</code>, <code>s += \"x\";</code> Both = x + y and += y are valid <code>v = v + 1;</code>, <code>v += 1;</code> No logical assignment (<code>||=</code>, <code>&amp;&amp;=</code>) Use explicit <code>if</code> statements No nullish coalescing (<code>??</code>) Use explicit null checks No optional chaining (<code>?.</code>) Use explicit null checks No spread operator (<code>...</code>) Use <code>+=</code> for arrays <p>*/ </p> <p>/*</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#lexical-operators-special-parsing-triggers", "title": "Lexical Operators (Special Parsing Triggers)", "text": "<p>There are several predefined lexical operators, most of which define how $ID, $INT, $FLOAT, $STR, etc, are processed and generate the corresponding tokens. There are also a few other lexical operators that will trigger special handling of the input stream. The following are two examples. Currently there is no way to define/change the lexical operators - this will come in some future version of Grapa.</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#_1", "title": "<code>$&amp;</code>", "text": "<ul> <li>Wrap the XML data in $&amp; on either side to have Grapa parse the input as XML. These characters are special lexical triggers that modify the parsing engine token generation. The first instance turns the mode on and the second turns the mode off. Or use the encode(\"XML\") function, which does the same thing.</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#_2", "title": "<code>$[</code>", "text": "<ul> <li>Wrap input in these characters to have the entire code block parsed in a single instance. Otherwise a '\\n' or '\\r' will be used to trigger parsing/execution and an error would result if the line is not valid on its own. Alternatively, put the code in a file, load the file contents, and execute the contents of the string. */ </li> </ul> <p>/*</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#default-grammar-rules", "title": "Default Grammar Rules", "text": "<p>View a text version of the grammar rules loaded into Grapa on startup here: Grapa Grammar</p> <p>The system will first check for a match on the \"start\" rule, which is a global variable. If that global variable is of type $RULE, then it will become the first rule for scripts. This is an easy way to provide an override on command processing. If the \"start\" rule does not provide a match, then the system will evaluate using the \"$start\" rule.</p> <p>The default rules may be subject to change.</p> <p>If you modify the file, you can try it out by placing it in \"lib/grapa/\" under the same directory that the above command would have written the file to, and then restart Grapa. If Grapa finds this file with this name in that location, it will use that file instead of the default.</p> <p>If you are familiar with YACC or BNF, following the grammar logic should be rather straightforward. Each rule is evaluated until a successful match, and all matches produce an execution plan where the code associated with each rule match is included in the execution plan. To optimize grammar resolution, rules are carefully constructed to avoid re-evaluating rules more than necessary by placing the most complex rules first and following with common rule patterns. It is also important to avoid infinite recursive situations\u2014mostly this is avoided by not referencing the same rule as the first token to evaluate.</p> <p>There are a few standard tokens that are defined\u2014mostly the tokens provide special handling for either the lexical engine or the rules engine. One example is the space character, which when found sets a bit in the token to skip the value for rules evaluation. This can be changed\u2014but then would require including the space token in the rules. */ </p> <p>/*</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#function-chaining", "title": "Function Chaining", "text": "<p>Any object that returns an object can be chained.</p> <p>Important: For function chaining to work, the functions must be class methods. Functions defined outside of classes cannot be chained using the dot notation.</p> <p>For example, \"4.4\".float(300,4).pi() will convert the string 4.4 to a float with 300 bit precision and will return pi() to the power of the input, at the precision specified in the input. So, a 400 bit precision of pi to the power of 4.4.</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#creating-chainable-functions", "title": "Creating Chainable Functions", "text": "<p>To make your own functions chainable, define them as class methods:</p> <pre><code>/* Define a class with chainable methods */\nStringProcessor = class {\n    process = op(text) {\n        text.trim().upper();  // Returns processed string\n    };\n\n    reverse = op(text) {\n        text.reverse();  // Returns reversed string\n    };\n\n    addPrefix = op(text, prefix) {\n        prefix + \" \" + text;  // Returns string with prefix\n    };\n};\n\n/* Create an instance and use chaining */\nprocessor = obj StringProcessor;\nresult = processor.process(\"  hello world  \").reverse().addPrefix(\"Result:\");\nresult.echo();  // Output: Result: DLROW OLLEH\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#using-built-in-chainable-methods", "title": "Using Built-in Chainable Methods", "text": "<p>Many built-in types have chainable methods:</p> <pre><code>/* String chaining */\nresult = \"  hello world  \".trim().upper().replace(\"WORLD\", \"GRAPA\");\nresult.echo();  // Output: HELLO GRAPA\n\n/* Array chaining */\nresult = [1, 2, 3, 4, 5].filter(op(x) { x % 2 == 0; }).map(op(x) { x * 2; });\nresult.echo();  // Output: [4, 8]\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#workaround-for-non-chainable-functions", "title": "Workaround for Non-Chainable Functions", "text": "<p>If an existing function/command doesn't support chaining, an OP can be inserted in the chain to make it work using the $$ variable for the result of the prior operation. For example, the following will get the length of a list, generate that many bits, and output the result in binary form. The 3 examples all accomplish the same result. <pre><code>&gt; {1,2,3,5}.{(@$$).len()}.genbits().bin();\n1111\n\n&gt; {1,2,3,5}.{(op(a){a.len()})(@$$)}.genbits().bin();\n1111\n\n&gt; f = op(a){a.len()};\n&gt; {1,2,3,5}.{f(@$$)}.genbits().bin();\n1111\n</code></pre></p> <p>Note: The <code>$$</code> variable represents the result of the previous operation in the chain. */ </p> <p>/*</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#dynamic-code-execution-grapas-core-meta-programming-capability", "title": "Dynamic Code Execution (Grapa's Core Meta-Programming Capability)", "text": "<p>Grapa's most powerful feature is its ability to compile and execute code at runtime. Unlike most languages, Grapa provides superior dynamic code execution capabilities through execution trees that are both human-readable and directly executable.</p>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#using-syseval-for-immediate-evaluation", "title": "Using <code>$sys().eval()</code> for Immediate Evaluation", "text": "<ul> <li>Evaluates a string as Grapa code immediately</li> <li>Optionally accepts a parameter map for dynamic execution</li> <li>Perfect for one-off evaluations and user input processing</li> </ul> <pre><code>/* Simple evaluation */\nresult = $sys().eval(\"5*3\"); // result: 15\n\n/* Evaluation with parameters */\nresult = $sys().eval(\"x + y\", {\"x\": 2, \"y\": 4}); // result: 6\n\n/* Complex expressions */\nresult = $sys().eval(\"(a + b) * c\", {\"a\": 2, \"b\": 3, \"c\": 4}); // result: 20\n\n/* User input processing */\nuser_input = \"2 * (3 + 4)\";\nresult = $sys().eval(user_input); // result: 14\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#using-op-for-compiled-operations", "title": "Using <code>op()</code> for Compiled Operations", "text": "<ul> <li><code>op()(&lt;string&gt;)</code> parses the string into a $OP object (compiled execution tree)</li> <li>Creates reusable, optimized functions that can be executed multiple times</li> <li>Supports both positional and named parameters</li> <li>Enables advanced meta-programming patterns</li> </ul> <pre><code>/* Basic compilation */\nop_obj = op()(\"a + b\");\nresult = op_obj({\"a\": 10, \"b\": 20}); // result: 30\n\n/* One-line execution */\nresult = op()(\"5*3\")(); // result: 15\n\n/* With parameters */\nfunc = op(\"name\"=0)(\"'Hello, ' + name + '!'.echo();\");\nfunc(\"Grapa\"); // Output: Hello, Grapa!\n\n/* Dynamic function generation */\noperations = [\"add\", \"sub\", \"mul\"];\nfuncs = {};\ni = 0;\nwhile (i &lt; operations.len()) {\n    op_name = operations.get(i);\n    code = \"a \" + op_name + \" b\";\n    funcs[op_name] = op(\"a\"=0, \"b\"=0)(code);\n    i += 1;\n}\n\n/* Execute generated functions */\nfuncs[\"add\"](5, 3).echo();  // 8\nfuncs[\"mul\"](5, 3).echo();  // 15\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#using-syscompile-for-performance", "title": "Using <code>$sys().compile()</code> for Performance", "text": "<ul> <li>Pre-compiles scripts for maximum performance</li> <li>Creates $OP objects that can be executed with <code>$sys().eval()</code></li> <li>Ideal for frequently executed code</li> </ul> <pre><code>/* Compile once, execute many times */\ncompiled = $sys().compile(\"input * 2 + offset\");\n\n/* Execute with different parameters */\nresult1 = $sys().eval(compiled, {\"input\": 10, \"offset\": 5}); // 25\nresult2 = $sys().eval(compiled, {\"input\": 20, \"offset\": 10}); // 50\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#advanced-meta-programming-patterns", "title": "Advanced Meta-Programming Patterns", "text": "", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#template-based-code-generation", "title": "Template-Based Code Generation", "text": "<pre><code>/* Create reusable templates */\ntemplate = \"result = base * multiplier + offset; result\";\nprocess = op(\"base\"=0, \"multiplier\"=1, \"offset\"=0)(template);\nprocess(10, 2, 5).echo(); // 25\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#configuration-driven-functions", "title": "Configuration-Driven Functions", "text": "<pre><code>/* Generate functions from configuration */\nconfig = {\"operation\": \"add\", \"default\": 0};\ncode = \"a \" + config.operation + \" b\";\nfunc = op(\"a\"=config.default, \"b\"=config.default)(code);\nfunc(5, 3).echo(); // 8\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#when-to-use-each-method", "title": "When to Use Each Method", "text": "<ul> <li><code>$sys().eval()</code>: One-off evaluation, user input processing, simple expressions</li> <li><code>op()</code>: Reusable functions, meta-programming, dynamic code generation</li> <li><code>$sys().compile()</code>: Performance-critical code, frequently executed operations</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "syntax/basic_syntax/#why-grapas-dynamic-execution-is-superior", "title": "Why Grapa's Dynamic Execution is Superior", "text": "<ol> <li>Human-readable execution trees: Unlike bytecode, $OP objects can be examined and understood</li> <li>Direct manipulation: Execution trees can be created, modified, and executed directly</li> <li>Compile-time optimization: Constant folding and expression simplification</li> <li>Parameter binding: Both positional and named parameters with default values</li> <li>Type safety: Execution trees maintain type information</li> <li>Performance: Compiled execution trees are highly optimized</li> </ol> <p>See also: Advanced Scripting, $OP Type, System Functions */ </p>", "tags": ["user", "highlevel"]}, {"location": "syntax/grammar_design/", "title": "Grammar Design Guide", "text": ""}, {"location": "syntax/grammar_design/#overview", "title": "Overview", "text": "<p>Grapa was originally designed as a language for creating languages. The current Grapa syntax you're familiar with was actually just an example that evolved into something powerful! This guide shows you how to use Grapa's original purpose - creating your own grammars and languages.</p> <p>Note: This guide uses Grapa syntax for action codes (e.g., <code>{$1 + $3}</code>) which can contain any valid Grapa code. The action codes are processed through Grapa's full compilation and execution pipeline.</p>"}, {"location": "syntax/grammar_design/#parameter-persistence-best-practice", "title": "Parameter Persistence Best Practice", "text": "<p>Important: The <code>$1</code>, <code>$2</code>, <code>$3</code> parameters get reset as the code runs. For complex action codes, assign them to local variables first:</p> <pre><code>@global[\"$complex_rule\"]\n    = rule &lt;$value1&gt; '+' &lt;$value2&gt; {\n        @local.p1 = $1;  // Save $1 before it gets reset\n        @local.p2 = $3;  // Save $3 before it gets reset\n\n        // Now use the saved values for complex operations\n        if (p1.type() == $STR &amp;&amp; p2.type() == $STR) {\n            p1 + p2  // String concatenation\n        } else {\n            p1.int() + p2.int()  // Numeric addition\n        }\n    }\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#key-concepts", "title": "Key Concepts", "text": ""}, {"location": "syntax/grammar_design/#1-left-recursion-is-your-friend", "title": "1. Left Recursion is Your Friend", "text": "<p>Traditional parsers can't handle left recursion, but Grapa automatically detects and handles it using a sophisticated two-phase approach:</p> <pre><code>// \u2705 GOOD: Natural left-associative expressions\n@global[\"$additive\"]\n    = rule &lt;$additive&gt; '+' &lt;$multiplicative&gt; {$1 + $3}\n    | &lt;$additive&gt; '-' &lt;$multiplicative&gt; {$1 - $3}\n    | &lt;$multiplicative&gt;\n    ;\n</code></pre> <p>This enables natural mathematical expressions like <code>a + b + c</code> without complex precedence tables.</p>"}, {"location": "syntax/grammar_design/#2-operator-precedence-through-grammar-structure", "title": "2. Operator Precedence Through Grammar Structure", "text": "<p>Precedence emerges from grammar hierarchy - it's not hardcoded:</p> <pre><code>// \u2705 CORRECT: Precedence through grammar levels\n@global[\"$expr_or\"]      // Lowest precedence\n    = rule &lt;$expr_or&gt; '||' &lt;$expr_and&gt; {$1 || $3}\n    | &lt;$expr_and&gt;\n    ;\n\n@global[\"$expr_and\"]     // Higher precedence\n    = rule &lt;$expr_and&gt; '&amp;&amp;' &lt;$expr_equality&gt; {$1 &amp;&amp; $3}\n    | &lt;$expr_equality&gt;\n    ;\n\n@global[\"$expr_equality\"] // Even higher precedence\n    = rule &lt;$expr_equality&gt; '==' &lt;$expr_comparison&gt; {$1 == $3}\n    | &lt;$expr_equality&gt; '!=' &lt;$expr_comparison&gt; {$1 != $3}\n    | &lt;$expr_comparison&gt;\n    ;\n</code></pre> <p>Precedence Rules: - Higher precedence = Lower in grammar hierarchy - Left-associative = Left-recursive rules - Right-associative = Right-recursive rules (rare)</p>"}, {"location": "syntax/grammar_design/#3-action-codes-build-execution-trees", "title": "3. Action Codes Build Execution Trees", "text": "<p>When a rule matches, Grapa creates execution tree nodes:</p> <pre><code>// Action code format: {grapa_expression}\n@global[\"$addition\"]\n    = rule &lt;$term&gt; '+' &lt;$addition&gt; {$1 + $3}\n    | &lt;$term&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#parameter-access-with-1-2-3-etc", "title": "Parameter Access with <code>$1</code>, <code>$2</code>, <code>$3</code>, etc.", "text": "<p>Action codes can access matched parameters using <code>$</code> followed by a number:</p> <pre><code>@global[\"$example_rule\"]\n    = rule &lt;$term&gt; '+' &lt;$expression&gt; {$1 + $3}\n    | &lt;$term&gt;\n    ;\n</code></pre> <p>Parameter Mapping: - <code>$1</code> = First parameter (<code>&lt;$term&gt;</code>)  - <code>$2</code> = Second parameter (<code>'+'</code>)  - <code>$3</code> = Third parameter (<code>&lt;$expression&gt;</code>)</p> <p>Important Notes: - Indexing starts at <code>$1</code> (not <code>$0</code>) - <code>$0</code> does not exist in Grapa's parameter system - Parameters are 0-based internally but 1-based in action codes - Any valid Grapa code can be used in action codes</p> <p>How It Works: 1. During rule matching, tokens are collected into a parameter queue 2. When action codes execute, <code>$1</code>, <code>$2</code>, <code>$3</code> map to <code>pInput-&gt;Head(0)</code>, <code>pInput-&gt;Head(1)</code>, <code>pInput-&gt;Head(2)</code> 3. Parameters are wrapped in <code>GrapaLibraryParam</code> for safe access and evaluation</p> <p>Action Code Best Practices: <pre><code>// \u2705 GOOD: Clear operation names\n@global[\"$string_concat\"]\n    = rule &lt;$string&gt; '+' &lt;$string_concat&gt; {$1 + $3}\n    | &lt;$string&gt;\n    ;\n\n// \u2705 GOOD: Multiple parameters\n@global[\"$function_call\"]\n    = rule &lt;$identifier&gt; '(' &lt;$argument_list&gt; ')' {$1($3)}\n    | &lt;$identifier&gt; '(' ')' {$1()}\n    ;\n\n// \u2705 GOOD: Conditional operations\n@global[\"$conditional\"]\n    = rule &lt;$condition&gt; '?' &lt;$true_expr&gt; ':' &lt;$false_expr&gt; {$1 ? $3 : $5}\n    | &lt;$condition&gt;\n    ;\n\n// \u2705 GOOD: Complex parameter access\n@global[\"$complex_operation\"]\n    = rule &lt;$value1&gt; '+' &lt;$value2&gt; {\n        if ($1.type() == $STR &amp;&amp; $3.type() == $STR) {\n            $1 + $3  // String concatenation\n        } else {\n            $1.int() + $3.int()  // Numeric addition\n        }\n    }\n    | &lt;$value1&gt;\n    ;\n</code></pre></p>"}, {"location": "syntax/grammar_design/#4-parameter-types-and-advanced-usage", "title": "4. Parameter Types and Advanced Usage", "text": ""}, {"location": "syntax/grammar_design/#parameter-types", "title": "Parameter Types", "text": "<p>Parameters in action codes can be various types:</p> <pre><code>// Different parameter types\n@global[\"$mixed_parameters\"]\n    = rule &lt;$identifier&gt; '=' &lt;$expression&gt; ';' {\n        // $1 = identifier (string)\n        // $2 = '=' (literal)\n        // $3 = expression (could be any type)\n        // $4 = ';' (literal)\n        $1 + \" = \" + $3.str()\n    }\n    ;\n</code></pre> <p>Parameter Type Handling: <pre><code>// \u2705 GOOD: Type-aware parameter processing\n@global[\"$smart_concat\"]\n    = rule &lt;$value1&gt; '+' &lt;$value2&gt; {\n        if ($1.type() == $STR) {\n            $1 + $3.str()  // String concatenation\n        } else if ($1.type() == $INT) {\n            $1.int() + $3.int()  // Numeric addition\n        } else {\n            $1.str() + $3.str()  // Convert to strings\n        }\n    }\n    | &lt;$value1&gt;\n    ;\n</code></pre></p>"}, {"location": "syntax/grammar_design/#advanced-parameter-access", "title": "Advanced Parameter Access", "text": "<p>Skipping Parameters: <pre><code>// \u2705 GOOD: Skip literal tokens, focus on meaningful parameters\n@global[\"$function_call\"]\n    = rule &lt;$identifier&gt; '(' &lt;$arguments&gt; ')' {$1($3)}\n    | &lt;$identifier&gt; '(' ')' {$1()}\n    ;\n// $1 = function name, $3 = arguments (skipping '(' and ')')\n</code></pre></p> <p>Conditional Parameter Access: <pre><code>// \u2705 GOOD: Handle optional parameters\n@global[\"$optional_param\"]\n    = rule &lt;$required&gt; ',' &lt;$optional&gt; {$1 + $3}\n    | &lt;$required&gt; {$1}\n    ;\n</code></pre></p>"}, {"location": "syntax/grammar_design/#5-token-types-and-matching", "title": "5. Token Types and Matching", "text": "<p>Grapa uses a sophisticated token type system:</p> <pre><code>// Built-in token types\n@global[\"$identifier\"]\n    = rule &lt;$litname&gt;  // Matches literal names\n\n@global[\"$number\"]\n    = rule &lt;$lit&gt;      // Matches literals (INT, FLOAT, STR)\n\n@global[\"$operator\"]\n    = rule '+' | '-' | '*' | '/'  // Direct character matching\n</code></pre> <p>Custom Token Types: <pre><code>// \u2705 GOOD: Define custom tokens for clarity\n@global[\"$custom_operator\"]\n    = rule '++' | '--' | '**' | '*/'  // Multi-character operators\n\n@global[\"$keyword\"]\n    = rule 'if' | 'while' | 'for' | 'return'  // Reserved words\n</code></pre></p>"}, {"location": "syntax/grammar_design/#6-error-handling-and-recovery", "title": "6. Error Handling and Recovery", "text": "<p>Grapa's parser is designed for graceful error recovery:</p> <pre><code>// \u2705 GOOD: Provide fallback alternatives\n@global[\"$statement\"]\n    = rule &lt;$if_statement&gt;\n    | &lt;$while_statement&gt;\n    | &lt;$assignment&gt;\n    | &lt;$expression&gt; ';'  // Expression as statement\n    | ';'  // Empty statement\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#common-problems-and-solutions", "title": "Common Problems and Solutions", "text": ""}, {"location": "syntax/grammar_design/#problem-1-parameter-access-issues", "title": "Problem 1: Parameter Access Issues", "text": "<pre><code>// \u274c BAD: Using $0 (doesn't exist)\n@global[\"$bad_rule\"]\n    = rule &lt;$term&gt; '+' &lt;$term&gt; {$0 + $2}  // $0 is invalid!\n\n// \u2705 GOOD: Start with $1\n@global[\"$good_rule\"]\n    = rule &lt;$term&gt; '+' &lt;$term&gt; {$1 + $3}  // $1 and $3 are valid\n    ;\n</code></pre> <p>Parameter Troubleshooting: - <code>$0</code> doesn't exist - indexing starts at <code>$1</code> - Parameter count mismatch - ensure you have enough parameters - Type errors - use <code>.str()</code>, <code>.int()</code>, <code>.type()</code> for type conversion</p>"}, {"location": "syntax/grammar_design/#problem-2-infinite-recursion", "title": "Problem 2: Infinite Recursion", "text": "<pre><code>// \u274c BAD: Direct left recursion without base case\n@global[\"$bad_rule\"]\n    = rule &lt;$bad_rule&gt; '+' &lt;$term&gt; {$1 + $3}\n    ;\n\n// \u2705 GOOD: Include base case\n@global[\"$good_rule\"]\n    = rule &lt;$good_rule&gt; '+' &lt;$term&gt; {$1 + $3}\n    | &lt;$term&gt;  // Base case\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#problem-2-ambiguous-grammar", "title": "Problem 2: Ambiguous Grammar", "text": "<pre><code>// \u274c BAD: Ambiguous - both rules can match same input\n@global[\"$ambiguous\"]\n    = rule &lt;$expr&gt; '+' &lt;$expr&gt; {$1 + $3}\n    | &lt;$expr&gt; '*' &lt;$expr&gt; {$1 * $3}\n    ;\n\n// \u2705 GOOD: Clear precedence hierarchy\n@global[\"$unambiguous\"]\n    = rule &lt;$additive&gt; '+' &lt;$multiplicative&gt; {$1 + $3}\n    | &lt;$multiplicative&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#problem-3-missing-error-recovery", "title": "Problem 3: Missing Error Recovery", "text": "<pre><code>// \u274c BAD: No error recovery\n@global[\"$fragile\"]\n    = rule &lt;$perfect_match&gt;  // Fails on any error\n\n// \u2705 GOOD: Graceful error handling\n@global[\"$robust\"]\n    = rule &lt;$perfect_match&gt;\n    | &lt;$error_recovery&gt;  // Handle errors gracefully\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#performance-considerations", "title": "Performance Considerations", "text": ""}, {"location": "syntax/grammar_design/#grammar-optimization", "title": "Grammar Optimization", "text": "<pre><code>// \u2705 GOOD: Minimize backtracking\n@global[\"$efficient_parsing\"]\n    = rule &lt;$unique_prefix&gt; &lt;$rest&gt;  // Unique first token\n    | &lt;$another_unique&gt; &lt;$rest2&gt;\n    ;\n\n// \u274c AVOID: Ambiguous prefixes\n@global[\"$inefficient_parsing\"]\n    = rule &lt;$ambiguous&gt; &lt;$rest&gt;  // Multiple rules start same way\n    | &lt;$ambiguous&gt; &lt;$rest2&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#testing-your-grammar", "title": "Testing Your Grammar", "text": ""}, {"location": "syntax/grammar_design/#test-cases-to-include", "title": "Test Cases to Include", "text": "<pre><code>// Test precedence\n\"a + b * c\"  // Should be: a + (b * c)\n\n// Test associativity\n\"a - b - c\"  // Should be: (a - b) - c\n\n// Test error recovery\n\"a + ; b\"    // Should recover and parse \"b\"\n\n// Test edge cases\n\"\"           // Empty input\n\"a\"          // Single token\n\"a + b + c\"  // Multiple operations\n</code></pre>"}, {"location": "syntax/grammar_design/#validation-checklist", "title": "Validation Checklist", "text": "<ul> <li>[ ] Precedence works correctly</li> <li>[ ] Associativity is as expected</li> <li>[ ] Error recovery handles bad input</li> <li>[ ] Performance is acceptable</li> <li>[ ] Edge cases are handled</li> </ul>"}, {"location": "syntax/grammar_design/#practical-example-calculator-grammar", "title": "Practical Example: Calculator Grammar", "text": "<p>Here's a complete example of a simple calculator grammar:</p> <pre><code>// calculator.grc\n@global[\"$expression\"]\n    = rule &lt;$expression&gt; '+' &lt;$term&gt; {$1 + $3}\n    | &lt;$expression&gt; '-' &lt;$term&gt; {$1 - $3}\n    | &lt;$term&gt;\n    ;\n\n@global[\"$term\"]\n    = rule &lt;$term&gt; '*' &lt;$factor&gt; {$1 * $3}\n    | &lt;$term&gt; '/' &lt;$factor&gt; {$1 / $3}\n    | &lt;$factor&gt;\n    ;\n\n@global[\"$factor\"]\n    = rule '(' &lt;$expression&gt; ')' {$2}\n    | &lt;$number&gt;\n    ;\n\n@global[\"$number\"]\n    = rule &lt;$lit&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#integration-with-grapa-system", "title": "Integration with Grapa System", "text": ""}, {"location": "syntax/grammar_design/#loading-your-grammar", "title": "Loading Your Grammar", "text": "<pre><code>// Load grammar file\ninclude \"my_grammar.grc\"\n\n// Use your rules\nresult = parse_my_language(\"input text\")\n</code></pre>"}, {"location": "syntax/grammar_design/#extending-existing-grammar", "title": "Extending Existing Grammar", "text": "<pre><code>// Extend existing rules\n@global[\"$extended_expression\"]\n    = rule &lt;$existing_expression&gt;\n    | &lt;$my_new_operator&gt; &lt;$extended_expression&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#advanced-features", "title": "Advanced Features", "text": ""}, {"location": "syntax/grammar_design/#complex-action-codes", "title": "Complex Action Codes", "text": "<p>Since action codes can contain any valid Grapa code, you can do complex operations:</p> <pre><code>@global[\"$complex_operation\"]\n    = rule &lt;$value&gt; '+' &lt;$value&gt; {\n        // Complex Grapa code here\n        if ($1.type() == $STR &amp;&amp; $3.type() == $STR) {\n            $1 + $3  // String concatenation\n        } else {\n            $1.int() + $3.int()  // Numeric addition\n        }\n    }\n    | &lt;$value&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#conditional-parsing", "title": "Conditional Parsing", "text": "<pre><code>@global[\"$conditional_parse\"]\n    = rule &lt;$condition&gt; '?' &lt;$true_expr&gt; ':' &lt;$false_expr&gt; {\n        $1 ? $3 : $5\n    }\n    | &lt;$condition&gt;\n    ;\n</code></pre>"}, {"location": "syntax/grammar_design/#conclusion", "title": "Conclusion", "text": "<p>Key takeaways for grammar authors:</p> <ol> <li>Left recursion is powerful - use it for natural expression parsing</li> <li>Precedence emerges from structure - design your grammar hierarchy carefully</li> <li>Action codes can contain any Grapa code - they're processed through the full pipeline</li> <li>Error recovery is essential - make your grammar robust</li> <li>Test thoroughly - precedence and associativity are critical</li> <li>Performance matters - avoid ambiguous or inefficient patterns</li> </ol> <p>The Grapa grammar system is surprisingly powerful and flexible, but understanding these principles will help you create effective, maintainable grammars.</p>"}, {"location": "syntax/grammar_design/#next-steps", "title": "Next Steps", "text": "<ul> <li>Try the calculator example above</li> <li>Experiment with your own grammars</li> <li>Check the API Reference for available functions</li> <li>Look at Examples for more complex patterns</li> <li>Join the community to share your grammar designs</li> </ul> <p>Grapa: A language for creating languages, evolved into something much more. </p>"}, {"location": "syntax/operator/", "title": "Operators", "text": "<p>See also: Operator Precedence Table</p>"}, {"location": "syntax/operator/#overview", "title": "Overview", "text": "<p>Grapa provides 26 operators across 6 categories, designed with a philosophy that programmers shouldn't have to care about type casting. Operators work intelligently with relevant data types, though some intentionally maintain mathematical purity by not converting types.</p>"}, {"location": "syntax/operator/#operator-categories", "title": "Operator Categories", "text": ""}, {"location": "syntax/operator/#1-arithmetic-operators", "title": "1. Arithmetic Operators", "text": "<p>Addition, subtraction, multiplication, division, modulo, exponentiation, and root operations with smart type promotion.</p>"}, {"location": "syntax/operator/#2-comparison-operators", "title": "2. Comparison Operators", "text": "<p>Equality, inequality, and relational operators with type-aware comparison behavior.</p>"}, {"location": "syntax/operator/#3-logical-operators", "title": "3. Logical Operators", "text": "<p>Boolean logic operations with sophisticated truthiness conversion.</p>"}, {"location": "syntax/operator/#4-bitwise-operators", "title": "4. Bitwise Operators", "text": "<p>Bit-level operations with strict type requirements and advanced matrix support.</p>"}, {"location": "syntax/operator/#5-assignment-operators", "title": "5. Assignment Operators", "text": "<p>Variable assignment and compound assignment operations.</p>"}, {"location": "syntax/operator/#6-special-operators", "title": "6. Special Operators", "text": "<p>Extend, remove, dot operations, and ternary conditional expressions.</p>"}, {"location": "syntax/operator/#type-support-matrix", "title": "Type Support Matrix", "text": "Operator INT FLOAT STR BOOL ARRAY LIST OBJ ERR Notes <code>+</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u274c \u2705 Smart type promotion <code>-</code> \u2705 \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c String difference calculation <code>+=</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Append assignment <code>-=</code> \u2705 \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c Remove by index/key <code>*</code> \u2705 \u2705 \u2705 \u274c \u2705 \u274c \u274c \u274c Matrix multiplication support <code>/</code> \u2705 \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c Smart type promotion <code>%</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c \u274c Modulo with modpow/modinv <code>**</code> \u2705 \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c Exponentiation <code>*/</code> \u2705 \u2705 \u274c \u274c \u2705 \u274c \u274c \u274c Root operator (nth root) <code>==</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Object ID for complex types <code>!=</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Object ID for complex types <code>&lt;</code> \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c No type conversion <code>&lt;=</code> \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c No type conversion <code>&gt;</code> \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c STR &gt; INT bug <code>&gt;=</code> \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c STR &gt;= INT bug <code>&lt;=&gt;</code> \u2705 \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c STR &lt;=&gt; INT bug <code>&amp;&amp;</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Perfect implementation <code>\\|\\|</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Perfect implementation <code>!</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 FLOAT bugs <code>&amp;</code> \u2705 \u274c \u274c \u274c \u274c \u274c \u274c \u274c Strict INT/RAW only <code>\\|</code> \u2705 \u274c \u274c \u274c \u274c \u274c \u274c \u274c Strict INT/RAW only <code>^</code> \u2705 \u274c \u274c \u274c \u274c \u274c \u274c \u274c Strict INT/RAW only <code>~</code> \u2705 \u274c \u274c \u274c \u2705 \u274c \u274c \u274c Matrix inversion support <code>&lt;&lt;</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c \u274c FLOAT support <code>&gt;&gt;</code> \u2705 \u2705 \u274c \u274c \u274c \u274c \u274c \u274c FLOAT support <code>=</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Perfect assignment <code>? :</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Implementation quirks"}, {"location": "syntax/operator/#arithmetic-operators", "title": "Arithmetic Operators", "text": ""}, {"location": "syntax/operator/#addition", "title": "Addition (<code>+</code>)", "text": "<p>Performs addition with smart type promotion and string concatenation.</p> <pre><code>/* Numeric addition */\n5 + 3;                    /* 8 (INT) */\n5 + 3.14;                 /* 8.14... (FLOAT) */\n3.14 + 5;                 /* 8.14... (FLOAT) */\n\n/* String concatenation */\n\"hello\" + \"world\";        /* \"helloworld\" */\n\"hello\" + 5;              /* \"hello5\" */\n5 + \"world\";              /* 5 (asymmetric - should be \"5world\") */\n\n/* Boolean addition */\ntrue + 5;                 /* 5 (boolean converted to number) */\nfalse + 3.14;             /* 3.14... (boolean converted to number) */\n\n/* Array operations */\n[1,2,3] + [4,5,6];       /* [] (empty array - should concatenate) */\n[1,2,3] + 4;              /* [] (empty array - should append) */\n\n/* Error handling */\n$ERR + 5;                 /* \"ERR5\" (error converted to string) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, ERR Gaps: 12 gaps identified (asymmetric behavior, array operations)</p>"}, {"location": "syntax/operator/#subtraction-", "title": "Subtraction (<code>-</code>)", "text": "<p>Performs subtraction with type-aware behavior.</p> <pre><code>/* Numeric subtraction */\n10 - 3;                   /* 7 (INT) */\n10.5 - 3;                 /* 7.5 (FLOAT) */\n10 - 3.5;                 /* 6.5 (FLOAT) */\n\n/* String subtraction (character difference) */\n\"hello\" - \"world\";        /* -15 (character difference calculation) */\n\n/* Array subtraction (remove by index) */\n[1,2,3,4,5] - 2;         /* [1,2,4,5] (removes element at index 2) */\n[1,2,3,4,5] - 2.0;       /* [1,2,4,5] (float index converted to int) */\n\n/* Error cases */\n5 - \"hello\";              /* $ERR (no string to number conversion) */\n[1,2,3] - [4,5,6];       /* $ERR (no array subtraction) */\n</code></pre> <p>Type Support: INT, FLOAT, STR-STR, ARRAY-INT/FLOAT Gaps: 12 gaps identified (most combinations return $ERR)</p>"}, {"location": "syntax/operator/#multiplication", "title": "Multiplication (<code>*</code>)", "text": "<p>Performs multiplication with matrix support and string repetition.</p> <pre><code>/* Numeric multiplication */\n5 * 3;                    /* 15 (INT) */\n5 * 3.14;                 /* 15.7... (FLOAT) */\n3.14 * 5;                 /* 15.7... (FLOAT) */\n\n/* String repetition */\n\"hello\" * 3;              /* \"hellohellohello\" */\n3 * \"world\";              /* 3 (asymmetric - should be \"worldworldworld\") */\n\n/* Array operations */\n[1,2,3] * 2;              /* [1,2,3,1,2,3] (array repetition) */\n2 * [1,2,3];              /* 2 (asymmetric - should repeat array) */\n\n/* Matrix multiplication (advanced) */\nmatrix1 = [[1,2],[3,4]];\nmatrix2 = [[5,6],[7,8]];\nmatrix1 * matrix2;        /* [[19,22],[43,50]] (matrix multiplication) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, ARRAY Gaps: 18 gaps identified (asymmetric behavior, missing type combinations)</p>"}, {"location": "syntax/operator/#division", "title": "Division (<code>/</code>)", "text": "<p>Performs division with smart type promotion.</p> <pre><code>/* Numeric division */\n10 / 3;                   /* 3.333... (FLOAT) */\n10.0 / 3;                 /* 3.333... (FLOAT) */\n10 / 3.0;                 /* 3.333... (FLOAT) */\n\n/* Array division */\n[1,2,3,4,5] / 2;         /* [0.5,1,1.5,2,2.5] (element-wise division) */\n\n/* Error cases */\n5 / \"hello\";              /* $ERR (no string to number conversion) */\n[1,2,3] / [4,5,6];       /* $ERR (no array division) */\n</code></pre> <p>Type Support: INT, FLOAT, ARRAY Gaps: 15 gaps identified (most combinations return $ERR)</p>"}, {"location": "syntax/operator/#modulo", "title": "Modulo (<code>%</code>)", "text": "<p>Performs modulo operation with cryptographic features.</p> <pre><code>/* Numeric modulo */\n10 % 3;                   /* 1 (INT) */\n10.5 % 3;                 /* 1.5 (FLOAT) */\n10 % 3.5;                 /* 3.0 (FLOAT) */\n\n/* Cryptographic features */\nbase = 7;\nexponent = 13;\nmodulus = 11;\nbase.modpow(exponent, modulus);  /* 2 (modular exponentiation) */\n\nvalue = 3;\nmodulus = 11;\nvalue.modinv(modulus);    /* 4 (modular multiplicative inverse) */\n</code></pre> <p>Type Support: INT, FLOAT Gaps: 16 gaps identified (strict numeric types only)</p>"}, {"location": "syntax/operator/#exponentiation", "title": "Exponentiation (<code>**</code>)", "text": "<p>Performs exponentiation with smart type promotion.</p> <pre><code>/* Numeric exponentiation */\n2 ** 3;                   /* 8 (INT) */\n2 ** 3.5;                 /* 11.313... (FLOAT) */\n2.5 ** 3;                 /* 15.625 (FLOAT) */\n\n/* Array exponentiation */\n[1,2,3] ** 2;             /* [1,4,9] (element-wise exponentiation) */\n\n/* Error cases */\n5 ** \"hello\";             /* $ERR (no string to number conversion) */\n</code></pre> <p>Type Support: INT, FLOAT, ARRAY Gaps: 15 gaps identified (most combinations return $ERR)</p>"}, {"location": "syntax/operator/#root", "title": "Root (<code>*/</code>)", "text": "<p>Performs nth root calculations with advanced mathematical support.</p> <pre><code>/* Numeric root */\n8 */ 3;                   /* 2 (cube root of 8) */\n16 */ 2;                  /* 4 (square root of 16) */\n27 */ 3.5;                /* 2.884... (3.5th root of 27) */\n\n/* Array root */\n[8,27,64] */ 3;          /* [2,3,4] (element-wise cube root) */\n\n/* Advanced mathematical operations */\nvector = [1,2,3];\nvector */ 2;              /* Vector operations (advanced) */\n</code></pre> <p>Type Support: INT, FLOAT, ARRAY Gaps: 13 gaps identified (strict numeric types only)</p>"}, {"location": "syntax/operator/#comparison-operators", "title": "Comparison Operators", "text": ""}, {"location": "syntax/operator/#equality", "title": "Equality (<code>==</code>)", "text": "<p>Performs equality comparison with object ID comparison for complex types.</p> <pre><code>/* Numeric equality */\n5 == 5;                   /* true */\n5.0 == 5;                 /* true */\n5 == 5.0;                 /* true */\n\n/* String equality */\n\"hello\" == \"hello\";       /* true */\n\"hello\" == \"world\";       /* false */\n\n/* Boolean equality */\ntrue == true;             /* true */\ntrue == 1;                /* true (truthiness conversion) */\n\n/* Array/List equality (object ID comparison) */\n[1,2,3] == [1,2,3];      /* true (same object) */\na = [1,2,3];\nb = [1,2,3];\na == b;                   /* false (different objects) */\n\n/* Object equality */\n{a:1,b:2} == {a:1,b:2};  /* true (same object) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 7 gaps identified (object ID vs content comparison)</p>"}, {"location": "syntax/operator/#inequality", "title": "Inequality (<code>!=</code>)", "text": "<p>Performs inequality comparison with object ID comparison for complex types.</p> <pre><code>/* Numeric inequality */\n5 != 3;                   /* true */\n5.0 != 5;                 /* false */\n\n/* String inequality */\n\"hello\" != \"world\";       /* true */\n\"hello\" != \"hello\";       /* false */\n\n/* Array/List inequality (object ID comparison) */\n[1,2,3] != [1,2,4];      /* false (same object ID) */\na = [1,2,3];\nb = [1,2,4];\na != b;                   /* true (different objects) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 7 gaps identified (object ID vs content comparison)</p>"}, {"location": "syntax/operator/#less-than", "title": "Less Than (<code>&lt;</code>)", "text": "<p>Performs less than comparison without type conversion.</p> <pre><code>/* Numeric comparison */\n3 &lt; 5;                    /* true */\n3.14 &lt; 5;                 /* true */\n5 &lt; 3.14;                 /* false */\n\n/* String comparison */\n\"apple\" &lt; \"banana\";       /* true (lexicographic) */\n\"hello\" &lt; \"world\";        /* true */\n\n/* Error cases */\n5 &lt; \"hello\";              /* false (no type conversion) */\n\"hello\" &lt; 5;              /* false (no type conversion) */\n</code></pre> <p>Type Support: INT, FLOAT, STR Gaps: 8 gaps identified (no type conversion)</p>"}, {"location": "syntax/operator/#less-than-or-equal", "title": "Less Than or Equal (<code>&lt;=</code>)", "text": "<p>Performs less than or equal comparison without type conversion.</p> <pre><code>/* Numeric comparison */\n3 &lt;= 5;                   /* true */\n3 &lt;= 3;                   /* true */\n5 &lt;= 3;                   /* false */\n\n/* String comparison */\n\"apple\" &lt;= \"banana\";      /* true */\n\"hello\" &lt;= \"hello\";       /* true */\n\n/* Error cases */\n5 &lt;= \"hello\";             /* false (no type conversion) */\n</code></pre> <p>Type Support: INT, FLOAT, STR Gaps: 8 gaps identified (no type conversion)</p>"}, {"location": "syntax/operator/#greater-than", "title": "Greater Than (<code>&gt;</code>)", "text": "<p>Performs greater than comparison with known bug in STR &gt; INT.</p> <pre><code>/* Numeric comparison */\n5 &gt; 3;                    /* true */\n5.14 &gt; 3;                 /* true */\n3 &gt; 5;                    /* false */\n\n/* String comparison */\n\"banana\" &gt; \"apple\";       /* true */\n\"world\" &gt; \"hello\";        /* true */\n\n/* Known bug: STR &gt; INT */\n\"hello\" &gt; 5;              /* true (BUG: should be false) */\n5 &gt; \"hello\";              /* false (correct) */\n</code></pre> <p>Type Support: INT, FLOAT, STR Gaps: 8 gaps identified (STR &gt; INT bug)</p>"}, {"location": "syntax/operator/#greater-than-or-equal", "title": "Greater Than or Equal (<code>&gt;=</code>)", "text": "<p>Performs greater than or equal comparison with known bug in STR &gt;= INT.</p> <pre><code>/* Numeric comparison */\n5 &gt;= 3;                   /* true */\n5 &gt;= 5;                   /* true */\n3 &gt;= 5;                   /* false */\n\n/* String comparison */\n\"banana\" &gt;= \"apple\";      /* true */\n\"hello\" &gt;= \"hello\";       /* true */\n\n/* Known bug: STR &gt;= INT */\n\"hello\" &gt;= 5;             /* true (BUG: should be false) */\n5 &gt;= \"hello\";             /* false (correct) */\n</code></pre> <p>Type Support: INT, FLOAT, STR Gaps: 8 gaps identified (STR &gt;= INT bug)</p>"}, {"location": "syntax/operator/#spaceship", "title": "Spaceship (<code>&lt;=&gt;</code>)", "text": "<p>Performs three-way comparison with known bug in STR &lt;=&gt; INT.</p> <pre><code>/* Numeric comparison */\n5 &lt;=&gt; 3;                  /* 1 (greater) */\n3 &lt;=&gt; 5;                  /* -1 (less) */\n5 &lt;=&gt; 5;                  /* 0 (equal) */\n\n/* String comparison */\n\"banana\" &lt;=&gt; \"apple\";     /* 1 (greater) */\n\"apple\" &lt;=&gt; \"banana\";     /* -1 (less) */\n\"hello\" &lt;=&gt; \"hello\";      /* 0 (equal) */\n\n/* Known bug: STR &lt;=&gt; INT */\n\"hello\" &lt;=&gt; 5;            /* 44 (BUG: should be error) */\n5 &lt;=&gt; \"hello\";            /* 99 (BUG: should be error) */\n</code></pre> <p>Type Support: INT, FLOAT, STR Gaps: 7 gaps identified (STR &lt;=&gt; INT bug)</p>"}, {"location": "syntax/operator/#logical-operators", "title": "Logical Operators", "text": ""}, {"location": "syntax/operator/#logical-and", "title": "Logical AND (<code>&amp;&amp;</code>)", "text": "<p>Performs logical AND with perfect truthiness conversion.</p> <pre><code>/* Boolean logic */\ntrue &amp;&amp; true;             /* true */\ntrue &amp;&amp; false;            /* false */\nfalse &amp;&amp; true;            /* false */\nfalse &amp;&amp; false;           /* false */\n\n/* Truthiness conversion */\n5 &amp;&amp; 3;                   /* 3 (both truthy) */\n0 &amp;&amp; 5;                   /* 0 (first falsy) */\n5 &amp;&amp; 0;                   /* 0 (second falsy) */\n\"\" &amp;&amp; \"hello\";            /* \"\" (first falsy) */\n\"hello\" &amp;&amp; \"\";            /* \"\" (second falsy) */\n\n/* Short-circuit evaluation */\nfalse &amp;&amp; (5/0);           /* false (short-circuits) */\ntrue &amp;&amp; (5/0);            /* $ERR (evaluates second operand) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 0 gaps (perfect implementation)</p>"}, {"location": "syntax/operator/#logical-or", "title": "Logical OR (<code>||</code>)", "text": "<p>Performs logical OR with perfect truthiness conversion.</p> <pre><code>/* Boolean logic */\ntrue || true;             /* true */\ntrue || false;            /* true */\nfalse || true;            /* true */\nfalse || false;           /* false */\n\n/* Truthiness conversion */\n5 || 3;                   /* 5 (first truthy) */\n0 || 5;                   /* 5 (second truthy) */\n0 || 0;                   /* 0 (both falsy) */\n\"\" || \"hello\";            /* \"hello\" (second truthy) */\n\"hello\" || \"\";            /* \"hello\" (first truthy) */\n\n/* Short-circuit evaluation */\ntrue || (5/0);            /* true (short-circuits) */\nfalse || (5/0);           /* $ERR (evaluates second operand) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 0 gaps (perfect implementation)</p>"}, {"location": "syntax/operator/#logical-not", "title": "Logical NOT (<code>!</code>)", "text": "<p>Performs logical NOT with known bugs in FLOAT handling.</p> <pre><code>/* Boolean logic */\n!true;                     /* false */\n!false;                    /* true */\n\n/* Truthiness conversion */\n!5;                        /* false (truthy) */\n!0;                        /* true (falsy) */\n!\"hello\";                  /* false (truthy) */\n!\"\";                       /* true (falsy) */\n\n/* Known bugs: FLOAT behavior */\n!5.0;                      /* true (BUG: should be false) */\n!(-5.0);                   /* false (BUG: should be true) */\n\n/* Complex expressions */\n!(5 &amp;&amp; 3);                 /* false (BUG: should be true) */\n!(0 || 5);                 /* false (BUG: should be true) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 0 gaps (but has FLOAT bugs)</p>"}, {"location": "syntax/operator/#bitwise-operators", "title": "Bitwise Operators", "text": ""}, {"location": "syntax/operator/#bitwise-and", "title": "Bitwise AND (<code>&amp;</code>)", "text": "<p>Performs bitwise AND with strict INT/RAW type requirements.</p> <pre><code>/* Integer bitwise operations */\n5 &amp; 3;                     /* 1 (101 &amp; 011 = 001) */\n10 &amp; 6;                    /* 2 (1010 &amp; 0110 = 0010) */\n\n/* Error cases */\n5.5 &amp; 3;                   /* $ERR (FLOAT not supported) */\n\"hello\" &amp; \"world\";         /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT only Gaps: 12 gaps identified (strict INT/RAW only)</p>"}, {"location": "syntax/operator/#bitwise-or", "title": "Bitwise OR (<code>|</code>)", "text": "<p>Performs bitwise OR with strict INT/RAW type requirements.</p> <pre><code>/* Integer bitwise operations */\n5 | 3;                     /* 7 (101 | 011 = 111) */\n10 | 6;                    /* 14 (1010 | 0110 = 1110) */\n\n/* Error cases */\n5.5 | 3;                   /* $ERR (FLOAT not supported) */\n\"hello\" | \"world\";         /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT only Gaps: 12 gaps identified (strict INT/RAW only)</p>"}, {"location": "syntax/operator/#bitwise-xor", "title": "Bitwise XOR (<code>^</code>)", "text": "<p>Performs bitwise XOR with strict INT/RAW type requirements.</p> <pre><code>/* Integer bitwise operations */\n5 ^ 3;                     /* 6 (101 ^ 011 = 110) */\n10 ^ 6;                    /* 12 (1010 ^ 0110 = 1100) */\n\n/* Error cases */\n5.5 ^ 3;                   /* $ERR (FLOAT not supported) */\n\"hello\" ^ \"world\";         /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT only Gaps: 12 gaps identified (strict INT/RAW only)</p>"}, {"location": "syntax/operator/#bitwise-not", "title": "Bitwise NOT (<code>~</code>)", "text": "<p>Performs bitwise NOT with advanced matrix inversion support.</p> <pre><code>/* Integer bitwise operations */\n~5;                        /* -6 (bitwise complement) */\n~0;                        /* -1 (bitwise complement) */\n\n/* Matrix inversion (advanced) */\nmatrix = [[1,2],[3,4]];\n~matrix;                   /* Matrix inversion operations */\n\n/* Error cases */\n~5.5;                      /* $ERR (FLOAT not supported) */\n~\"hello\";                  /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT, ARRAY (matrix operations) Gaps: 12 gaps identified (strict INT/RAW only, except matrix support)</p>"}, {"location": "syntax/operator/#left-shift", "title": "Left Shift (<code>&lt;&lt;</code>)", "text": "<p>Performs left shift with FLOAT support.</p> <pre><code>/* Integer left shift */\n5 &lt;&lt; 2;                    /* 20 (5 * 2^2) */\n10 &lt;&lt; 1;                   /* 20 (10 * 2^1) */\n\n/* Float left shift */\n5.5 &lt;&lt; 2;                  /* 22.0 (5.5 * 2^2) */\n\n/* Error cases */\n5 &lt;&lt; \"hello\";              /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT, FLOAT Gaps: 7 gaps identified (no STR support)</p>"}, {"location": "syntax/operator/#right-shift", "title": "Right Shift (<code>&gt;&gt;</code>)", "text": "<p>Performs right shift with FLOAT support.</p> <pre><code>/* Integer right shift */\n20 &gt;&gt; 2;                   /* 5 (20 / 2^2) */\n10 &gt;&gt; 1;                   /* 5 (10 / 2^1) */\n\n/* Float right shift */\n22.0 &gt;&gt; 2;                 /* 5.5 (22.0 / 2^2) */\n\n/* Error cases */\n20 &gt;&gt; \"hello\";             /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT, FLOAT Gaps: 7 gaps identified (no STR support)</p>"}, {"location": "syntax/operator/#assignment-operators", "title": "Assignment Operators", "text": ""}, {"location": "syntax/operator/#assignment", "title": "Assignment (<code>=</code>)", "text": "<p>Performs variable assignment with perfect implementation.</p> <pre><code>/* Basic assignment */\na = 5;                     /* 5 */\nb = \"hello\";               /* \"hello\" */\nc = [1,2,3];               /* [1,2,3] */\n\n/* Multiple assignment */\na = b = c = 5;             /* 5 (all variables set to 5) */\n\n/* Object assignment */\nobj = {name: \"John\", age: 30};  /* {name:\"John\", age:30} */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 0 gaps (perfect implementation)</p>"}, {"location": "syntax/operator/#add-assignment", "title": "Add Assignment (<code>+=</code>)", "text": "<p>Performs append assignment with comprehensive support.</p> <pre><code>/* Numeric addition */\na = 5;\na += 3;                    /* 8 */\n\n/* String concatenation */\ns = \"hello\";\ns += \"world\";              /* \"helloworld\" */\n\n/* Array append */\narr = [1,2,3];\narr += 4;                  /* [1,2,3,4] */\n\n/* List append */\nlist = [1,2,3];\nlist += 4;                 /* [1,2,3,4] */\n\n/* Object append (nested) */\nobj = {name: \"John\"};\nobj += {age: 30};          /* {name:\"John\",{age:30}} */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 12 gaps identified (asymmetric behavior)</p>"}, {"location": "syntax/operator/#subtract-assignment-", "title": "Subtract Assignment (<code>-=</code>)", "text": "<p>Performs remove assignment with limited support.</p> <pre><code>/* Numeric subtraction */\na = 10;\na -= 3;                    /* 7 */\n\n/* Array remove by index */\narr = [1,2,3,4,5];\narr -= 2;                  /* [1,2,4,5] (removes element at index 2) */\n\n/* Error cases */\ns = \"hello\";\ns -= \"world\";              /* $ERR (STR not supported) */\n</code></pre> <p>Type Support: INT, FLOAT, ARRAY Gaps: 12 gaps identified (severely limited support)</p>"}, {"location": "syntax/operator/#special-operators", "title": "Special Operators", "text": ""}, {"location": "syntax/operator/#ternary", "title": "Ternary (<code>? :</code>)", "text": "<p>Performs conditional expressions with implementation quirks.</p> <pre><code>/* Standard ternary */\ntrue ? \"yes\" : \"no\";       /* \"yes\" */\nfalse ? \"yes\" : \"no\";      /* \"no\" */\n\n/* Numeric conditions */\n5 ? \"positive\" : \"zero\";   /* \"positive\" */\n0 ? \"positive\" : \"zero\";   /* \"zero\" */\n\n/* String conditions */\n\"hello\" ? \"non-empty\" : \"empty\";  /* \"non-empty\" */\n\"\" ? \"non-empty\" : \"empty\";       /* \"empty\" */\n\n/* Complex conditions */\n(5 &gt; 3) ? \"greater\" : \"less\";     /* \"greater\" */\n\n/* Nested ternary */\n5 &gt; 3 ? \"big\" : 5 &gt; 1 ? \"medium\" : \"small\";  /* \"big\" */\n\n/* Implementation quirks */\ntrue ? : \"yes\";            /* \"\" (Form 1: inverted logic) */\nfalse ? : \"yes\";           /* \"yes\" (Form 1: inverted logic) */\ntrue ? \"yes\" : \"no\" : \"maybe\";  /* \"maybe\" (Form 3: unexpected) */\n</code></pre> <p>Type Support: INT, FLOAT, STR, BOOL, ARRAY, LIST, OBJ, ERR Gaps: 0 gaps (but has implementation quirks)</p>"}, {"location": "syntax/operator/#best-practices", "title": "Best Practices", "text": ""}, {"location": "syntax/operator/#type-conversion", "title": "Type Conversion", "text": "<ul> <li>Addition (<code>+</code>): Converts numbers to strings for concatenation</li> <li>Comparison operators: Generally don't convert types (maintains mathematical purity)</li> <li>Logical operators: Perfect truthiness conversion</li> <li>Bitwise operators: Strict INT/RAW only (except <code>~</code> with matrix support)</li> </ul>"}, {"location": "syntax/operator/#error-handling", "title": "Error Handling", "text": "<ul> <li>Most operators: Return $ERR for unsupported type combinations</li> <li>Array operations: Often return empty arrays instead of errors</li> <li>String operations: May return unexpected results for unsupported combinations</li> </ul>"}, {"location": "syntax/operator/#performance-considerations", "title": "Performance Considerations", "text": "<ul> <li>Object ID comparison: Arrays and lists use object ID comparison for performance</li> <li>Short-circuit evaluation: Logical operators use short-circuit evaluation</li> <li>Matrix operations: Advanced linear algebra capabilities available</li> </ul>"}, {"location": "syntax/operator/#known-issues", "title": "Known Issues", "text": "<ul> <li>STR &gt; INT bug: <code>\"hello\" &gt; 5</code> returns true (should be false)</li> <li>Logical NOT FLOAT bugs: <code>!5.0</code> returns true (should be false)</li> <li>Ternary quirks: Form 1 has inverted logic, Form 3 has unexpected behavior</li> <li>Array comparison: Uses object ID instead of content comparison</li> </ul>"}, {"location": "syntax/operator/#advanced-features", "title": "Advanced Features", "text": ""}, {"location": "syntax/operator/#matrix-operations", "title": "Matrix Operations", "text": "<ul> <li>Multiplication (<code>*</code>): Supports matrix multiplication</li> <li>Bitwise NOT (<code>~</code>): Supports matrix inversion</li> <li>Root (<code>*/</code>): Supports vector operations</li> </ul>"}, {"location": "syntax/operator/#cryptographic-features", "title": "Cryptographic Features", "text": "<ul> <li>Modulo (<code>%</code>): Built-in modpow and modinv for cryptographic operations</li> <li>Bitwise operators: Strict integer handling for cryptographic applications</li> </ul>"}, {"location": "syntax/operator/#mathematical-sophistication", "title": "Mathematical Sophistication", "text": "<ul> <li>Root operator (<code>*/</code>): nth root calculations</li> <li>Type promotion: Smart type conversion for mathematical operations</li> <li>Truthiness conversion: Sophisticated boolean conversion rules</li> </ul>"}, {"location": "syntax/operator/#summary", "title": "Summary", "text": "<p>Grapa provides 26 operators with sophisticated type handling and mathematical capabilities. While most operators work as expected, there are some known bugs and design decisions that users should be aware of. The operators are designed with a balance between mathematical purity and user convenience, with some intentionally not converting types to maintain mathematical correctness.</p>"}, {"location": "syntax/precedence/", "title": "Operator Precedence in Grapa", "text": "<p>Operator precedence determines the order in which parts of an expression are evaluated. Understanding precedence is essential for writing correct and predictable Grapa code, especially in complex expressions.</p> <p>Key Points: - Higher precedence operators are evaluated before lower precedence ones. - Parentheses <code>()</code> can always be used to override precedence and clarify intent. - All statements and blocks in Grapa must end with a semicolon (<code>;</code>). - Only block comments (<code>/* ... */</code>) are allowed.</p>"}, {"location": "syntax/precedence/#how-to-read-this-table", "title": "How to Read This Table", "text": "<ul> <li>Operator: The symbol(s) or syntax for the operation.</li> <li>Description: What the operator does.</li> <li>Associativity: The direction in which operators of the same precedence are evaluated (left-to-right or right-to-left).</li> </ul> Operator Description Associativity <code>a</code> <code>@a</code> token, contents of token right-to-left <code>a()</code> function call right-to-left <code>a.b</code> <code>a[b]</code> lookup right-to-left <code>+a</code> <code>-a</code> <code>!a</code> <code>~a</code> Unary plus, minus, not, bitwise not right-to-left <code>a*b</code> <code>a/b</code> <code>a%b</code> multiply, divide, remainder left-to-right <code>a+b</code> <code>a-b</code> add, subtract left-to-right <code>&lt;&lt;</code> <code>&gt;&gt;</code> bitwise shift left-to-right <code>&lt;=&gt;</code> 3-way compare left-to-right <code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> less/greater than (or equal) left-to-right <code>==</code> <code>!=</code> equal, not equal left-to-right <code>&amp;</code> bitwise and left-to-right <code>^</code> bitwise xor left-to-right <code>|</code> bitwise or left-to-right <code>&amp;&amp;</code> logical and left-to-right <code>||</code> logical or left-to-right <code>a?b:c</code> <code>a?b:c:d</code> ternary conditionals right-to-left <code>=</code> <code>+=</code> <code>-=</code> <code>++=</code> assignments right-to-left"}, {"location": "syntax/precedence/#examples", "title": "Examples", "text": "<pre><code>result = 2 + 3 * 4;      /* result is 14, not 20 */\nresult = (2 + 3) * 4;    /* result is 20 */\nvalue = 5;\nvalue += 2 * 3;          /* value is 11, not 21 */\nflag = 1 &lt; 2 &amp;&amp; 3 &gt; 2;   /* flag is true */\n</code></pre>"}, {"location": "syntax/precedence/#grapa-specific-notes", "title": "Grapa-Specific Notes", "text": "<ul> <li>Every statement and block must end with a semicolon (<code>;</code>).</li> <li>Only block comments (<code>/* ... */</code>) are allowed.</li> <li>Use parentheses to clarify precedence in complex expressions.</li> <li>For more on syntax, see the Syntax Quick Reference.</li> </ul>"}, {"location": "syntax/precedence/#related-documentation", "title": "Related Documentation", "text": "<ul> <li>Syntax Quick Reference</li> <li>Operator Reference</li> </ul>"}, {"location": "sys/file/", "title": "$file()", "text": "", "tags": ["user", "highlevel"]}, {"location": "sys/file/#minimal-example", "title": "Minimal Example", "text": "<pre><code>f = $file();\nf.chd(\"C:/Users/user/Projects/MyProject\");\nf.cd(\"src\");\nf.ls();  /* List files in /src */\nf.get(\"README.md\");  /* Read a file */\nf.set(\"test.txt\", \"Hello, World!\");  /* Write a file */\n</code></pre> <p>References:</p> <p>Provides the ability to navigate either the file system or a database, querying data and updating data. This class/libraries will be enhanced over time to support navigating data types beyond the file system and the grapa database - such as JSON/XML and unstructured data where a mapping can be defined (maybe with a set of rules). With a few additional enhancements, this class/library will also enable extending the grapa syntax to include SQL with $file for the underlying data.</p> <p>Each example below assumes the following command has been issued: <pre><code>f = $file();\n</code></pre></p> <p>Which assigns f an instance of the $file class. The following are then operations that can be used from the $file class.</p> <p>The name field for the commands can include a path relative to the \"working directory\" (see pwd()). If the \"working directory\" is a OS filesystem directory, then the path must reference a file within the OS filesystem. If the \"working directory\" is a grapa table, then the path and data item would be within the grapa table. What is not currently supported is referencing a grapa table item when the \"working directory\" is not within a grapa table.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#type", "title": "type()", "text": "<p>Returns the type of the file object. <pre><code>f.type();\n$file\n</code></pre></p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#table", "title": "table()", "text": "<p>The table function creates an in-memory database. </p> <pre><code>t = f.table();\nt.type();\n$TABLE\n</code></pre> <p>Database Types: The table can be configured as either: - Row Store (RTABLE_TREE): Traditional row-oriented storage, optimized for transactional workloads - Column Store (CTABLE_TREE): Column-oriented storage, optimized for analytical queries and aggregations</p> <p>Note: Column store databases use fragmented data storage (FREC_DATA) for efficient handling of sparse data and dynamic growth.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#directory-navigation", "title": "Directory Navigation", "text": "<p>Grapa provides two levels of directory navigation: working directory (relative) and home directory (absolute). This dual-level system allows for flexible project management and navigation.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#pwd-print-working-directory", "title": "pwd() - Print Working Directory", "text": "<p>Returns the current working directory, relative to the current home directory.</p> <p>Purpose: Shows where you are within the current project context Returns: Relative path (e.g., <code>/lib</code>, <code>/docs</code>) Use Case: Navigation within a project or database</p> <pre><code>f.pwd();\n/\n\nf.cd(\"lib\");\nf.pwd();\n/lib\n\nf.cd(\"grapa\");\nf.pwd();\n/lib/grapa\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#cdname-change-working-directory", "title": "cd([name]) - Change Working Directory", "text": "<p>Changes the current working directory, relative to the current home directory.</p> <p>Parameters: - <code>name</code> (optional): Directory name or path to navigate to   - <code>\"..\"</code>: Move up one level   - <code>\"/\"</code>: Move to root of current home directory   - <code>\"path\"</code>: Move to specific subdirectory</p> <pre><code>f.cd(\"lib\");\nf.pwd();\n/lib\n\nf.cd(\"..\");\nf.pwd();\n/\n\nf.cd(\"/docs\");\nf.pwd();\n/docs\n\nf.cd(\"..\");\nf.pwd();\n/\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#phd-print-home-directory", "title": "phd() - Print Home Directory", "text": "<p>Returns the current home directory (absolute path).</p> <p>Purpose: Shows the base directory that serves as the root for relative navigation Returns: Absolute path (e.g., <code>C:\\Users\\matichuk\\Documents\\GitHub\\grapa</code>) Use Case: Project switching and absolute path reference</p> <pre><code>f.phd();\nC:\\Users\\matichuk\\Documents\\GitHub\\grapa\n\nf.chd(\"C:/Users/matichuk/Documents/NewProject\");\nf.phd();\nC:\\Users\\matichuk\\Documents\\NewProject\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#chdfilesystempath-change-home-directory", "title": "chd(filesystempath) - Change Home Directory", "text": "<p>Changes the current home directory to a new absolute path.</p> <p>Parameters: - <code>filesystempath</code>: Absolute or relative path to set as new home directory</p> <p>Note: This resets the working directory to the root (<code>/</code>) of the new home directory.</p> <pre><code>/* Change to absolute path */\nf.chd(\"C:/Users/matichuk/Documents/NewProject\");\nf.phd();\nC:\\Users\\matichuk\\Documents\\NewProject\nf.pwd();\n/\n\n/* Change to relative path from current home */\nf.chd(\"../sibling_project\");\nf.phd();\nC:\\Users\\matichuk\\Documents\\sibling_project\nf.pwd();\n/\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#directory-navigation-comparison", "title": "Directory Navigation Comparison", "text": "Function Purpose Scope Change Method Example Output <code>pwd()</code> Show current location Relative to home <code>cd()</code> <code>/lib/grapa</code> <code>phd()</code> Show base directory Absolute system <code>chd()</code> <code>C:\\Users\\matichuk\\Documents\\GitHub\\grapa</code> <p>Typical Workflow: 1. Use <code>chd()</code> to set your project's home directory 2. Use <code>cd()</code> to navigate within the project 3. Use <code>pwd()</code> to see your current location within the project 4. Use <code>phd()</code> to see the absolute project location</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#lsname", "title": "ls([name])", "text": "<p>Retrieves a list of files/directories in the current working directory.</p> <p>Return Format: Returns a list of objects with the following properties: - <code>$KEY</code>: File or directory name - <code>$TYPE</code>: Type (\"FILE\", \"GROUP\", etc.) - <code>$BYTES</code>: File size in bytes (0 for directories)</p> <p>Note: - When navigating a traditional file system, folders/directories will be listed as <code>$TYPE: \"GROUP\"</code>. - In a database context, <code>GROUP</code> also refers to hierarchical/grouped database structures.</p> <pre><code>f.ls();\n[\n  {\"$KEY\":\"docs\",\"$TYPE\":\"GROUP\",\"$BYTES\":0},\n  {\"$KEY\":\"README.md\",\"$TYPE\":\"FILE\",\"$BYTES\":4302}\n]\n\n/* Check type of a directory */\nf.cd(\"docs\");\nf.type();\n/* Returns: GROUP */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#mkname-type", "title": "mk(name [,type])", "text": "<p>Creates a directory at the current working directory within the file system.</p> <p>Parameters: - <code>name</code>: Directory name to create - <code>type</code> (optional): Type of directory/database to create</p> <p>Type Options: - <code>\"\"</code> or <code>\"DIR\"</code>: Creates a regular directory (default) - <code>\"GROUP\"</code>: Creates a database of GROUP type for hierarchical data, or a folder/directory in the file system - <code>\"ROW\"</code>: Creates a ROW store database optimized for transactional workloads - <code>\"COL\"</code>: Creates a COL store database optimized for analytical queries</p> <p>Column Store (COL) Characteristics: - Uses fragmented data storage for efficient sparse data handling - Optimized for column-oriented queries and aggregations - Better performance for analytical workloads - Efficient storage of wide tables with many optional fields</p> <p>Note: - When using <code>mk()</code> in a file system context, <code>GROUP</code> is equivalent to creating a folder/directory. - In a database context, <code>GROUP</code> creates a hierarchical/grouped database structure.</p> <pre><code>/* Create regular directory */\nf.mk(\"test\");\nf.cd(\"test\");\nf.ls();\n[]\n\n/* Create database directory */\nf.mk(\"testdb\", \"GROUP\");\nf.cd(\"testdb\");\nf.ls();\n[]\n\n/* Create column store database */\nf.mk(\"analytics_db\", \"COL\");\nf.cd(\"analytics_db\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#type-table", "title": "Type Table", "text": "Type Description/Use Case Storage Model GROUP Folder/directory in file system, or hierarchical/grouped database GROUP_TREE ROW Transactional, record-based, OLTP, point queries RTABLE_TREE, BYTE_DATA COL Analytical, column-based, sparse/large datasets CTABLE_TREE, FREC_DATA", "tags": ["user", "highlevel"]}, {"location": "sys/file/#rmname", "title": "rm(name)", "text": "<p>Removes a directory or file. <pre><code>f.rm(\"test\");\n</code></pre></p> <p>Note: This will recursively remove directories and their contents.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#setname-value-field", "title": "set(name, value [, field])", "text": "<p>Creates or updates a file with the specified content.</p> <p>Parameters: - <code>name</code>: File name - <code>value</code>: Content to write to the file - <code>field</code> (optional): Field name (defaults to <code>$VALUE</code>)</p> <pre><code>f.set(\"test.txt\", \"Hello, World!\");\nf.set(\"config.json\", '{\"name\": \"test\", \"value\": 123}');\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#getname-field", "title": "get(name [, field])", "text": "<p>Reads the content of a file.</p> <p>Parameters: - <code>name</code>: File name - <code>field</code> (optional): Field name (defaults to <code>$VALUE</code>)</p> <p>Return Format: Returns file content in hexadecimal format.</p> <pre><code>f.set(\"test.txt\", \"Hello, World!\");\ncontent = f.get(\"test.txt\");\n/* Returns: 0x48656C6C6F2C20576F726C6421 */\n</code></pre> <p>Note: File content is returned in hexadecimal format, not plain text. To convert to string, you may need to use additional processing.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#infoname", "title": "info(name)", "text": "<p>Returns detailed metadata information about a file or directory.</p> <p>Parameters: - <code>name</code>: File or directory name to inspect</p> <p>Return Format: Returns an object with file metadata containing: - <code>$TYPE</code>: Type of item (<code>\"FILE\"</code>, <code>\"DIR\"</code>, or <code>\"ERR\"</code> for errors/non-existent) - <code>$BYTES</code>: Size in bytes (0 for directories, actual size for files) - <code>error</code>: Error code (-1) if item doesn't exist or is inaccessible</p> <p>Examples: <pre><code>/* File information */\nf.set(\"test.txt\", \"Hello, World!\");\ninfo = f.info(\"test.txt\");\n/* Returns: {\"$TYPE\":\"FILE\",\"$BYTES\":13} */\n\n/* Directory information */\nf.mk(\"test_dir\");\ndir_info = f.info(\"test_dir\");\n/* Returns: {\"$TYPE\":\"DIR\",\"$BYTES\":0} */\n\n/* Non-existent item */\nerror_info = f.info(\"nonexistent.txt\");\n/* Returns: {\"error\":-1} */\n</code></pre></p> <p>Use Cases:</p> <p>File Type Detection: <pre><code>info = f.info(\"document.txt\");\nif (info[\"$TYPE\"] == \"FILE\") {\n    \"This is a file\\n\".echo();\n} else if (info[\"$TYPE\"] == \"DIR\") {\n    \"This is a directory\\n\".echo();\n} else {\n    \"Item doesn't exist\\n\".echo();\n}\n</code></pre></p> <p>File Size Analysis: <pre><code>info = f.info(\"large_file.txt\");\nif (info[\"$TYPE\"] == \"FILE\") {\n    size = info[\"$BYTES\"];\n    if (size &gt; 1000000) {\n        \"File is larger than 1MB\\n\".echo();\n    }\n}\n</code></pre></p> <p>Batch File Processing: <pre><code>files = [\"file1.txt\", \"file2.txt\", \"file3.txt\"];\ntotal_size = 0;\ni = 0;\nwhile (i &lt; files.length()) {\n    info = f.info(files[i]);\n    if (info[\"$TYPE\"] == \"FILE\") {\n        total_size = total_size + info[\"$BYTES\"];\n    }\n    i = i + 1;\n}\n\"Total size: \" + total_size + \" bytes\\n\".echo();\n</code></pre></p> <p>Key Benefits: - Lightweight: No need to open/read files to get metadata - Fast: Direct OS system calls for file system operations - Unified Interface: Same function works for files and directories - Cross-Platform: Works consistently across different operating systems - Error Handling: Clear error responses for non-existent items</p> <p>Implementation Notes: - Uses <code>stat64()</code> on Unix/Linux systems - Uses <code>FindFirstFileA()</code> on Windows systems - Works in both file system and database contexts - Essential for file management, storage monitoring, and data validation</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#splitparts-name-path-delim-option", "title": "split(parts, name, path, delim, option)", "text": "<p>Splits a large file into multiple smaller, manageable parts for processing, storage, or transfer.</p> <p>Parameters: - <code>parts</code>: Number of files to split into (must be &gt; 0) - <code>name</code>: Input file name to split - <code>path</code>: Output directory path for the split files (created if needed) - <code>delim</code>: Delimiter to use for splitting (default: <code>\"\\n\"</code>) - <code>option</code>: Special options   - <code>\"csv\"</code>: Copy header to each file (preserves CSV headers)   - <code>\"start\"</code>: Search backwards for delimiter on split (prevents content breaking)</p> <p>Return Format: Returns an array of created file names. <pre><code>result = f.split(4, \"large_file.txt\", \"split_output\", \"\\n\", \"\");\n/* Returns: [\"1.large_file.txt\",\"2.large_file.txt\",\"3.large_file.txt\",\"4.large_file.txt\"] */\n</code></pre></p> <p>Examples:</p> <p>Basic File Splitting: <pre><code>/* Create a large file */\nlarge_content = \"\";\ni = 1;\nwhile (i &lt;= 100) {\n    large_content = large_content + \"Line \" + i + \"\\n\";\n    i = i + 1;\n};\nf.set(\"large_file.txt\", large_content);\n\n/* Split into 4 parts */\nresult = f.split(4, \"large_file.txt\", \"split_output\", \"\\n\", \"\");\n/* Creates: 1.large_file.txt, 2.large_file.txt, 3.large_file.txt, 4.large_file.txt */\n</code></pre></p> <p>CSV File Splitting with Header Preservation: <pre><code>/* Split CSV file while preserving headers in each part */\nresult = f.split(3, \"data.csv\", \"csv_parts\", \"\", \"csv\");\n/* Each split file includes the original header row */\n</code></pre></p> <p>Custom Delimiter Splitting: <pre><code>/* Split on pipe character instead of newlines */\nresult = f.split(2, \"custom_data.txt\", \"output\", \"|\", \"\");\n/* Splits content at pipe boundaries */\n</code></pre></p> <p>Smart Boundary Detection: <pre><code>/* Use start option to avoid breaking content arbitrarily */\nresult = f.split(2, \"log_file.txt\", \"log_parts\", \"\\n\", \"start\");\n/* Searches backwards for delimiter to maintain logical boundaries */\n</code></pre></p> <p>Use Cases:</p> <p>Large File Management: <pre><code>/* Split large database export for processing */\nf.split(10, \"database_export.csv\", \"exports\", \"\", \"csv\");\n</code></pre></p> <p>Log File Processing: <pre><code>/* Split large log files for parallel analysis */\nf.split(5, \"server.log\", \"log_chunks\", \"\\n\", \"\");\n</code></pre></p> <p>Data Pipeline Preparation: <pre><code>/* Prepare data for distributed processing */\nf.split(8, \"dataset.txt\", \"chunks\", \"\\n\", \"start\");\n</code></pre></p> <p>Key Features: - Automatic Naming: Files named as <code>1.filename</code>, <code>2.filename</code>, etc. - Size Distribution: Calculates optimal part sizes based on total file size - Memory Efficient: Processes files in chunks, not all at once - Flexible Delimiters: Supports any character or string as delimiter - Error Handling: Returns <code>{\"error\":-1}</code> for non-existent files, <code>null</code> for invalid parameters - Cross-Platform: Works consistently across operating systems</p> <p>Implementation Notes: - Uses efficient block-based file I/O for memory management - Automatically creates output directory if it doesn't exist - Handles remainder content appropriately when file size doesn't divide evenly - Supports both file system and database contexts - Zero-padded numbering ensures proper file sorting</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#mkfieldname-fieldtype-storetype-storesize-storegrow", "title": "mkfield(name [, fieldType [, storeType [, storeSize [, storeGrow]]]])", "text": "<p>Creates a field within the current working directory (database context).</p> <p>Parameters: - <code>name</code>: Field name - <code>fieldType</code> (optional): Type of field (default: <code>\"STR\"</code>) - <code>storeType</code> (optional): Storage type (default: <code>\"VAR\"</code>) - <code>storeSize</code> (optional): Size for fixed fields - <code>storeGrow</code> (optional): Growth size for variable fields</p> <p>Field Types: | Type | Description | |------|-------------| | <code>BOOL</code> | Fixed size for $BOOL | | <code>TIME</code> | Stores an $INT. Size depends on storeType and storeSize | | <code>INT</code> | Stores an $INT. Size depends on storeType and storeSize | | <code>FLOAT</code> | Stores a $FLOAT. Size depends on storeType and storeSize | | <code>STR</code> | Stores a $STR. Size depends on storeType and storeSize | | <code>TABLE</code> | Stores a $TABLE. Size depends on storeType and storeSize | | <code>RAW</code> | Stores a $RAW. Size depends on storeType and storeSize |</p> <p>Storage Types: | Type | Description | Use Case | |------|-------------|----------| | <code>FIX</code> | Fixed field size, data embedded in row/col | Small, frequently accessed fields | | <code>VAR</code> | Variable field size, uses extra reference | Medium-sized variable data | | <code>PAR</code> | Partitioned field for large data updates | Large data requiring partial updates, COL store $TABLE types |</p> <p>Important Notes: - Column Store Fixed Fields: Use fragmented data storage (FREC_DATA) for efficient sparse data handling - Growth Parameters: The <code>storeGrow</code> parameter is automatically set to <code>storeSize</code> for fixed fields if not specified - Performance: Column store is optimized for analytical queries across columns</p> <pre><code>f.mkfield(\"test\");\nf.mkfield(\"age\", \"INT\", \"FIX\", 4);\nf.mkfield(\"name\", \"STR\", \"VAR\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#rmfieldname", "title": "rmfield(name)", "text": "<p>Deletes a field within the current working directory (database context).</p> <pre><code>f.rmfield(\"test\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#debug", "title": "debug()", "text": "<p>Used for debugging the database during development. Displays the BTree structure of the data dictionary and fields and indexes for the current working directory when in a database (either in memory or on the file system).</p> <pre><code>f.debug();\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#performance-considerations", "title": "Performance Considerations", "text": "", "tags": ["user", "highlevel"]}, {"location": "sys/file/#row-store-vs-column-store", "title": "Row Store vs Column Store", "text": "<p>Row Store (ROW) - Best for: Transactional workloads, frequent record updates, point queries - Storage: Contiguous data blocks per record - Performance: Fast record retrieval and updates</p> <p>Column Store (COL) - Best for: Analytical queries, column scans, aggregations, sparse data - Storage: Fragmented data storage for efficient sparse data handling - Performance: Fast column-oriented operations, better compression</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#storage-type-performance", "title": "Storage Type Performance", "text": "<p>FIX (Fixed) - Fastest access for small, frequently used fields - Predictable storage requirements - Best for primary keys, status flags, small integers</p> <p>VAR (Variable) - Flexible storage for variable-length data - Good for medium-sized text fields - Slight overhead for reference management</p> <p>PAR (Partitioned) - Best for large data requiring partial updates - Efficient for very large fields - Used automatically for COL store $TABLE types</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#troubleshooting", "title": "Troubleshooting", "text": "", "tags": ["user", "highlevel"]}, {"location": "sys/file/#common-issues", "title": "Common Issues", "text": "<p>Column Store Performance - Issue: Slow performance on small datasets - Solution: Consider row store for small, transactional workloads</p> <p>Field Creation Errors - Issue: Fields not created properly - Solution: Ensure proper field type and storage parameters are specified</p> <p>Storage Efficiency - Issue: High storage overhead - Solution: Use appropriate storage types and monitor growth parameters</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#debug-information", "title": "Debug Information", "text": "<p>Use the <code>debug()</code> function to inspect database structure: <pre><code>f.debug();\n</code></pre></p> <p>This provides detailed information about: - Database type and structure - Field definitions and storage types - Data distribution and storage efficiency</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#error-handling", "title": "Error Handling", "text": "<p>When operations fail, the system returns error objects: <pre><code>/* Non-existent file */\nresult = f.get(\"non_existent.txt\");\n/* Returns: {\"error\":-1} */\n\n/* Non-existent directory */\nresult = f.cd(\"non_existent_dir\");\n/* Returns: {\"error\":-1} */\n</code></pre></p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#usage-examples", "title": "Usage Examples", "text": "", "tags": ["user", "highlevel"]}, {"location": "sys/file/#basic-file-operations", "title": "Basic File Operations", "text": "<pre><code>f = $file();\n\n/* Create and write to a file */\nf.set(\"test.txt\", \"Hello, World!\");\n\n/* Read file content */\ncontent = f.get(\"test.txt\");\n\n/* List directory contents */\nfiles = f.ls();\n\n/* Navigate directories */\nf.cd(\"docs\");\nf.pwd();  /* Returns: /docs */\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#database-operations", "title": "Database Operations", "text": "<pre><code>/* Create a column store database */\nf.mk(\"analytics_db\", \"COL\");\nf.cd(\"analytics_db\");\n\n/* Create fields */\nf.mkfield(\"id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"name\", \"STR\", \"VAR\");\nf.mkfield(\"age\", \"INT\", \"FIX\", 4);\n\n/* Add data */\nf.set(\"user1\", \"John Doe\", \"name\");\nf.set(\"user1\", 30, \"age\");\n\n/* Retrieve data */\nname = f.get(\"user1\", \"name\");\nage = f.get(\"user1\", \"age\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#row-store-vs-column-store-example", "title": "Row Store vs Column Store Example", "text": "<pre><code>/* Row store for transactional data */\nf.mk(\"transaction_db\", \"ROW\");\nf.cd(\"transaction_db\");\nf.mkfield(\"order_id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"customer_id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"amount\", \"FLOAT\", \"FIX\", 8);\n\n/* Column store for analytical data */\nf.mk(\"analytics_db\", \"COL\");\nf.cd(\"analytics_db\");\nf.mkfield(\"date\", \"TIME\", \"FIX\", 8);\nf.mkfield(\"product_id\", \"INT\", \"FIX\", 4);\nf.mkfield(\"sales_amount\", \"FLOAT\", \"FIX\", 8);\nf.mkfield(\"region\", \"STR\", \"VAR\");\n</code></pre>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#python-integration", "title": "Python Integration", "text": "<p>For Python developers, Grapa's file system and database capabilities can be leveraged through the Python integration. The unified API provides seamless access to both file systems and databases, making it ideal for data science, web development, and system administration workflows.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#key-python-use-cases", "title": "Key Python Use Cases", "text": "<p>Data Science and Analytics: - Column store databases for analytical workloads - Large file management with built-in splitting capabilities - Unified data access across different storage types</p> <p>Web Application Development: - Backend data management with row store for transactional data - Content management with flexible field types - API development with consistent data access patterns</p> <p>System Administration: - Log file management with automatic splitting for large files - Configuration management with unified path navigation - Data pipeline integration for ETL workflows</p> <p>For detailed examples and best practices, see the Python Integration Guide.</p>", "tags": ["user", "highlevel"]}, {"location": "sys/file/#related-topics", "title": "Related Topics", "text": "<ul> <li>Directory Navigation</li> <li>Database Quick Reference</li> <li>Syntax Quick Reference</li> </ul>", "tags": ["user", "highlevel"]}, {"location": "sys/math/", "title": "$math()", "text": "<p>Inherits $OBJ().</p> <p>Also see Operators</p> Command Example Result $math().e(power) $math().e()$math().e(2.3) 2.718281828459045235360287471352669.9741824548147207399576151569088 $math().pi(power) $math().pi()$math().pi(2.3) 3.141592653589793238462643383279513.9137663852357115150632799555148 (val).log(base) (100).log(10) 2 (val).ln() (100).ln() 4.605170185988091368035982909368 (val).sin() (0.5).sin()(1).pi().sin() 0.479425538604203000273287935215570 (val).cos() (0.5).cos() 0.87758256189037271611628158260382 (val).tan() (0.5).tan() 0.5463024898437905132551794657802 (val).cot() (0.5).cot() 1.830487721712451919268019438968 (val).sec() (0.5).sec() 1.1394939273245491223133277682049 (val).csc() (0.5).csc() 2.08582964293348818577250167545929 (val).asin() (0.5).asin() 0.52359877559829887307710723054658 (val).acos() (0.5).acos() 1.04719755119659774615421446109316 (val).atan() (0.5).atan() 0.46364760900080611621425623146121 (val).acot() (0.5).acot() 1.107148717794090503017065460178 (val).asec() (1.5).asec() 0.8410686705679302557765250318264 (val).acsc() (1.5).acsc() 0.72972765622696636345479665981332 (val).sinh() (0.5).sinh() 0.5210953054937473616224256264114 (val).cosh() (0.5).cosh() 1.1276259652063807852262251614026 (val).tanh() (0.5).tanh() -0.46211715726000975850231848364367 (val).coth() (0.5).coth() -2.163953413738652848770004010218 (val).sech() (0.5).sech() 0.8868188839700739086588977977834 (val).csch() (0.5).csch() 1.919034751334943719492202878727 (val).asinh() (0.5).asinh() 0.48121182505960344749775891342436 (val).acosh() (2).acosh() 1.3169578969248167086250463473079 (val).atanh() (0.5).atanh() 0.5493061443340548456976226184612 (val).acoth() (0.5).acoth() 0.5493061443340548456976226184612 (val).asech() (0.5).asech() 1.3169578969248167086250463473079 (val).acsch() (0.5).acsch() 1.4436354751788103424932767402731 $math().atan2(x,y) <code>$math().atan2(10,10)*180/$math().pi()</code> 45 $math().hypot(x,y) $math().hypot(3,4) 5 (val).random() (16).random() 11942 (val).abs() (-78).abs() 78 (val).modpow(p,m) (4).modpow(13,497) 445 (val).modinv(m) (3504).modinv(385) 79 (val).genprime() (16).genprime() 60913 (val).isprime (60913).isprime() 1 (val).gcd(n) (18).gcd(24) 6"}, {"location": "sys/net/", "title": "$net", "text": "<p>/* Thread Safety: Grapa is fully thread safe in all supported environments (command line, Grapa shell, and Python/GrapaPy). All built-in operations\u2014including map, filter, reduce, $thread, and $net\u2014are safe to use concurrently. Users do not need to take any special precautions for thread safety in these environments.</p> <p>Note: Only if Grapa is integrated directly into a non-thread-safe C++ host (not anticipated for normal users) would additional thread safety considerations arise. */</p> <p>Also see $OBJ document</p> <p>Provides a socket library, cross functional with all platforms supported. </p>"}, {"location": "sys/net/#type", "title": "type()", "text": "<p>Returns $net.</p>"}, {"location": "sys/net/#mac", "title": "mac()", "text": "<pre><code>&gt; $net().mac()\n{\"name\":\"Ethernet\",\"ip\":\"104.0.97.19\",\"mac\":FB05B43EFC09ABC8}\n</code></pre>"}, {"location": "sys/net/#interfaces", "title": "interfaces()", "text": "<pre><code>&gt; $net().interfaces()\n{\n  {\"name\":\"Ethernet\",\"mac\":\"FB05B43EFC09ABC8\",\"family\":\"IPV6\",\"address\":\"xxx:xxx:xxx:xxx::xxx\"},      \n  {\"name\":\"Ethernet\",\"mac\":\"FB05B43EFC09ABC8\",\"family\":\"IPV6\",\"address\":\"xxx:xxx:xxxx:xxx:xxxx:xxxx:xxxx:xxx\"}\n  {\"name\":\"Ethernet\",\"mac\":\"FB05B43EFC09ABC8\",\"family\":\"IPV4\",\"address\":\"104.0.97.19\"},\n}\n</code></pre>"}, {"location": "sys/net/#connecturl", "title": "connect(url)", "text": "<pre><code>n2 = $net();\nn2.connect('localhost:12345');\n</code></pre>"}, {"location": "sys/net/#bindurl", "title": "bind(url)", "text": "<p>Using bind/listen requires setting up at least 2 net objects. One for bind and the other for listen. See listen(). <pre><code>n1 = $net();\nn1.bind(':12345');\n</code></pre></p>"}, {"location": "sys/net/#listennet", "title": "listen(net)", "text": "<p>Pass in a bound net object. Listen is blocking, so a $thread may be needed to manage - or separate threads if more than one listener.</p> <p>For those familiar with using sockets in C++, the $net class is a representation of sockets, and use bind/listen in the same way.</p> <pre><code>n1 = $net();\nn1.bind(':12345');\nn2 = $net();\nn2.listen('@n1);\n</code></pre>"}, {"location": "sys/net/#onlistenurlmessagehandler-connecthandler-count1", "title": "onlisten(url,messageHandler [,connectHandler [,count:1]])", "text": "<p>Accomplishes the same as bind/listen, but handled in a background thread and much easier to setup.</p> <p>When a connection is initiated, a new thread and new network object is created, and that new network object binds to the connect. The connectHandler is then called to provide a way to initialize data structures, and than the messageHandler is called for incoming data. The connectHandler receives 1 parameter - an updateable variable. The messageHandler recieves 2 parameters - the message and a hasmore flag. If the hasmore is 0, the data can be processed. If the message length is zero, the remote connection terminated and messageHandler should cleanup as the thread will be closing. </p> <p>The count defines the number of listeners - but fixed to 1 for now. Once a connection is established, the listener automatically restarts. For reasonable workloads, the 1 should be sufficient. For now if more is needed, use Bind/Listen - this though with require the use of $thread. </p> <p>The following sets up a simple web service. Use postman to post messages to verify.</p> <pre><code>processPost = op(in)\n{\n    {processed:in};\n}\n\npostHandler = op(in) \n{\n    $local.data = in.split(\"\\r\").join(\"\");\n    $local.len = data.len() - data.split(\"\\n\\n\")[0].len() - 2;\n    if (len&lt;0) len=0;\n    $local.body = data.right(len);\n    $local.rstr = processPost(body).str();\n    \"HTTP/1.1 200 OK\\r\\nContent-Type: text/json\\r\\nContent-Length: \"+rstr.len().str()+\"\\r\\n\\r\\n\"+rstr;\n};\n\npostConnectHandler = op(netSession)\n{\n    netSession.data = \"\";\n};\n\npostMessageHandler = op(netSession,message,hasmore)\n{\n    netSession.data += message;\n    if (hasmore==0)\n    {\n        netSession.send(postHandler(netSession.data));\n        netSession.data = \"\";\n    };\n};\n\nn=$net();\nn.onlisten(':12345',postMessageHandler,postConnectHandler);\n</code></pre> <p>To very, try the following. <pre><code>n2 = $net();\nerr = n2.connect('localhost:12345');\nerr = n2.send('POST / HTTP/1.1\\r\\nContent-Type: application/json\\r\\n\\r\\n{try:55}');\nn2.nreceive();\nn2.receive();\nn2.disconnect();\n</code></pre></p>"}, {"location": "sys/net/#disconnect", "title": "disconnect()", "text": "<p>Disconnects the session. Disconnecting a listener will disconnect all sessions the listener is a parent of.</p>"}, {"location": "sys/net/#certificatefile", "title": "certificate([file])", "text": "<p>Sets $net instance to SSL mode with certificate file.</p> <p>Use certificate() to revert back to non-SSL.</p> <p>See SSL_CTX_use_certificate_chain_file.</p>"}, {"location": "sys/net/#privatefile-passop-param", "title": "private(file [,passOp [,param]])", "text": "<p>Server in SSL mode requires a private key file. </p> <p>If the private key file is password protected, also provide an $OP for the SSL routines to request the password. If a param is added, the callback will include the param. </p> <p>See SSL_CTX_use_PrivateKey_file.</p>"}, {"location": "sys/net/#trustedfile-path", "title": "trusted(file, path)", "text": "<p>See SSL_CTX_load_verify_locations.</p>"}, {"location": "sys/net/#verify", "title": "verify()", "text": "<p>Call after connecting with SSL.</p> <p>Returns a list:     result     certificate</p> <p>See the following for result codes: https://www.openssl.org/docs/man1.0.2/man1/verify.html</p> <p>Use decode(\"PEM\") to decode the certificate. <pre><code>&gt; x = n2.verify();\n&gt; x.certificate.decode(\"PEM\");\n</code></pre></p>"}, {"location": "sys/net/#chain", "title": "chain()", "text": "<p>Certificate chain.</p> <p>Use decode(PEM) to decode. <pre><code>&gt; x = n2.chain();\n&gt; x[0].decode(\"PEM\");\n</code></pre></p>"}, {"location": "sys/net/#host", "title": "host()", "text": "<p>After running the sample in onlisten, try the following. <pre><code>n.host();\n{\"url\":\":12345\",\"host\":\"computer name\",\"ip\":\"XX.XX.XX.XX\",\"port\":12345,\"family\":2,\"connected\":0,\"bound\":1}\n</code></pre></p>"}, {"location": "sys/net/#sendmessage", "title": "send(message)", "text": "<p>See example in onlisten.</p> <p>NOTE: If using SSL and the remote system breaks the connection, first send will return no error. The second send will return an error. This is not the case for read - where the first read after a broken connection will return an error and close the connection.</p>"}, {"location": "sys/net/#receive", "title": "receive()", "text": "<p>Blocks until data is received. Use nreceive() first to verify data exists. Or use onreceive.</p> <p>See example in onlisten.</p>"}, {"location": "sys/net/#pending", "title": "pending()", "text": "<p>Number of bytes that can be received.</p> <p>If an SSL connection, the byte count will be what is pending in the SSL encrypted buffer, which is different than the unencrypted data. </p> <p>See example in onlisten.</p>"}, {"location": "sys/net/#onreceivehandler", "title": "onreceive(handler)", "text": "<p>Handler will be called when data is received.</p> <pre><code>receiveHandler = op(netSession,message,hasmore)\n{\n    netSession.data += message;\n    if (hasmore==0)\n    {\n        (netSession.data+\"\\n\").echo();\n        (@&lt;prompt&gt;)();\n        netSession.data = \"\";\n    };\n};\n\nn2 = $net();\nn2.connect('localhost:12345');\nn2.onreceive(receiveHandler);\nn2.send('POST / HTTP/1.1\\r\\nContent-Type: application/json\\r\\n\\r\\n{try:55}');\nn2.send('POST / HTTP/1.1\\r\\nContent-Type: application/json\\r\\n\\r\\n{try:400}');\nn2.disconnect();\n</code></pre>"}, {"location": "sys/net/#httpread", "title": "httpread()", "text": ""}, {"location": "sys/net/#httpsendmethodentityheaderbody", "title": "httpsend(method,entity,header,body)", "text": ""}, {"location": "sys/net/#httpmessageraw", "title": "httpmessage(raw)", "text": ""}, {"location": "sys/sys/", "title": "$sys", "text": "<p>The <code>$sys</code> object provides general utility functions that are useful but don't belong in the native language syntax. These functions offer system-level operations, environment access, script compilation, and dynamic evaluation capabilities.</p>"}, {"location": "sys/sys/#overview", "title": "Overview", "text": "<p><code>$sys</code> contains utility functions for: - Type introspection - Getting object types and descriptions - Environment management - Accessing system variables and platform information - Script compilation - Pre-compiling scripts for performance - Dynamic evaluation - Running scripts with parameters (Grapa's core meta-programming capability) - System timing - Sleep and delay operations</p>"}, {"location": "sys/sys/#functions", "title": "Functions", "text": ""}, {"location": "sys/sys/#typeobject", "title": "type(object)", "text": "<p>Returns the type of the specified object.</p> <p>Parameters: - <code>object</code> - Any Grapa object or value</p> <p>Returns: <code>$STR</code> - The type name (e.g., <code>$INT</code>, <code>$STR</code>, <code>$FLOAT</code>, <code>$ARRAY</code>)</p> <p>Example: <pre><code>$sys().type(5);\n$INT\n\n$sys().type(\"hello\");\n$STR\n\n$sys().type([1,2,3]);\n$ARRAY\n</code></pre></p>"}, {"location": "sys/sys/#describeobject", "title": "describe(object)", "text": "<p>Status: Not yet implemented</p> <p>Will provide detailed information about objects beyond just their type. For example: - Table objects: field definitions, record counts, storage type - File objects: current directory, file system type - Array objects: dimensions, element types - Custom objects: property descriptions, method signatures</p> <p>Parameters: - <code>object</code> - Any Grapa object</p> <p>Returns: <code>$STR</code> - Detailed object description (when implemented)</p>"}, {"location": "sys/sys/#getenvtype", "title": "getenv(type)", "text": "<p>Gets environment variables and system information.</p> <p>Parameters: - <code>type</code> - Environment variable name or system constant</p> <p>Returns: Value of the environment variable or system information</p> <p>Supported Environment Types:</p> Type Description Example Return <code>$PATH</code> System PATH environment variable <code>\"C:\\Windows\\System32;C:\\Windows\"</code> <code>$STATICLIB</code> Static library path <code>\"lib/grapa\"</code> <code>$ARGCIN</code> Command line argument count <code>3</code> <code>$ARGV</code> Command line arguments array <code>[\"grapa.exe\", \"script.grc\", \"param\"]</code> <code>$LIB</code> Library directory path <code>\"lib\"</code> <code>$BIN</code> Binary directory path <code>\"bin\"</code> <code>$NAME</code> Program name <code>\"grapa\"</code> <code>$WORK</code> Working directory <code>\"C:\\Users\\user\\project\"</code> <code>$HOME</code> Home directory <code>\"C:\\Users\\user\"</code> <code>$TEMP</code> Temporary directory <code>\"C:\\Users\\user\\AppData\\Local\\Temp\"</code> <code>$VERSION</code> Grapa version information <code>{\"major\":0,\"minor\":0,\"micro\":2,\"releaselevel\":\"alpha\",\"serial\":63,\"date\":2020-04-24T16:30:37.000000}</code> <code>$LICENCE</code> License information <code>\"Apache License 2.0\"</code> <code>$PLATFORM</code> Platform compilation flags See platform values below <p>Note: Any value not starting with <code>$</code> will be directed to the native OS <code>getenv()</code> function.</p> <p>Example: <pre><code>$sys().getenv($VERSION);\n/* Returns: {\"major\":0,\"minor\":0,\"micro\":2,\"releaselevel\":\"alpha\",\"serial\":63,\"date\":2020-04-24T16:30:37.000000} */\n\n$sys().getenv($HOME);\n/* Returns: C:\\Users\\matichuk */\n\n$sys().getenv(\"USERNAME\");\n/* Returns: matichuk */\n</code></pre></p> <p>Platform Values for $PLATFORM: - Operating Systems: <code>__APPLE__</code>, <code>_WIN32</code>, <code>_WIN64</code>, <code>__linux__</code>, <code>__ANDROID__</code> - Compilers: <code>_MSC_VER</code>, <code>_MSC_FULL_VER</code>, <code>__GNUC__</code>, <code>__GNUC_MINOR__</code>, <code>__clang__</code>, <code>__MINGW32__</code>, <code>__MINGW64__</code> - Architectures: <code>__i386__</code>, <code>__x86_64__</code>, <code>__arm__</code>, <code>__ARM_ARCH_5T__</code>, <code>__ARM_ARCH_7A__</code>, <code>__powerpc64__</code>, <code>__aarch64__</code></p>"}, {"location": "sys/sys/#putenvtype-value", "title": "putenv(type, value)", "text": "<p>Sets environment variables and system information.</p> <p>Parameters: - <code>type</code> - Environment variable name or system constant - <code>value</code> - New value to set</p> <p>Returns: <code>$BOOL</code> - <code>true</code> if successful, <code>false</code> if failed</p> <p>Example: <pre><code>$sys().putenv(\"CUSTOM_VAR\", \"my_value\");\ntrue\n\n$sys().getenv(\"CUSTOM_VAR\");\nmy_value\n</code></pre></p> <p>Note: Like <code>getenv()</code>, any value not starting with <code>$</code> will be directed to the native OS <code>putenv()</code> function.</p>"}, {"location": "sys/sys/#compilefscriptfilename-compiledfilename", "title": "compilef(scriptfilename, compiledfilename)", "text": "<p>Compiles a Grapa script file and saves the compiled version to disk.</p> <p>Parameters: - <code>scriptfilename</code> - Path to the source script file - <code>compiledfilename</code> - Path where the compiled script will be saved</p> <p>Returns: <code>$BOOL</code> - <code>true</code> if compilation successful, <code>false</code> if failed</p> <p>Purpose: Pre-compiling scripts improves execution performance by avoiding parsing overhead at runtime.</p> <p>Example: <pre><code>$sys().compilef(\"script.grc\", \"script.grz\");\ntrue\n</code></pre></p>"}, {"location": "sys/sys/#compilescript", "title": "compile(script)", "text": "<p>Compiles a Grapa script in memory.</p> <p>Parameters: - <code>script</code> - Script text to compile</p> <p>Returns: Compiled script object that can be executed with <code>$sys().eval()</code></p> <p>Example: <pre><code>/* Compile a script */\ncompiled = $sys().compile(\"a = 5 + 3; a.echo();\");\n\n/* Execute the compiled script using eval() */\n$sys().eval(compiled);\n/* Result: 8 */\n\n/* Direct execution doesn't work */\ncompiled();\n/* Result: {} (empty result) */\n</code></pre></p> <p>Note: Compiled objects must be executed using <code>$sys().eval()</code> rather than direct function calls.</p>"}, {"location": "sys/sys/#relationship-between-compile-and-op", "title": "Relationship Between compile() and op()", "text": "<p>Both <code>$sys().compile()</code> and <code>op()</code> create execution trees, but with different interfaces:</p> <pre><code>/* Using $sys().compile() */\ncompiled = $sys().compile(\"a = 5 + 3; a.echo();\");\n$sys().eval(compiled);\n/* Result: 8 */\n\n/* Using op() - direct execution */\ndirect_op = op()(\"a = 5 + 3; a.echo();\");\ndirect_op();\n/* Result: 8 */\n\n/* Both create similar execution trees */\ncompiled;\n/* Result: @&lt;[op,@[@&lt;assign,{a,@&lt;add,{5,3}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{}&gt; */\n\ndirect_op;\n/* Result: @&lt;[op,@[@&lt;assign,{a,@&lt;add,{5,3}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{}&gt; */\n</code></pre> <p>Key Differences: - <code>$sys().compile()</code>: Creates compiled object that requires <code>$sys().eval()</code> for execution - <code>op()</code>: Creates function that can be called directly - Both: Generate the same underlying execution tree structure - Performance: Both benefit from compile-time optimization</p>"}, {"location": "sys/sys/#evalscript-sparams-srule-sprofile", "title": "eval(script, sparams={}, srule=\"\", sprofile=\"\")", "text": "<p>Evaluates a script with optional parameters, rules, and profile. This is one of Grapa's most powerful features, enabling dynamic code execution and meta-programming.</p> <p>Parameters: - <code>script</code> - Script string or compiled $OP object - <code>sparams</code> - Parameter object (default: <code>{}</code>) - <code>srule</code> - Custom rule set (default: <code>\"\"</code>) - <code>sprofile</code> - Profile configuration (default: <code>\"\"</code>)</p> <p>Returns: Result of script execution</p> <p>Examples: <pre><code>/* Evaluate simple script */\nresult = $sys().eval(\"x = 5 + 3; x\");\n/* Result: 8 */\n\n/* Evaluate with parameters */\nresult = $sys().eval(\"x + y\", {\"x\": 5, \"y\": 3});\n/* Result: 8 */\n\n/* Evaluate complex expression */\nresult = $sys().eval(\"(a + b) * c\", {\"a\": 2, \"b\": 3, \"c\": 4});\n/* Result: 20 */\n\n/* Evaluate compiled $OP object */\ncompiled = $sys().compile(\"a + b\");\nresult = $sys().eval(compiled, {\"a\": 10, \"b\": 20});\n/* Result: 30 */\n</code></pre></p> <p>\u26a0\ufe0f Important Note: <code>$sys().eval()</code> does NOT work with <code>.grz</code> files. To execute <code>.grz</code> files, use: <pre><code>/* Correct method for .grz files */\n$file().get(\"file.grz\").decode(\"ZIP-GRAPA\")[\"op\"]();\n</code></pre></p>"}, {"location": "sys/sys/#sleepms", "title": "sleep(ms)", "text": "<p>Pauses execution for the specified number of milliseconds.</p> <p>Parameters: - <code>ms</code> - Number of milliseconds to sleep (must be <code>$INT</code>)</p> <p>Returns: <code>null</code></p> <p>Purpose: Useful for timing, rate limiting, and synchronization in multi-threaded applications.</p> <p>Example: <pre><code>\"Starting...\".echo();\nStarting...\n$sys().sleep(1000);  /* Sleep for 1 second */\n\"Finished!\".echo();\nFinished!\n</code></pre></p>"}, {"location": "sys/sys/#usage-patterns", "title": "Usage Patterns", "text": ""}, {"location": "sys/sys/#environment-variable-management", "title": "Environment Variable Management", "text": "<pre><code>/* Get system information */\nversion = $sys().getenv($VERSION);\nplatform = $sys().getenv($PLATFORM);\n\n/* Set custom environment variables */\n$sys().putenv(\"DEBUG_MODE\", \"true\");\n$sys().putenv(\"LOG_LEVEL\", \"verbose\");\n</code></pre>"}, {"location": "sys/sys/#script-compilation-workflow", "title": "Script Compilation Workflow", "text": "<pre><code>/* Compile a script file for faster execution */\nif ($sys().compilef(\"my_script.grc\", \"my_script.grz\")) {\n    /* Load and execute compiled script */\n    compiled = $file().get(\"my_script.grz\");\n    result = $sys().eval(compiled);\n}\n\n/* Compile and execute in-memory scripts */\ncompiled = $sys().compile(\"x = 10; y = 20; x + y;\");\nresult = $sys().eval(compiled);\n/* Result: 30 */\n</code></pre>"}, {"location": "sys/sys/#dynamic-script-evaluation", "title": "Dynamic Script Evaluation", "text": "<pre><code>/* Evaluate user-provided expressions safely */\nuser_input = \"2 * (3 + 4)\";\ntry {\n    result = $sys().eval(user_input);\n    (\"Result: \" + result).echo();\n} catch (error) {\n    \"Invalid expression\".echo();\n}\n</code></pre>"}, {"location": "sys/sys/#performance-timing", "title": "Performance Timing", "text": "<pre><code>/* Measure execution time */\nstart_time = $TIME().utc();\n/* ... perform operations ... */\n$sys().sleep(100);  /* Simulate work */\nend_time = $TIME().utc();\nelapsed_ms = ((end_time - start_time) / 1000000).int();\n(\"Execution time: \" + elapsed_ms + \" ms\").echo();\n</code></pre>"}, {"location": "sys/sys/#execution-tree-creation-and-optimization", "title": "Execution Tree Creation and Optimization", "text": "<pre><code>/* Create execution trees with different methods */\nscript = \"result = input * 2 + 1; result\";\n\n/* Method 1: Using $sys().compile() */\ncompiled = $sys().compile(script);\n$sys().eval(compiled, {\"input\": 5});\n/* Result: 11 */\n\n/* Method 2: Using op() */\ndirect_func = op(\"input\"=0)(script);\ndirect_func(5);\n/* Result: 11 */\n\n/* Method 3: Using op() with block syntax */\nblock_func = op(\"input\"=0){result = input * 2 + 1; result};\nblock_func(5);\n/* Result: 11 */\n\n/* View execution trees */\ncompiled;\n/* Shows: @&lt;[op,@[@&lt;assign,{result,@&lt;add,{@&lt;mul,{@&lt;var,{input}&gt;},2}&gt;},1}&gt;],@&lt;var,{result}&gt;]],{}&gt; */\n\ndirect_func;\n/* Shows: @&lt;[op,@[@&lt;assign,{result,@&lt;add,{@&lt;mul,{@&lt;var,{input}&gt;},2}&gt;},1}&gt;],@&lt;var,{result}&gt;]],{\"input\":0}&gt; */\n</code></pre>"}, {"location": "sys/sys/#advanced-compilation-patterns", "title": "Advanced Compilation Patterns", "text": "<pre><code>/* Compile-time optimization examples */\nsimple = $sys().compile(\"5 + 3\");\n$sys().eval(simple);\n/* Result: 8 (constant folding applied) */\n\ncomplex = $sys().compile(\"x = 5; y = 3; x + y\");\n$sys().eval(complex);\n/* Result: 8 (assignment and addition preserved) */\n\n/* Dynamic compilation with parameters */\ntemplate = \"result = base * multiplier + offset\";\ndynamic_compiled = $sys().compile(template);\n$sys().eval(dynamic_compiled, {\"base\": 10, \"multiplier\": 2, \"offset\": 5});\n/* Result: 25 */\n</code></pre>"}, {"location": "sys/sys/#error-handling", "title": "Error Handling", "text": "<p>Most <code>$sys</code> functions return appropriate error values when operations fail: - <code>getenv()</code> returns <code>null</code> for non-existent variables - <code>putenv()</code> returns <code>false</code> for invalid operations - <code>compilef()</code> and <code>compile()</code> return <code>false</code> for compilation errors - <code>eval()</code> throws exceptions for script execution errors</p>"}, {"location": "sys/sys/#performance-considerations", "title": "Performance Considerations", "text": "<ul> <li>Compiled scripts execute significantly faster than interpreted scripts</li> <li>Environment variable access is cached for performance</li> <li>Dynamic evaluation has overhead - use sparingly in performance-critical code</li> <li>Sleep operations are precise to millisecond resolution</li> </ul>"}, {"location": "sys/thread/", "title": "$thread", "text": "<p>Grapa is fully thread safe in all supported environments (command line, Grapa shell, and Python/GrapaPy). All built-in operations\u2014including map, filter, reduce, $thread, and $net\u2014are safe to use concurrently. Users do not need to take any special precautions for thread safety in these environments.</p> <p>Design Note: - All variable and data structure updates in Grapa are internally synchronized (locked) at the C++ level. This includes variables, tables, and all core datatypes. - You will never encounter crashes or corruption from concurrent access in normal Grapa usage. - However, if your program logic allows multiple threads to read and write the same variable or data structure, you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Note: Only if Grapa is integrated directly into a non-thread-safe C++ host (not anticipated for normal users) would additional thread safety considerations arise.</p>"}, {"location": "sys/thread/#locking-and-shared-state", "title": "Locking and Shared State", "text": "<ul> <li>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>.</li> <li>To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access.</li> <li>Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like an array or scalar) will return an error.</li> </ul> <p>Canonical Example: <pre><code>lock_obj = $thread();\nlock_obj.lock();\n/* ... perform thread-safe operations on shared data ... */\nlock_obj.unlock();\n</code></pre></p> <p>If you want to protect access to a shared variable, use a <code>$thread()</code> lock object for that purpose.</p>"}, {"location": "sys/thread/#best-practices-for-parallelism", "title": "Best Practices for Parallelism", "text": "<ul> <li>Prefer passing data by value or using thread-local variables.</li> <li>Minimize shared mutable state between threads. If you must share, use a <code>$thread()</code> lock object to guard access.</li> <li>Immutable data (or data marked <code>const</code>) is safe to share, but note that <code>const</code> is for performance/caching, not for locking (see below).</li> <li>For compile-time constants, use <code>static</code> (see Function Operators).</li> </ul>"}, {"location": "sys/thread/#reference-locking-methods-on-thread-objects", "title": "Reference: Locking Methods (on $thread objects)", "text": "<ul> <li><code>trylock()</code>: Attempts to acquire a lock, returns immediately.</li> <li><code>lock()</code>: Acquires a lock, waits if necessary.</li> <li><code>unlock()</code>: Releases the lock.</li> <li><code>wait()</code>, <code>signal()</code>, <code>waiting()</code>: Thread coordination primitives.</li> </ul>"}, {"location": "sys/thread/#thread-creation-and-usage", "title": "Thread Creation and Usage", "text": "<p>Provides a thread library, cross functional with all platforms supported.</p>"}, {"location": "sys/thread/#type", "title": "type()", "text": "<p>$thread</p>"}, {"location": "sys/thread/#startrunop-input-doneop", "title": "start(runOp, input, doneOp)", "text": "<p>Starts the runOp in the background, passing paramList. When the thread exists, doneOp is called. All 3 inputs are copied, as the originals are likely to go away after running the start command. So if an instance of object is passed in, the thread will end up using a copied instance and not the original instance.</p> <p>The thread is run from the same namespace as where it is called. To use a shared object instance, access the variable from within the thread rather than passing in the variable. Or pass in the $ID for the variable and difference the variable from the thread (which essentially does the same thing as a variable lookup but allows a different variable name to be used). </p> <p>If accessing shared resources from within a thread, take care and use thread safe logic, such as a <code>$thread()</code> lock object.</p> <p>Example: <pre><code>myRun = op(input) {\"myRun:\".echo();$sys().echo(@$local); input.c = input.a+input.b; \"\\n\".echo(); @$local;};\nmyDone = op(input,result) {\"myDone:\".echo();$sys().echo(@$local); \"\\n\".echo();};\nt = $thread();\nt.start(myRun,{a:1,b:2},myDone);\n</code></pre></p> <p>Output: <pre><code>myRun:{\"input\":{\"a\":1,\"b\":2}}\nmyDone:{\"input\":{\"a\":1,\"b\":2,\"c\":3},\"result\":{\"input\":{\"a\":1,\"b\":2,\"c\":3}}}\n</code></pre></p> <p>The input parameter is passed to both the run op and done op. The done op also receives any output from the run op.</p>"}, {"location": "sys/thread/#other-thread-methods", "title": "Other Thread Methods", "text": "<ul> <li><code>stop()</code>: Stops the thread.</li> <li><code>started()</code>: Indicates the running state of the thread.</li> <li><code>suspend()</code>: Suspends the thread. If the thread is processing a queue and the queue is empty, put the thread in suspend mode. Then after pushing data onto the queue, call resume to have the thread resume processing.</li> <li><code>resume()</code>: See suspend.</li> <li><code>suspended()</code>: Indicates whether the thread is in a suspended state.</li> </ul>"}, {"location": "sys/thread/#see-also", "title": "See Also", "text": "<ul> <li>Function Operators: static and const</li> <li>Parallelism Examples</li> </ul>"}, {"location": "type/ARRAY/", "title": "$ARRAY", "text": "<p>References: - $ARRAY object - $LIST object - $VECTOR object - $OBJ object</p> <p>Same as $LIST, but without the entry labels.</p> <p>Supports an offset search if the contents of the array are $ID or $STR or $ARRAY values. <pre><code>&gt; months = [\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\"];\n&gt; months[\"MAR\"];\n2\n&gt; months[\"FFF\"];\n{\"err\":-1}\n&gt; months[\"FFF\"].iferr(-1);\n-1\n</code></pre></p> <p>If the elements are $ARRAY type, the first item of the array is used for the match. <pre><code>&gt; x = [[\"a\",496],[\"b\",964],[\"c\",221]];\n&gt; x.\"b\";\n1\n&gt; x[x.\"b\"];\n[\"b\",964]\n&gt; x.g\n{\"err\":-1}\n</code></pre></p> <p>There isn't currently built in support for searching for an $ARRAY or $LIST item within an $ARRAY. Currently, this would require an itterator to scan and compare, or the use of a hash of the contents as a key.</p> <p>Parallelism Note: Array operations like <code>.map()</code> and <code>.filter()</code> are parallel by default and hardened for ETL/data processing workloads.</p>", "tags": ["user", "highlevel"]}, {"location": "type/BOOL/", "title": "$BOOL", "text": "<p>References:</p> <p>The following are equivalent in comparisons: - True: true, 1 - False: false, null</p> <p>Examples: Commands | Results ------------ | ------------- 1==true; | true null==false; | true 1==false; | false \"55\"==(55).str(); | true \"5.54\"==(5.54).str(); | true</p>"}, {"location": "type/CODE/", "title": "$CODE", "text": "<p>/ Design Influences: $CODE, as a sequence of $OP items, draws inspiration from Lisp's code-as-data paradigm, supporting composable and introspectable execution trees. This approach is chosen to make Grapa accessible and powerful for a broad audience, with a special focus on usability for Python programmers and educators. / A sequence of $OP items to be processed in sequence.  Normally you would use $CODE directly. It is typically embedded in an $OP type. The planner typically wraps the result in an $OP along with parameter handling for the function - but this could change at some point where it could be either $OP or $CODE. </p> <p>Example: Assigns 2 to a, than evaluates a3, the result is 6 Commands | Results ------------ | ------------- f=@[1,2];f(); | 2 f=op(){a=2;a3;};f; | @&lt;[op,@[@,@&lt;mul,{@,3}&gt;]],{}&gt; f(); | 6"}, {"location": "type/ERR/", "title": "$ERR", "text": "<p>References: - $ERR object - $OBJ object</p> <p>If an operation results in an error, the $ERR data type is returned. Check using the type function: if (@result.type()==$ERR) something;</p> <p>Under the hood, the $ERR type is a $LIST, and the same commands can be used to get more details on the error.</p> <pre><code>&gt; (1/0).type()==$ERR\ntrue\n</code></pre>"}, {"location": "type/ERR/#part-of-obj", "title": "Part of $OBJ", "text": ""}, {"location": "type/ERR/#iferrnew", "title": "iferr(new)", "text": "<p>If value is $ERR type, the new is used. Otherwise the value is used.</p> <pre><code>(10/2).iferr(55) -&gt; 5\n(10/0).iferr(55) -&gt; 55\n</code></pre>"}, {"location": "type/FLOAT/", "title": "$FLOAT", "text": "<p>References:</p> <p>Supports both fix and float format. Fix will apply the precision to just the decimal. Float will not restrict to the decimal, supporting large exponents with a specified precision. Each number maintains it's own precision, which is used in math operations with numbers of other precision. Some math operations may convert an input from one format to another. For example, passing in a float to a trig function will produce a fix format result. Floats also support specifying \"extra\" bits to apply to the calculations to reduce error propagation (the default is 10 bits). </p> <p>Example: <pre><code>&gt; 5.13\n5.13\n</code></pre></p> <p>You can also create using hex format: <pre><code>&gt; -0x4.5\n-4.3125\n</code></pre></p> <p>Or binaary format: <pre><code>&gt; 0b101.11\n5.75\n</code></pre></p> <p>By default, all floats are \"float\" format. To change formats use the fix() and float() routines, where both the precision and the \"extra\" bits can also be specified. The parsing engine will set the precision to the system default, which is 128 bits. There are two ways to change this. First, change the system default using the setfloat and setfix routines. Second, pass in a $STR to the fix or float routines. For example:</p> <pre><code>&gt;\"3.5\".float()/0.511\n6.849315068493150684931506849315\n\n&gt;\"3.5\".float(300,6)/0.511\n6.849315068493150684931506849315068493150684931\n\n&gt;(\"3.5\".float(300,6)/(0.511).float(300,6))\n6.84931506849315068493150684931506849315068493150684931560202071220533200564\n</code></pre> <p>Convert to other formats: <pre><code>&gt; (30.75).hex()\n1E.C\n\n&gt; (30.75).bin()\n11110.11\n\n&gt; (30.75).int()\n30\n</code></pre></p> <p>Bit shifts: <pre><code>&gt; (30.75) &gt;&gt; 4\n1.921875\n\n&gt; (30.75) &lt;&lt; 4\n492.0\n</code></pre></p> <p>The binary represenation for a grapa $FLOAT includes the items returned from the decode method - sign, trunc, fix, exp, max, extra, data. For more details on the binary format, see theGrapaFloat implementation.</p> <pre><code>&gt; (30.75).raw()\n0x00048100077B\n\n&gt; \"30.75\".float(300,6).decode(\"FLOAT\")\n{\"sign\":false,\"trunc\":false,\"fix\":false,\"exp\":4,\"max\":300,\"extra\":6,\"data\":123}\n\n&gt;\"30.75\".float(300,6).decode(\"FLOAT\").data.raw()\n0x7B\n\n&gt;\"3.5\".float(300,6)/0.511\n6.849315068493150684931506849315068493150684931\n\n&gt;(\"3.5\".float(300,6)/0.511).raw()\n0x200281370A06D96CB65B2D96CB65B2D96CB65B2D96CB65B2D96CB65B3AAB\n\n&gt;(\"3.5\".float(300,6)/0.511).decode(\"FLOAT\")\n{\"sign\":false,\"trunc\":true,\"fix\":false,\"exp\":2,\"max\":183,\"extra\":10,\"data\":42993847502648498382436913857586756274673667427835852831403}\n\n&gt;(\"3.5\".float(300,6)/0.511).decode(\"FLOAT\").data.raw()\n0x6D96CB65B2D96CB65B2D96CB65B2D96CB65B2D96CB65B3AAB\n</code></pre>"}, {"location": "type/ID/", "title": "$ID", "text": "<p>References:</p> <p>Any identifier (starts with a letter and can follow with letters or numbers will be initialized as an $ID. And an $ID can be used for many things, including associating a value. Optionally, the '@' symbol is used to de-reference an $ID to retrieve the data stored - which is useful when being used in a location that requires and $ID (such as a label). When used in a location that requires a value, an $ID will be automatically dereferenced. </p> <p>Example of using an $ID as a variable: <pre><code>&gt; x = \"hi\"\n\n&gt; x\nhi\n\n&gt; x + \" test\"\nhi test\n\n&gt; {x:\"test\"}\n{\"x\":\"test\"}\n\n&gt; {@x:\"test\"}\n{\"hi\":\"test\"}\n</code></pre></p>"}, {"location": "type/INT/", "title": "$INT", "text": "<p>References:</p> <ul> <li>$INT object</li> <li>$math object</li> <li>$OBJ object</li> </ul> <p>Supports signed and unsigned. Unsigned is essentially an $INT that is not negative. Given this is unlimited precision, a separate $UINT type is not required (grapa originally had one, but it's been removed as it's essentially redundant and adds unnecessary complexity). The reason other languages have a $UINT type is to handle to bit overflow issue where the high order bit may become set during math operations. In grapa, when the high order bit is set, it automatically increases the precision and there is no overflow. Still, there is sometimes a need for specific $UINT type handling of raw bytes, and to support this there is a uint() function to ensure that a raw byte stream with a high order bit is not incorrectly interpreted as a negative number. </p> <p>The $INT class inherits $math class - see the the $math class for additional functions supported.</p> <p>Examples: Commands | Results ------------ | ------------- 52322; | 52322 \"52322\".int(); | 52322 (52322).raw(); | 0x0CC62 123456789**123; | 180443894485522835714954192172999280028845717532682776236340940102536698145222569108484463188835141501257568786614496374890490631237110580592001682129147574651845715171456148359301092015447205623057495772659564027213301182232076238590331900681806078027178740976490955033321310868454820309128358774485790967770683032944024352558539124788679067434454263656340662912379366253271751953736731074819372491000795297394853010105837025484346139393089929535058486260828830048634323191537485125711757553017086494262086507174576160642886415424336562785001644174485982226421972489721110767356064962137106505728778418700556641023076586539800506459911177905554903899443902042199874341653922049139720885160820424705059531702449496414152206583904252440335125073512355264351679192059781951740756716496372272101373104569806788535169770019927578333904122000732663242308371786294445444694565563343590247938552086658203292972070407426713686306344322058332865613102498986620473134625473086906778038872631750464721441869</p> <p>For a large number that requires less precisiion, use $FLOAT instead of $INT. </p>"}, {"location": "type/LIST/", "title": "$LIST", "text": "<p>References:</p> <p>A $LIST is basically JSON, but extended to include all the various grapa data types. </p> Action Example Result Create {a:1, b:2, c:3} {\"a\":1,\"b\":2,\"c\":3} Access {a:1, b:2, c:3}.a{a:1, b:2, c:3}[1]{a:1, b:2, c:3}[-1] 113 Append x = {a:1, b:2};x += (c:3);x; {\"a\":1, \"b\":2, \"c\":3} Append x = {a:1, b:2};x ++= {c:3,d:4};x; {\"a\":1, \"b\":2, \"c\":3, \"d\":4} Insert x = {a:1, b:2};x += (c:3) x[0];x; {\"c\":3,\"a\":1,\"b\":2} Count {a:1, b:2, c:3}.len() 3 Remove x = {a:1, b:2, c:3};x -= x[1];x; {\"a\":1, \"c\":3}"}, {"location": "type/OP/", "title": "$OP", "text": "<p>/ Design Influences: Grapa's $OP and $CODE types are inspired by Lisp's list-based, lambda/bytecode execution model, enabling flexible, composable, and introspectable code structures. This design supports advanced meta-programming and dynamic language features, making Grapa inviting and usable for a broad audience\u2014including Python users, educators, and language researchers. The overarching goal is to make Grapa (and GrapaPy) as accessible and powerful as possible for the widest range of users. /</p> <p>$OP is Grapa's core execution type - it represents both compiled code and executable functions. Unlike traditional bytecode, $OP objects are human-readable execution trees that can be directly created, manipulated, and executed. This makes Grapa's dynamic code execution capabilities superior to most other languages.</p>"}, {"location": "type/OP/#what-is-op", "title": "What is $OP?", "text": "<p>$OP is Grapa's equivalent of both a function and compiled bytecode, but represented as an executable tree structure. It's the foundation of Grapa's meta-programming capabilities, allowing you to:</p> <ul> <li>Compile code at runtime: <code>op()(\"script\")</code> creates an executable $OP</li> <li>Execute dynamic code: <code>$sys().eval(\"expression\")</code> evaluates strings as code</li> <li>Manipulate execution trees: Direct access to the compiled representation</li> <li>Create functions from data: Generate code based on configuration or user input</li> <li>Optimize at compile time: Constant folding and expression simplification</li> </ul>"}, {"location": "type/OP/#core-capabilities", "title": "Core Capabilities", "text": ""}, {"location": "type/OP/#dynamic-code-execution", "title": "Dynamic Code Execution", "text": "<pre><code>/* Direct string-to-function compilation */\nfunc = op()(\"'Hello, World!'.echo();\");\nfunc();  /* Output: Hello, World! */\n\n/* System-level evaluation */\nresult = $sys().eval(\"x + y\", {\"x\": 5, \"y\": 3});\nresult.echo();  /* 8 */\n\n/* Compiled execution for performance */\ncompiled = $sys().compile(\"input * 2 + offset\");\nresult = $sys().eval(compiled, {\"input\": 10, \"offset\": 5});\nresult.echo();  /* 25 */\n</code></pre>"}, {"location": "type/OP/#meta-programming", "title": "Meta-Programming", "text": "<pre><code>/* Generate functions from configuration */\noperations = [\"add\", \"sub\", \"mul\"];\nfuncs = {};\ni = 0;\nwhile (i &lt; operations.len()) {\n    op_name = operations.get(i);\n    code = \"a \" + op_name + \" b\";\n    funcs[op_name] = op(\"a\"=0, \"b\"=0)(code);\n    i += 1;\n}\n\n/* Execute generated functions */\nfuncs[\"add\"](5, 3).echo();  /* 8 */\nfuncs[\"mul\"](5, 3).echo();  /* 15 */\n</code></pre> <p>Understanding the inner workings of $OP is not necessary to use grapa - and this section can be skipped. This though is core to how grapa works, and an understanding is needed in order to extend the syntax of the language to support your own domain specific language extensions.</p>"}, {"location": "type/OP/#basic-op-creation-and-execution", "title": "Basic $OP Creation and Execution", "text": "<p>Examples: Commands | Results | Description ------------ | ------------- | ------------- (op(){4*2})(); | 8 | Creates $OP and executes. (@)(); | 8 | Same but using $OP directly."}, {"location": "type/OP/#adding-parameters-to-op", "title": "Adding Parameters to $OP", "text": "<p>Example: The op command is used for passing parameters into a function. When the op command is used, the name is replaced with an array where the first value is \"op\" and the second value is the function. This array is then followed by the parameter list. The parameters are used to initialize the namespace for the function.</p> Commands Results op(){1} @&lt;[op,1],{}&gt; op(a,b){a*b}; @&lt;[op,@&lt;mul,{@,@}&gt;],{a,b}&gt; op(){5%2}; @&lt;[op,@],{}&gt; op(){4*2}; @&lt;[op,8],{}&gt; <p>In the last example above, the compiler implemented an optimization where it recognized that multiplying two constants could be completed at compile time.</p>"}, {"location": "type/OP/#execution-tree-structure", "title": "Execution Tree Structure", "text": "<p>The <code>@&lt;[op,body],params&gt;</code> format represents the internal structure of a $OP:</p> <ul> <li><code>op</code> - Operation type identifier</li> <li><code>body</code> - The execution tree (can be nested operations)</li> <li><code>params</code> - Parameter namespace <code>{}</code> containing default values</li> </ul>"}, {"location": "type/OP/#tree-components", "title": "Tree Components", "text": "Component Description Example <code>@&lt;assign,{var,value}&gt;</code> Variable assignment <code>@&lt;assign,{a,5}&gt;</code> <code>@&lt;add,{left,right}&gt;</code> Addition operation <code>@&lt;add,{5,3}&gt;</code> <code>@&lt;var,{name}&gt;</code> Variable reference <code>@&lt;var,{a}&gt;</code> <code>@&lt;search,{object,method}&gt;</code> Method call <code>@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;</code>"}, {"location": "type/OP/#direct-execution-tree-creation-and-execution", "title": "Direct Execution Tree Creation and Execution", "text": "<p>You can create and execute $OP trees directly:</p> <pre><code>/* Create a simple execution tree */\ncompiled = op()(\"a = 5 + 3; a.echo();\");\n\n/* Execute the compiled function */\ncompiled();\n/* Result: 8 */\n\n/* View the execution tree */\ncompiled;\n/* Result: @&lt;[op,@[@&lt;assign,{a,@&lt;add,{5,3}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{}&gt; */\n\n/* Execute the tree directly */\n@&lt;[op,@[@&lt;assign,{a,@&lt;add,{5,3}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{}&gt;();\n/* Result: 8 */\n</code></pre>"}, {"location": "type/OP/#parameter-binding-and-namespace-management", "title": "Parameter Binding and Namespace Management", "text": "<p>$OP functions can have parameters with default values that create a namespace:</p> <pre><code>/* Create function with parameters and default values */\ncompiled = op(\"b\"=0,\"c\"=0)(\"a = 5 + b + c; a.echo();\");\n\n/* Execute with no parameters (uses defaults) */\ncompiled();\n/* Result: 5 */\n\n/* Execute with one parameter */\ncompiled(3);\n/* Result: 8 */\n\n/* Execute with two parameters */\ncompiled(3,1);\n/* Result: 9 */\n\n/* View the execution tree with parameter namespace */\ncompiled;\n/* Result: @&lt;[op,@[@&lt;assign,{a,@&lt;add,{@&lt;add,{5,@&lt;var,{b}&gt;}&gt;,@&lt;var,{c}&gt;}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{\"b\":0,\"c\":0}&gt; */\n\n/* Execute the tree directly with parameters */\n@&lt;[op,@[@&lt;assign,{a,@&lt;add,{@&lt;add,{5,@&lt;var,{b}&gt;}&gt;,@&lt;var,{c}&gt;}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{\"b\":0,\"c\":0}&gt;(3,2);\n/* Result: 10 */\n</code></pre>"}, {"location": "type/OP/#alternative-syntax-for-function-creation", "title": "Alternative Syntax for Function Creation", "text": "<p>You can also create functions using block syntax:</p> <pre><code>/* Using block syntax */\ncompiled = op(\"b\"=0,\"c\"=0){a = 5 + b + c; a.echo();};\n\n/* Execute with parameters */\ncompiled(3,4);\n/* Result: 12 */\n\n/* View the execution tree */\ncompiled;\n/* Result: @&lt;[op,@[@&lt;assign,{a,@&lt;add,{@&lt;add,{5,@&lt;var,{b}&gt;}&gt;,@&lt;var,{c}&gt;}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{\"b\":0,\"c\":0}&gt; */\n</code></pre>"}, {"location": "type/OP/#compile-time-optimization", "title": "Compile-Time Optimization", "text": "<p>The Grapa compiler performs various optimizations during tree building:</p>"}, {"location": "type/OP/#constant-folding", "title": "Constant Folding", "text": "<pre><code>op(){4*2}; | @&lt;[op,8],{}&gt;\n/* The compiler evaluates 4*2 at compile time */\n</code></pre>"}, {"location": "type/OP/#expression-simplification", "title": "Expression Simplification", "text": "<pre><code>op(){5+3}; | @&lt;[op,8],{}&gt;\n/* Simple arithmetic is computed at compile time */\n</code></pre>"}, {"location": "type/OP/#variable-assignment-optimization", "title": "Variable Assignment Optimization", "text": "<pre><code>op(){a=5; a*2}; | @&lt;[op,@[@&lt;assign,{a,5}&gt;,@&lt;mul,{@&lt;var,{a}&gt;,2}&gt;]],{}&gt;\n/* Assignment and multiplication preserved for runtime */\n</code></pre>"}, {"location": "type/OP/#execution-tree-interpretation", "title": "Execution Tree Interpretation", "text": "<p>When a $OP is executed, the interpreter:</p> <ol> <li>Creates namespace from the parameter list <code>{\"b\":0,\"c\":0}</code></li> <li>Binds parameters passed during execution to the namespace</li> <li>Traverses the tree executing each operation in sequence</li> <li>Returns the result of the last operation</li> </ol>"}, {"location": "type/OP/#tree-traversal-example", "title": "Tree Traversal Example", "text": "<pre><code>/* Tree: @&lt;[op,@[@&lt;assign,{a,@&lt;add,{5,3}&gt;}&gt;,@&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt;]],{}&gt; */\n\n/* Execution steps:\n   1. Create empty namespace {}\n   2. Execute @&lt;assign,{a,@&lt;add,{5,3}&gt;}&gt; \u2192 a = 8\n   3. Execute @&lt;search,{@&lt;var,{a}&gt;,@&lt;createlist,{@&lt;name,{echo,null}&gt;}&gt;}&gt; \u2192 8.echo()\n   4. Return result: 8\n*/\n</code></pre>"}, {"location": "type/OP/#advanced-usage-patterns", "title": "Advanced Usage Patterns", "text": ""}, {"location": "type/OP/#function-composition", "title": "Function Composition", "text": "<pre><code>/* Create base function */\nbase = op(x){x * 2};\n\n/* Create composed function */\ncomposed = op(x){base(x) + 1};\n\n/* Execute */\ncomposed(5);\n/* Result: 11 */\n</code></pre>"}, {"location": "type/OP/#dynamic-function-creation", "title": "Dynamic Function Creation", "text": "<pre><code>/* Create function from string */\nscript = \"result = input * 2; result\";\ndynamic_func = op(\"input\"=0)(script);\n\n/* Execute */\ndynamic_func(7);\n/* Result: 14 */\n</code></pre>"}, {"location": "type/OP/#function-storage-and-retrieval", "title": "Function Storage and Retrieval", "text": "<pre><code>/* Store function in table */\ntable = $file().table(\"ROW\");\ntable.mkfield(\"func\", \"OP\");\ntable.set(\"my_func\", op(x){x * x}, \"func\");\n\n/* Retrieve and execute */\nstored_func = table.get(\"my_func\", \"func\");\nstored_func(4);\n/* Result: 16 */\n</code></pre>"}, {"location": "type/OP/#performance-characteristics", "title": "Performance Characteristics", "text": "<ul> <li>Compiled functions execute faster than interpreted scripts</li> <li>Constant folding reduces runtime computation</li> <li>Tree optimization improves execution efficiency</li> <li>Parameter binding is efficient with namespace caching</li> <li>Direct tree execution bypasses parsing overhead</li> </ul>"}, {"location": "type/OP/#integration-with-other-types", "title": "Integration with Other Types", "text": "<p>$OP integrates with other Grapa types:</p> <ul> <li>$CODE: Sequences of $OP operations</li> <li>$RULE: Grammar rules that generate $OP trees</li> <li>$TABLE: Can store $OP objects as data</li> <li>$file: Can save/load compiled $OP objects</li> </ul> <p>See the section on syntax for additional examples.</p>"}, {"location": "type/RAW/", "title": "$RAW", "text": "<p>References:</p> <p>A $RAW represents raw bytes. Most data types can be converted to and from $RAW, providing the ability to make specific tweaks to data. For example, this is how time addition/subtraction is performed - by converting the $TIME into $RAW and then into an $INT, and than back to a $TIME. There are several examples of using raw in the documentation for the other data types.</p> <p>When displayed, the value is printed in hex form, but the value in memory is in raw. If you convert to hex(), the result will be a text version of the hex of the raw data.</p> <pre><code>&gt; \"hi\".raw();\n0x6869\n\n&gt; \"hi\".raw().int();\n26729\n\n&gt; (0x6869).raw().str();\nhi\n</code></pre>"}, {"location": "type/RULE/", "title": "$RULE", "text": "<p>/ Design Influences: Grapa's $RULE type is inspired by Prolog's executable BNF and logic programming paradigm, enabling dynamic, mutable grammars and rule-based execution. This design empowers users to experiment with language syntax and parsing, making Grapa especially valuable for educators, researchers, and anyone interested in language design. The overarching goal is to make Grapa (and GrapaPy) as inviting and usable as possible for the broadest audience. / References: - $RULE object</p> <p>This datatype is basis of the grapa language. The syntax of the language is implemented as a set of global rule variables that are accessible and changeable - making the grapa language syntax dynamically mutable, either globally, or modified within a specific function by creating local variable rules that override the global rules. Rules variables can also be defined to support parsing of a domain specific language, or defining a data ETL task as a language by defining the rules for the data and applying the data to the rules - in the same way a language would be defined.</p> <p>There are three basic steps: * Define the rules (rules may reference other rules) with code to execute for each rule option. * Apply raw data to the rule to generate an execution plan. * Execute the plan, with parameters if specified.</p> <p>Example system rule: <pre><code>&gt; @$start\nrule &lt;$command_list&gt; $SYSID(\"BE\") | &lt;$command_list&gt; ';' | &lt;$command_list&gt;\n</code></pre></p> <p>The above is the entry point to the grapa language. This entry point is a global variable that can be updated...so take caution as it is the default entry point all scripts. It is also possible to navigate the language syntax by looking up each rule that is lined from any other rule.</p> <p>Example of defining a custom rule, and applying the rule: <pre><code>&gt; x = rule $INT $INT {op(a:$1,b:$2){a*b}} | $INT {op(a:$1){a}}\n&gt; (op()(\"4\",x))()\n4\n\n&gt; (op()(\"4 3\",x))()\n12\n\n&gt; op()(\"4\",x)\n@&lt;[op,@&lt;[op,@&lt;var,{a}&gt;],{\"a\":4}&gt;],{}&gt;\n\n&gt; op()(\"4 3\",x)\n@&lt;[op,@&lt;[op,@&lt;mul,{@&lt;var,{a}&gt;,@&lt;var,{b}&gt;}&gt;],{\"a\":4,\"b\":3}&gt;],{}&gt;\n</code></pre></p> <p>To simplify creating rules that depend on matching on a predefined list of values, create a list and reference the list in the rules. If the rule matches, the value of the matched item is passed in as the token value.</p> <pre><code>&gt; t = {x:\"matched on x\",y:5};\n&gt; r = rule $INT @t $INT {op(a:$2){a}};\n&gt; (op()(\"1 x 2\",r))();\nmatched on x\n\n&gt; (op()(\"1 y 2\",r))();\n5\n</code></pre> <p>If the lookup needs to be against something other than a list (maybe checking a database or even a web service), an operation can be added to a rule token that will run at compile time if the rule matches. Note that this will be called during the planning phase (or compile time) every time the rule is evaluated - so take caution on attaching a heavy workload. The result of the operation will be used as the result of the token matched. </p> <pre><code>&gt; x = rule $STR {@&lt;lit,{$1}&gt;};\n&gt; r = rule $INT &lt;x,op(a:$1){a.len()}&gt; $INT {op(a:$2){a}};\n&gt; (op()(\"44 'x' 22\",r))();\n1\n</code></pre> <p>Rules can also be embedded. Unfortunately, the current grammar requires an operation for a rule if the rule is to return any value - it doesn't make any assumptions. So as of the current release an embedded rule of (x|y) would match on x or y, but with no operation attached to x or y the result would not produce an output for the match. In some future version, this will be addressed to return a default. For now, an operation needs to be inserted if you want a value to be returned.</p> <p>If the token handler returns an $ERR object, it will cause the rule to fail. So it not only has the ability to add additional logic to processing the token, is also can also serve as an additional component to the planning engine by validating the token against the intent of the rule - something that could not be done at a later phase and could only be done during the planning/compile phase. </p> <pre><code>&gt; r = rule $INT (x{@&lt;lit,{\"found x\"}&gt;}|y{@&lt;lit,{\"found y\"}&gt;}) $INT {op(a:$2){a}};\n&gt; (op()(\"44 y 22\",r))();\nfound y\n</code></pre> <p>If there is a well known end sequence, and you want to collect all the tokens in between, you can insert an empty rule. All of the tokens, including any white space, will be passed on. The risk of using this in a rule is that if the end token does not exist, all tokens will be processed in the empty rule. </p> <pre><code>&gt; r = rule $INT &lt;&gt; $INT {op(a:$2){a}};\n&gt; (op()(\"44 'x' 22\",r))();\n[\" \",\"x\",\" \"]\n</code></pre> <p>The stop rule for a catchall can be either a token, a rule reference, or an embedded rule.</p> <pre><code>&gt; e = rule $INT {@&lt;lit,{$1}&gt;} | $ID {@&lt;lit,{$1}&gt;};\n&gt; r = rule $INT &lt;&gt; &lt;e&gt; {op(a:$3){a}};\n&gt; (op()(\"44 'x' 22\",r))();\n22\n\n&gt; (op()(\"44 'x' hi\",r))();\nhi\n\n&gt; r = rule $INT &lt;&gt; ($INT{@&lt;lit,{$1}&gt;}|$ID{@&lt;lit,{$1}&gt;}) {op(a:$3){a}};\n&gt; (op()(\"44 'x' 22\",r))();\n22\n\n&gt; (op()(\"44 'x' hi\",r))();\nhi\n</code></pre> <p>A operation can also be associated with the empty rule above, which can process the tokens and either pass through the list, or pass through some transformed version. The following is an example f transforming.</p> <pre><code>&gt; r = rule $INT &lt;op(a:$1){a.len().str()+\" raw characters:\"+a.join(\"\")}&gt; $INT {op(a:$2){a}};\n&gt; (op()(\"44 'x' 22\",r))();\n3 raw characters: x\n</code></pre> <p>If the token handler returns an $ERR object, the corresponding rule option will fail and the next rule option will be evaluated. The following is an example of causing the first rule option to fail.</p> <pre><code>&gt; r = rule $INT &lt;op(a:$1){$ERR()}&gt; $INT {op(a:$2){a}} | $INT &lt;&gt; $INT {op(a:$2){a}};\n&gt; (op()(\"44 'x' 22\",r))();\n[\" \",\"x\",\" \"]\n</code></pre> <p>The catchall token can also be used to add support for comments in a grammar. The following is used in the grapa syntax. This rule is then inserted in places in the grammar where comments can be included. </p> <pre><code>$starcomment = rule ('/' '*') &lt;&gt; ('*' '/');\n</code></pre> <p>Rules can include both right recursion and left recursion.  The following is an example of right recursion. Note that an internal function \"prepend\" is used to build the list. This is because grapa uses recursive decent, which results in the last match being processed first.</p> <pre><code>&gt; r1 = rule $ID &lt;r1&gt; {@&lt;prepend,{$2,$1}&gt;} | $ID {@&lt;createarray,{$1}&gt;};\n&gt; (op()(\"a b c\",r1))();\n[a,b,c]\n</code></pre> <p>But right recursion may not be desirable in some cases. One example is order of operations for additon and subtraction, where the evaluation needs to happen from left to right. Here is an example using right recursion. </p> <pre><code>r1 = rule \n    $INT '+' &lt;r1&gt;             {@&lt;add,{$1,$3}&gt;} \n  | $INT '-' &lt;r1&gt;              {@&lt;sub,{$1,$3}&gt;} \n  | $INT                            {@&lt;lit,{$1}&gt;}\n  ;\n\n&gt; op()(\"5-3+2\",r1);\n@&lt;[op,@&lt;sub,{5,@&lt;add,{3,2}&gt;}&gt;],{}&gt;\n\n&gt; (op()(\"5-3+2\",r1))();\n0\n</code></pre> <p>Note that for \"5-3+2\", the additon of 3+2 happens first resulting in 5-(3+2), which produces the wrong answer. </p> <p>Left recursion is required to address this.</p> <pre><code>r2 = rule \n    &lt;r2&gt; '+' $INT       {@&lt;add,{$1,$3}&gt;} \n  | &lt;r2&gt; '-' $INT        {@&lt;sub,{$1,$3}&gt;} \n  | $INT                      {@&lt;lit,{$1}&gt;}\n  ;\n\n&gt; op()(\"5-3+2\",r2);\n@&lt;[op,@&lt;add,{@&lt;sub,{5,3}&gt;,2}&gt;],{}&gt;\n\n&gt; (op()(\"5-3+2\",r2))();\n4\n</code></pre> <p>Note that with left recursion, the subtraction happens first resulting in (5-3)+2, which produces the correct answer.</p> <p>For those interested in how to modify a recursive decent parser to support left recursion, see the following on how this was addressed for Python:</p> <p>https://medium.com/@gvanrossum_83706/left-recursive-peg-grammars-65dab3c580e1</p> <p>A simular approach is used for Grapa - but with a few improvements on the appropach to support more complex scenarios than what's required to support the Python syntax alone.</p> <p>```</p>"}, {"location": "type/STR/", "title": "$STR", "text": "<p>References:</p> <p>ASCII only - Unicode will eventually be added. Can initialize with either double quotes or single quotes - which is easier than escaping a string that includes a quoted string - such as \"this 'is' a test\", or 'this \"is\" a test'. $STR inherits the $obj class - see $obj for functions supported. </p>"}, {"location": "type/STR/#string-literals", "title": "String Literals", "text": "<p>Grapa supports three types of string literals:</p>"}, {"location": "type/STR/#double-and-single-quotes", "title": "Double and Single Quotes", "text": "<pre><code>/* Double quotes */\nname = \"John Doe\";\nmessage = \"Hello World\";\n\n/* Single quotes */\nname = 'John Doe';\nmessage = 'Hello World';\n\n/* Mixed quotes to avoid escaping */\ntext = \"This 'is' a test\";  /* No need to escape single quotes */\ntext = 'This \"is\" a test';  /* No need to escape double quotes */\n</code></pre>"}, {"location": "type/STR/#raw-strings", "title": "Raw Strings", "text": "<p>Raw strings (prefixed with <code>r</code>) suppress escape sequence processing, making them ideal for regex patterns and paths:</p> <pre><code>/* Regular string - requires double escaping for regex */\npattern = \"\\\\w+\\\\s+\\\\d+\";\n\n/* Raw string - no escaping needed */\npattern = r\"\\w+\\s+\\d+\";\n\n/* File paths with raw strings */\npath = r\"C:\\Users\\Name\\Documents\\file.txt\";\n\n/* Complex regex patterns */\nemail_pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\";\n</code></pre> <p>Important: In raw strings, only the enclosing quote character (whether <code>\"</code> or <code>'</code>) needs to be escaped. This is the only escape sequence that the string parser recognizes in raw strings:</p> <pre><code>/* Escape the enclosing quote character in raw strings */\ntext = r\"This \\\"is\\\" a test\";  /* Escape double quotes when using double quotes */\ntext = r'This \\'is\\' a test';  /* Escape single quotes when using single quotes */\n\n/* All other backslashes are treated literally */\npath = r\"C:\\Users\\Name\\Documents\\file.txt\";  /* No escaping needed for backslashes */\npattern = r\"\\w+\\s+\\d+\";  /* No escaping needed for regex */\n</code></pre> <p>Examples: Commands | Results ------------ | ------------- \"this is a test\".len(); | 14 \"this is a test\".split(\"\"); | [\"t\",\"h\",\"i\",\"s\",\" \",\"i\",\"s\",\" \",\"a\",\" \",\"t\",\"e\",\"s\",\"t\"] \"this is a test\".raw(); | 0x7468697320697320612074657374 \"this is a test\".raw().int(); | 2361031878030638688519054699098996</p>"}, {"location": "type/SYSID/", "title": "$SYSID", "text": "<p>References:</p> <p>Same as $ID, but was initialized with '$' at the front of the identifier. Used for special system identifiers. </p>"}, {"location": "type/SYSINT/", "title": "$SYSINT", "text": "<p>References:</p> <p>Same as $INT, but was initialized with '$' at the front of the integer. Used for special system integers. </p>"}, {"location": "type/SYSSTR/", "title": "$SYSSTR", "text": "<p>References: - $SYSSTR object - $OBJ object</p> <p>Same as $STR, but was initialized with '$' at the front of the string. Used for special system strings. </p>"}, {"location": "type/TABLE/", "title": "$TABLE", "text": ""}, {"location": "type/TABLE/#thread-safety-and-parallelism", "title": "Thread Safety and Parallelism", "text": "<p>$TABLE (and all Grapa datatypes) are fully thread safe by design. All variable and data structure updates are internally synchronized at the C++ level, so you will never encounter crashes or corruption from concurrent access. However, if your program logic allows multiple threads to read and write the same table or field, you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>. To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access. Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like a table, array, or scalar) will return an error.</p> <p>Canonical Example: <pre><code>lock_obj = $thread();\nlock_obj.lock();\n/* ... perform thread-safe operations on shared table or data ... */\nlock_obj.unlock();\n</code></pre></p> <p>See Threading and Locking and Function Operators: static and const for details and best practices.</p> <p>References: - $TABLE object - $file object</p> <p>A $TABLE is a hierarchical database with columns, rows, supporting both row store and column store architectures.</p> <p>Note: - The type <code>GROUP</code> is used both for hierarchical/grouped databases and for folders/directories in the file system. When navigating a traditional file system, folders/directories will appear as <code>GROUP</code> in listings and type queries.</p>"}, {"location": "type/TABLE/#database-types", "title": "Database Types", "text": ""}, {"location": "type/TABLE/#row-store-rtable_tree", "title": "Row Store (RTABLE_TREE)", "text": "<ul> <li>Optimization: Transactional workloads, record-based operations</li> <li>Storage: Contiguous data blocks (BYTE_DATA) for each record</li> <li>Use Cases: OLTP applications, frequent record updates, small to medium datasets</li> </ul>"}, {"location": "type/TABLE/#column-store-ctable_tree", "title": "Column Store (CTABLE_TREE)", "text": "<ul> <li>Optimization: Analytical queries, column-based operations</li> <li>Storage: Fragmented data storage (FREC_DATA) for efficient sparse data handling</li> <li>Use Cases: Data warehousing, analytical workloads, large datasets with many columns</li> </ul>"}, {"location": "type/TABLE/#group-store-group_tree", "title": "Group Store (GROUP_TREE)", "text": "<ul> <li>Optimization: Hierarchical/grouped data, or file system folders/directories</li> <li>Storage: GROUP_TREE</li> <li>Use Cases: Nested/grouped data, directory navigation, or representing folders in the file system</li> </ul>"}, {"location": "type/TABLE/#type-table", "title": "Type Table", "text": "Type Description/Use Case Storage Model GROUP Folder/directory in file system, or hierarchical/grouped database GROUP_TREE ROW Transactional, record-based, OLTP, point queries RTABLE_TREE, BYTE_DATA COL Analytical, column-based, sparse/large datasets CTABLE_TREE, FREC_DATA"}, {"location": "type/TABLE/#key-features", "title": "Key Features", "text": "<ul> <li>In-Memory and Persistent: Can be stored in memory or on the file system</li> <li>Dynamic Schema: Fields can be added and removed at runtime</li> <li>Multiple Storage Types: Support for fixed, variable, and partitioned field storage</li> <li>Efficient Queries: Optimized for both row-oriented and column-oriented access patterns</li> </ul>"}, {"location": "type/TABLE/#performance-characteristics", "title": "Performance Characteristics", "text": ""}, {"location": "type/TABLE/#row-store", "title": "Row Store", "text": "<ul> <li>Fast record retrieval and updates</li> <li>Efficient for point queries on specific records</li> <li>Good for transactional workloads</li> </ul>"}, {"location": "type/TABLE/#column-store", "title": "Column Store", "text": "<ul> <li>Fast column scans and aggregations</li> <li>Efficient for analytical queries across columns</li> <li>Better compression for similar data types</li> <li>Optimized for sparse data storage</li> </ul>"}, {"location": "type/TABLE/#basic-usage", "title": "Basic Usage", "text": "<pre><code># Create an in-memory table\nf = $file().table()\nf.type()\n$TABLE\n\n# Basic operations\nf.set(\"test\", \"value\")\nf.ls()\n[{\"$KEY\":\"test\",\"$TYPE\":\"ROW\",\"$BYTES\":5}]\n\nf.get(\"test\")\nvalue\n</code></pre>"}, {"location": "type/TABLE/#field-creation", "title": "Field Creation", "text": ""}, {"location": "type/TABLE/#field-creation-syntax", "title": "Field Creation Syntax", "text": "<p>The <code>mkfield()</code> method creates fields in the table with the following syntax:</p> <pre><code>table.mkfield(field_name, field_type, storage_mode, size)\n</code></pre>"}, {"location": "type/TABLE/#field-types", "title": "Field Types", "text": "Type Description Default Size Notes STR String Variable Use \"VAR\" mode for variable length INT Integer 4 bytes Important: Use without explicit mode for proper integer types FLOAT Floating point 8 bytes Use \"FIX\" mode with size 8 TIME Timestamp 8 bytes Unix timestamp format BOOL Boolean 1 byte True/false values"}, {"location": "type/TABLE/#storage-modes", "title": "Storage Modes", "text": "Mode Description Use Case VAR Variable length storage Strings, variable data FIX Fixed length storage Numbers, timestamps PAR Partitioned storage Large data requiring partial updates"}, {"location": "type/TABLE/#field-creation-examples", "title": "Field Creation Examples", "text": "<pre><code>/* String fields */\ntable.mkfield(\"name\", \"STR\", \"VAR\");           /* Variable length string */\ntable.mkfield(\"code\", \"STR\", \"FIX\", 10);       /* Fixed length string (10 chars) */\n\n/* Integer fields - IMPORTANT: Use without explicit mode */\ntable.mkfield(\"age\", \"INT\");                   /* \u2705 Correct: Creates proper integer field */\ntable.mkfield(\"id\", \"INT\", \"FIX\", 4);          /* \u274c May create string field instead */\n\n/* Float fields */\ntable.mkfield(\"salary\", \"FLOAT\", \"FIX\", 8);    /* 8-byte floating point */\ntable.mkfield(\"price\", \"FLOAT\");               /* Default float field */\n\n/* Time fields */\ntable.mkfield(\"created\", \"TIME\", \"FIX\", 8);    /* Unix timestamp */\n</code></pre>"}, {"location": "type/TABLE/#field-creation-best-practices", "title": "Field Creation Best Practices", "text": "<ol> <li>Integer Fields: Use <code>table.mkfield(\"field\", \"INT\")</code> without explicit mode</li> <li>String Fields: Use <code>\"VAR\"</code> mode for variable length, <code>\"FIX\"</code> with size for fixed length</li> <li>Float Fields: Use <code>\"FIX\"</code> mode with size 8 for consistency</li> <li>Time Fields: Use <code>\"FIX\"</code> mode with size 8 for timestamps</li> </ol>"}, {"location": "type/TABLE/#storage-architecture", "title": "Storage Architecture", "text": ""}, {"location": "type/TABLE/#row-store-architecture", "title": "Row Store Architecture", "text": "<ul> <li>Data Organization: Records stored contiguously</li> <li>Access Pattern: Horizontal (all fields of a record)</li> <li>Storage Type: BYTE_DATA for fixed fields</li> <li>Best For: Record-based operations</li> </ul>"}, {"location": "type/TABLE/#column-store-architecture", "title": "Column Store Architecture", "text": "<ul> <li>Data Organization: Columns stored separately</li> <li>Access Pattern: Vertical (all values of a field)</li> <li>Storage Type: FREC_DATA for fixed fields, SDATA_TREE for variable fields</li> <li>Best For: Column-based operations</li> </ul>"}, {"location": "type/TABLE/#field-storage-types", "title": "Field Storage Types", "text": ""}, {"location": "type/TABLE/#fixed-fields-store_fix", "title": "Fixed Fields (STORE_FIX)", "text": "<ul> <li>Row Store: Contiguous storage within record</li> <li>Column Store: Fragmented storage (FREC_DATA) for efficient sparse data</li> <li>Use Case: Small, frequently accessed fields</li> </ul>"}, {"location": "type/TABLE/#variable-fields-store_var", "title": "Variable Fields (STORE_VAR)", "text": "<ul> <li>Row Store: Reference to separate data area</li> <li>Column Store: Tree-based storage (SDATA_TREE)</li> <li>Use Case: Medium-sized variable data</li> </ul>"}, {"location": "type/TABLE/#partitioned-fields-store_par", "title": "Partitioned Fields (STORE_PAR)", "text": "<ul> <li>Row Store: Reference to partitioned data area</li> <li>Column Store: Fragmented storage for large data</li> <li>Use Case: Large data requiring partial updates</li> </ul>"}, {"location": "type/TABLE/#use-case-examples", "title": "Use Case Examples", "text": ""}, {"location": "type/TABLE/#row-store-example-transactional", "title": "Row Store Example (Transactional)", "text": "<pre><code>/* Create row store database */\nf.mk(\"orders_db\", \"ROW\");\nf.cd(\"orders_db\");\n\n/* Define schema with correct field creation */\nf.mkfield(\"order_id\", \"INT\");                  /* Integer field */\nf.mkfield(\"customer_id\", \"INT\");               /* Integer field */\nf.mkfield(\"order_date\", \"TIME\", \"FIX\", 8);     /* Timestamp */\nf.mkfield(\"total_amount\", \"FLOAT\", \"FIX\", 8);  /* Float field */\nf.mkfield(\"status\", \"STR\", \"VAR\");             /* Variable string */\n\n/* Add records */\nf.set(\"order_001\", 1001, \"customer_id\");\nf.set(\"order_001\", 1640995200, \"order_date\");  /* Unix timestamp */\nf.set(\"order_001\", 299.99, \"total_amount\");\nf.set(\"order_001\", \"pending\", \"status\");\n\n/* Retrieve complete record */\norder = f.get(\"order_001\", \"customer_id\");     /* Returns integer 1001 */\n</code></pre>"}, {"location": "type/TABLE/#column-store-example-analytical", "title": "Column Store Example (Analytical)", "text": "<pre><code>/* Create column store database */\nf.mk(\"sales_analytics\", \"COL\");\nf.cd(\"sales_analytics\");\n\n/* Define schema with correct field creation */\nf.mkfield(\"date\", \"TIME\", \"FIX\", 8);           /* Timestamp */\nf.mkfield(\"product_id\", \"INT\");                /* Integer field */\nf.mkfield(\"region\", \"STR\", \"VAR\");             /* Variable string */\nf.mkfield(\"sales_amount\", \"FLOAT\", \"FIX\", 8);  /* Float field */\nf.mkfield(\"quantity\", \"INT\");                  /* Integer field */\n\n/* Add data (records created automatically) */\nf.set(\"sale_001\", 1640995200, \"date\");\nf.set(\"sale_001\", 1001, \"product_id\");\nf.set(\"sale_001\", \"North\", \"region\");\nf.set(\"sale_001\", 299.99, \"sales_amount\");\nf.set(\"sale_001\", 2, \"quantity\");\n\n/* Column-oriented queries are efficient */\n/* (In a real implementation, you'd have aggregation functions) */\n</code></pre>"}, {"location": "type/TABLE/#data-retrieval-and-type-conversion", "title": "Data Retrieval and Type Conversion", "text": ""}, {"location": "type/TABLE/#retrieving-data-with-type-conversion", "title": "Retrieving Data with Type Conversion", "text": "<p>When retrieving data from tables, use appropriate type conversion methods:</p> <pre><code>/* Retrieve with type conversion */\nname = table.get(\"user1\", \"name\").str();       /* Convert to string */\nage = table.get(\"user1\", \"age\").int();         /* Convert to integer */\nsalary = table.get(\"user1\", \"salary\").float(); /* Convert to float */\n</code></pre>"}, {"location": "type/TABLE/#type-conversion-methods", "title": "Type Conversion Methods", "text": "Method Description Use Case <code>.str()</code> Convert to string Text data, display <code>.int()</code> Convert to integer Numeric calculations <code>.float()</code> Convert to float Decimal calculations <code>.type()</code> Get data type Debugging, type checking"}, {"location": "type/TABLE/#performance-optimization", "title": "Performance Optimization", "text": ""}, {"location": "type/TABLE/#row-store-optimization", "title": "Row Store Optimization", "text": "<ul> <li>Use fixed fields for frequently accessed data</li> <li>Minimize variable field usage for better performance</li> <li>Design for record-based access patterns</li> </ul>"}, {"location": "type/TABLE/#column-store-optimization", "title": "Column Store Optimization", "text": "<ul> <li>Use appropriate field types for data distribution</li> <li>Consider data sparsity when designing schemas</li> <li>Design for column-oriented access patterns</li> </ul>"}, {"location": "type/TABLE/#advanced-features", "title": "Advanced Features", "text": ""}, {"location": "type/TABLE/#dynamic-schema", "title": "Dynamic Schema", "text": "<pre><code>/* Add fields at runtime */\nf.mkfield(\"new_field\", \"STR\", \"VAR\");\n\n/* Remove fields */\nf.rmfield(\"old_field\");\n</code></pre>"}, {"location": "type/TABLE/#debug-information", "title": "Debug Information", "text": "<pre><code>/* Inspect database structure */\nf.debug();\n</code></pre>"}, {"location": "type/TABLE/#best-practices", "title": "Best Practices", "text": ""}, {"location": "type/TABLE/#field-creation_1", "title": "Field Creation", "text": "<ol> <li>Integer Fields: Always use <code>table.mkfield(\"field\", \"INT\")</code> without explicit mode</li> <li>String Fields: Use <code>\"VAR\"</code> for variable length, <code>\"FIX\"</code> with size for fixed length</li> <li>Float Fields: Use <code>\"FIX\"</code> mode with size 8 for consistency</li> <li>Type Conversion: Always use <code>.str()</code>, <code>.int()</code>, <code>.float()</code> when retrieving data</li> </ol>"}, {"location": "type/TABLE/#choosing-between-row-and-column-store", "title": "Choosing Between Row and Column Store", "text": "<p>Use Row Store When: - Frequent record updates - Point queries on specific records - Small to medium datasets - Transactional workloads</p> <p>Use Column Store When: - Analytical queries and aggregations - Column scans across many records - Large datasets with many columns - Sparse data (many NULL values)</p>"}, {"location": "type/TABLE/#schema-design", "title": "Schema Design", "text": "<p>Row Store: - Group related fields together - Use fixed fields for primary keys and frequently accessed data - Consider record size for optimal performance</p> <p>Column Store: - Design for column-oriented access patterns - Use appropriate storage types for data distribution - Consider data sparsity and growth patterns</p>"}, {"location": "type/TABLE/#technical-details", "title": "Technical Details", "text": ""}, {"location": "type/TABLE/#storage-implementation", "title": "Storage Implementation", "text": "<ul> <li>Row Store: Uses BYTE_DATA for contiguous storage</li> <li>Column Store: Uses FREC_DATA for fragmented storage of fixed fields</li> <li>Growth Management: Automatic growth parameter setting for optimal performance</li> <li>Sparse Data: Efficient handling of NULL and empty values</li> </ul>"}, {"location": "type/TABLE/#data-access-patterns", "title": "Data Access Patterns", "text": "<ul> <li>Row Store: Optimized for horizontal data access</li> <li>Column Store: Optimized for vertical data access</li> <li>Cache Efficiency: Different cache utilization patterns for each type</li> </ul>"}, {"location": "type/TAG/", "title": "$TAG", "text": "<p>A $TAG includes a tag name, a list of attributes, and an $XML (which is a list of $TAG or $STR values). </p> <p>See $XML.</p>"}, {"location": "type/TIME/", "title": "$TIME", "text": "<p>References:</p> <p>Uses UTC timezone. $TIME is intended to be a timestamp starting at Jan 1 1970, and a timer for tracking the passage of time. The year is not bounded, in that it can be large negative numbers and large positive numbers. </p>"}, {"location": "type/TIME/#time_1", "title": "time()", "text": "<pre><code>&gt; (0).time();\n1970-01-01T00:00:00.000000\n</code></pre>"}, {"location": "type/TIME/#tz", "title": "tz()", "text": "<pre><code>&gt; $TIME().tz();\n-28800000000000\n\n&gt; $TIME().tz()/1000000000\n-28800\n</code></pre>"}, {"location": "type/TIME/#utc", "title": "utc()", "text": "<pre><code>&gt; $TIME().utc();\n2020-07-10T19:05:58.6135794\n\n&gt; $TIME().utc() + $TIME().tz();\n2020-07-10T12:06:15.9529207\n</code></pre>"}, {"location": "type/TIME/#delta", "title": "delta()", "text": "<pre><code>&gt; t1 = $TIME().utc();\n\n&gt; t1.delta();\n3.8281652\n</code></pre>"}, {"location": "type/TIME/#examples", "title": "Examples", "text": "<p>The following illustrate using various date ranges.</p> <pre><code>&gt; \"1020-04-23T12:33:33.921638\".time();\n1020-04-23T12:33:33.921638\n\n&gt; \"1020-04-23T12:33:33.921638\".time() + 24*60*60*1000000000;\n1020-04-24T12:33:33.921638\n\n&gt; \"-1020-04-23T12:33:33.921638\".time() + 1;\n-1020-04-23T12:33:33.921638001\n\n&gt; \"-1020-04-23T12:33:33.921638\".time().int();\n-94345471586078362000\n\n&gt; (-94345471586078362000).time();\n-1020-04-23T12:33:33.921638\n</code></pre>"}, {"location": "type/TIME/#side-effect-of-1970", "title": "Side effect of 1970", "text": "<p>And a side effect of using 1970 as the center. </p> <pre><code>&gt; a = $TIME().utc();\n\n&gt; a;\n2020-07-10T19:51:26.3316532\n\n&gt; (0-a).time();\n1919-06-24T04:08:33.6683468\n</code></pre>"}, {"location": "type/VECTOR/", "title": "$VECTOR", "text": "<p>A $VECTOR is a multi-dimentional set of values. Most often either 1 or 2 dimentions. </p> <p>The syntax for a $VECTOR is the same as an $ARRAY, but uses a '#' before and after the array, and requires all values for each dimention to be specified (for a 2 dimentional vector, all rows much have the same number of columns). Structually, both $ARRAY and $LIST use linked lists, and $VECTOR uses arrays - and so a $VECTOR is faster to manipulate large tabels of data. But they are all in memory - for a large table on disk use $file and $TABLE which is based on a BTree. </p> <pre><code>grapa: /&gt; [\"a\",\"b\",\"c\"].vector();\n#[\"a\",\"b\",\"c\"]#\n\ngrapa: /&gt;#[\"a\",\"b\",\"c\"]#.array();\n[\"a\",\"b\",\"c\"]\n</code></pre> <p>Several math operations are supported. <pre><code>grapa: /&gt;#[[2,5],[3,8]]# + 2;\n#[[4,7],[5,10]]#\ngrapa: /&gt;#[[2,5],[3,8]]# * 2;\n#[[4,10],[6,16]]#\ngrapa: /&gt;#[[2,5],[3,8]]# * 2 + 1;\n#[[5,11],[7,17]]#\ngrapa: /&gt;#[[2,5],[3,8]]# ** 2;\n#[[4,25],[9,64]]#\ngrapa: /&gt;#[[2,5],[3,8]]# * [op(x){x*3;}]\n#[[6,15],[9,24]]#\n</code></pre></p>"}, {"location": "type/VECTOR/#t", "title": "t()", "text": "<pre><code>grapa: /&gt; #[[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]]#.t();\n#[[\"a\",\"d\"],[\"b\",\"e\"],[\"c\",\"f\"]]#\n</code></pre>"}, {"location": "type/VECTOR/#rref", "title": "rref()", "text": "<p>Row-Echelon Form. Example reference</p> <pre><code>grapa: /&gt; #[[4,0,1],[2,0,2],[3,0,3]]#.rref();\n#[[1,0.0,0.0],[0,0,1]]#\n\ngrapa: /&gt; #[[1,2,-1,-4],[2,3,-1,-11],[-2,0,-3,22]]#.rref();\n#[[1,0.0,0.0,-8],[0,1,0.0,1],[0,0,1,-2]]#\n</code></pre>"}, {"location": "type/VECTOR/#inv", "title": "inv()", "text": "<p>Example reference x <pre><code>grapa: /&gt; #[[1,2],[3,4]]#.inv()\n#[[-2,1],[1.5,-0.5]]#\n\ngrapa: /&gt; #[[1.0,1.0,1.0],[0.0,2.0,5.0],[2.0,5.0,-1.0]]#.inv();\n#[[1.2857142857142857142857142857142,-0.28571428571428571428571428571428,-0.14285714285714285714285714285714],[-0.47619047619047619047619047619047,0.14285714285714285714285714285714,0.23809523809523809523809523809523],[0.19047619047619047619047619047619,0.14285714285714285714285714285714,-0.095238095238095238095238095238095]]#\n</code></pre></p>"}, {"location": "type/VECTOR/#det", "title": "det()", "text": "<p>Algorithm used Examples</p> <pre><code>grapa: /&gt;#[[1,2],[0,0],[3,4]]#.det();\n0.0\ngrapa: /&gt;#[[2,5],[3,8]]#.det();\n1.0\ngrapa: /&gt;#[[-4,7],[-2,9]]#.det();\n-22.0\ngrapa: /&gt;#[[1,4,3],[2,1,5],[3,2,1]]#.det();\n46.0\ngrapa: /&gt;#[[4,-3,5],[1,0,3],[-1,5,2]]#.det();\n-20.0\ngrapa: /&gt;#[[1,-2,3,2],[2,3,1,-1],[1,1,1,1],[-1,4,2,1]]#.det();\n-47.0\n</code></pre>"}, {"location": "type/VECTOR/#rank", "title": "rank()", "text": "<pre><code>grapa: /&gt;#[[1,2],[0,0],[3,4]]#.rank();\n2\ngrapa: /&gt;#[[1,-2,3,2],[2,3,1,-1],[1,1,1,1],[-1,4,2,1]]#.rank();\n4\n</code></pre>"}, {"location": "type/VECTOR/#solve", "title": "solve()", "text": "<p>x = [A].inv().dot([B]) = ([A][B]).solve()</p> <pre><code>grapa: /&gt;#[[1,-2,3,2],[2,3,1,-1],[1,1,1,1]]#.solve();\n#[[-12],[5],[8]]#\ngrapa: /&gt;#[[2, 1, 1, 4], [1, 3, 2, 5], [1, 0, 0, 6]]#.solve();\n#[[6],[15],[-23]]#\ngrapa: /&gt;#[[2, 1, 1], [1, 3, 2], [1, 0, 0]]#.inv().dot(#[4, 5, 6]#)\n#[6,15,-23]#\n</code></pre>"}, {"location": "type/VECTOR/#covaxis", "title": "cov(axis)", "text": "<pre><code>grapa: /&gt;#[[1.23, 2.12, 3.34, 4.5],[2.56, 2.89, 3.76, 3.95]]#.t().cov();\n#[[0.88445,0.51205,0.2793,-0.36575],[0.51205,0.29645,0.1617,-0.21175],[0.2793,0.1617,0.0882,-0.1155],[-0.36575,-0.21175,-0.1155,0.15125]]#\n</code></pre>"}, {"location": "type/VECTOR/#sumaxis", "title": "sum(axis)", "text": "<pre><code>grapa: /&gt;#[[2,5],[3,8]]#.sum();\n#[[7],[11]]#\ngrapa: /&gt;#[[2,5],[3,8]]#.sum().t();\n#[[7,11]]#\ngrapa: /&gt;#[[2,5],[3,8]]#.sum().t().array()[0]\n[7,11]\ngrapa: /&gt;#[[2,5],[3,8]]#.t().sum();\n#[[5],[13]]#\n</code></pre>"}, {"location": "type/VECTOR/#meanaxis", "title": "mean(axis)", "text": "<pre><code>grapa: /&gt;#[[2,5],[3,8]]#.mean();\n#[[3.5],[5.5]]#\n</code></pre>"}, {"location": "type/VECTOR/#shape", "title": "shape()", "text": "<pre><code>grapa: /&gt;#[[1,4,3],[2,1,5]]#.shape();\n[2,3]\n</code></pre>"}, {"location": "type/VECTOR/#reshapedim", "title": "reshape(dim)", "text": "<pre><code>grapa: /&gt;#[[1,4,3],[2,1,5]]#.reshape([3,2]);\n#[[1,4],[3,2],[1,5]]#\ngrapa: /&gt;#[[1,4,3],[2,1,5]]#.reshape([6]);\n#[1,4,3,2,1,5]#\ngrapa: /&gt;#[[1,4,3],[2,1,5]]#.{$local.x=@$$;x.reshape([x.shape().reduce(op(a,b){a=a*b;})])};\n#[1,4,3,2,1,5]#\ngrapa: /&gt;#[[1,4,3],[2,1,5]]#.{(op(x){x.reshape([x.shape().reduce(op(a,b){a=a*b;})])})(@$$)}\n#[1,4,3,2,1,5]#\n</code></pre>"}, {"location": "type/VECTOR/#norm", "title": "norm()", "text": ""}, {"location": "type/VECTOR/#dotb", "title": "dot(b)", "text": "<pre><code>grapa: /&gt;#[[2, 1, 1], [1, 3, 2], [1, 0, 0]]#.inv().dot(#[4, 5, 6]#)\n#[6,15,-23]#\n</code></pre>"}, {"location": "type/VECTOR/#triub", "title": "triu(b)", "text": "<pre><code>grapa: /&gt;#[[1,2,3], [4,5,6], [7,8,9], [10,11,12]]#.triu()\n#[[1,2,3],[0,5,6],[0,0,9],[0,0,0]]#\ngrapa: /&gt;#[[1,2,3], [4,5,6], [7,8,9], [10,11,12]]#.triu(1)\n#[[0,2,3],[0,0,6],[0,0,0],[0,0,0]]#\ngrapa: /&gt;#[[1,2,3], [4,5,6], [7,8,9], [10,11,12]]#.triu(-1)\n#[[1,2,3],[4,5,6],[0,8,9],[0,0,12]]#\n</code></pre>"}, {"location": "type/VECTOR/#trilb", "title": "tril(b)", "text": "<pre><code>grapa: /&gt;#[[1,2,3], [4,5,6], [7,8,9], [10,11,12]]#.tril()\n#[[1,0,0],[4,5,0],[7,8,9],[10,11,12]]#\ngrapa: /&gt;#[[1,2,3], [4,5,6], [7,8,9], [10,11,12]]#.tril(1)\n#[[1,2,0],[4,5,6],[7,8,9],[10,11,12]]#\ngrapa: /&gt;#[[1,2,3], [4,5,6], [7,8,9], [10,11,12]]#.tril(-1)\n#[[0,0,0],[4,0,0],[7,8,0],[10,11,12]]#\n</code></pre>"}, {"location": "type/VECTOR/#eigh", "title": "eigh()", "text": "<pre><code>grapa: /&gt;#[[6, 3, 1, 5], [3, 0, 5, 1], [1, 5, 6, 2], [5, 1, 2, 2]]#.eigh()\n{\n\"w\":#[12.4239907890616464924713508305119,6.08502335890130921036471092299038,-3.7463749135825172968593735552929,-0.76263923438043840597668819820936]#,\n\"v\":#[[0.6052988843640131280361831993622,-0.5817702414644647099139978118819,-0.35986577234737391199231188198498,-0.40700524889353398084503792722898],[0.39738915975762869140758200141676,0.24929195307290747781102421814306,0.7648182321448360641845574152262,-0.44157496489165778818545163353957],[0.53791858576868022927941662675911,0.71285959705633858556555681416766,-0.42255936025156366780457229626123,0.1546556724892004570750742828433],[0.4316696785499647957071509135133,-0.30203990326469830609292066132899,0.32709827993351621988757318389964,0.78449977738744885696548737926574]]#\n}\n</code></pre> <p>Parallelism Note: Vector operations like <code>.map()</code> and <code>.filter()</code> are parallel by default and hardened for ETL/data processing workloads.</p>"}, {"location": "type/WIDGET/", "title": "$WIDGET", "text": "<p>To try test scripts, run grapa in with the editor screen by either using \"grapa -w\" from the command line, or if in grapa console, enter \"&gt;\".</p> <p>To run grapa from the command line with a custom widget script, use \"grapa -wfile filename\". To speed up load time, compile the script using $sys().compile(infile, outfile). </p> <p>The $WIDGET type includes an initialization method $new that is called when the widget object is created, passing in the widget type name, the screen boundaries, an optional label, and an optional set of attributes. The design is an implementation of the FTLK library, and so references included to the related library documentation. </p> <p>All widgets are created using the following syntax, where label and attrlist are optional. - widgetname = name of the widget, such as \"window\" or \"button\" - x, y, w, h = coordinates and size of the widget - label = title for the widget - attrlist = initialization properties, wich could include definitions for child widgets and event handlers</p> <pre><code>w = $WIDGET(widgetname, x, y, w, h, label, attrlist)\n</code></pre> <p>To delete a widget, assign null to the variable holding the widget.</p> <p>If a variable holding a widget is assigned to another variable, both variables will point to the same widget. Take caution when doing this...or avoid doing this. </p> <p>Several widgets support a group of widgets. There are 3 equivalent ways to create and add a widget to an existing one. <pre><code>w = $WIDGET(\"double_window\", 0, 0, 640, 320, \"test\");\nw += (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw.set({child:{b2:[\"button\", 20, 40, 60, 20, \"B2\"]}});\nw.set({child:{b3:$WIDGET(\"button\", 20, 50, 60, 20, \"B3\")}});\n</code></pre></p> <p>See $WIDGET attributes for a list of attributes that can be get or set for each widget type. </p>"}, {"location": "type/WIDGET/#widgetname", "title": "widgetname", "text": ""}, {"location": "type/WIDGET/#window", "title": "\"window\"", "text": "<p>FTLK documentatin - Fl_Window</p> <pre><code>w = $WIDGET(\"window\", 0, 0, 640, 320, \"test\", {color: \"BLUE\"});\nw.show();\n</code></pre>"}, {"location": "type/WIDGET/#double_window", "title": "\"double_window\"", "text": "<p>FTLK documentatin - Fl_Double_Window</p> <p>Dobule buffering version of \"window\", so updates are smother. </p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 640, 320, \"test\", {color: \"BLUE\"});\nw.show();\n</code></pre>"}, {"location": "type/WIDGET/#hor_nice_slider", "title": "\"hor_nice_slider\"", "text": "<p>FTLK documentatin - FL_Hor_Nice_Slider</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 640, 320, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"hor_nice_slider\", 20, 20, 600, 20, \"\", {scrollvalue:[30,5,0,100]}));\n</code></pre> <p>The above can also be initiated using the following. <pre><code>w = $WIDGET(\"double_window\", 0, 0, 640, 320, \"test\", {\n  color: \"BLUE\",\n  children: {\n    ns:$WIDGET(\"hor_nice_slider\", 20, 20, 600, 20, \"\", {\n      scrollvalue:[30,5,0,100]\n      })\n    }\n  });\nw.show();\n</code></pre></p>"}, {"location": "type/WIDGET/#scrollbar", "title": "\"scrollbar\"", "text": "<p>FTLK documentatin - FL_Scrollbar</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 640, 320, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"scrollbar\", 600, 20, 20, 280, \"\", {scrollvalue:[30,5,0,100]}));\n</code></pre>"}, {"location": "type/WIDGET/#scroll", "title": "\"scroll\"", "text": "<p>FTLK documentatin - FL_Scroll</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"scroll\", 20, 20, 300, 180));\nw.child(\"ns\") += (tx:$WIDGET(\"text_display\", 20, 20, 800, 340));\nw.child(\"ns\").child(\"tx\").set({text:$sys().getenv('LICENCE')});\nw.redraw();\n</code></pre>"}, {"location": "type/WIDGET/#button", "title": "\"button\"", "text": "<p>FTLK documentatin - FL_Button</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw += (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\n</code></pre>"}, {"location": "type/WIDGET/#radio_button", "title": "\"radio_button\"", "text": "<p>FTLK documentatin - FL_Radio_Button</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (b1:$WIDGET(\"radio_button\", 20, 20, 60, 20, \"B1\"));\nw += (b2:$WIDGET(\"radio_button\", 20, 40, 60, 20, \"B2\"));\n</code></pre>"}, {"location": "type/WIDGET/#toggle_button", "title": "\"toggle_button\"", "text": "<p>FTLK documentatin - FL_Toggle_Button</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (b1:$WIDGET(\"toggle_button\", 20, 20, 60, 20, \"B1\"));\nw += (b2:$WIDGET(\"toggle_button\", 20, 40, 60, 20, \"B2\"));\n</code></pre>"}, {"location": "type/WIDGET/#group", "title": "\"group\"", "text": "<p>FTLK documentatin - FL_Group</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"group\", 20, 20, 40, 60));\nw.child(\"ns\") +=  (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw.child(\"ns\") +=  (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\n</code></pre> <p>After the above, run the following to move the group.</p> <pre><code>r = w.child(\"ns\").get([\"x\",\"y\",\"w\",\"h\"]);\nw.child(\"ns\").resize(r.x+10,r.y+10,r.w,r.h);\n</code></pre>"}, {"location": "type/WIDGET/#pack", "title": "\"pack\"", "text": "<p>FTLK documentatin - FL_Pack</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"pack\", 20, 20, 40, 60, \"\", {spacing: 4}));\nw.child(\"ns\") +=  (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw.child(\"ns\") +=  (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\n</code></pre> <p>Horizontal version.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"pack\", 20, 20, 0, 20, \"\", {type: \"horizontal\", spacing: 4}));\nw.child(\"ns\") +=  (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw.child(\"ns\") +=  (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\n</code></pre>"}, {"location": "type/WIDGET/#text_editor", "title": "\"text_editor\"", "text": "<p>FTLK documentatin - FL_Text_Editor</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"scroll\", 20, 20, 300, 180));\nw.child(\"ns\") +=  (tx:$WIDGET(\"text_editor\", 20, 20, 800, 340));\nw.child(\"ns\").child(\"tx\").set({text:$sys().getenv('LICENCE')});\nw.set({resizable: \"ns\"});\nw.redraw();\n</code></pre>"}, {"location": "type/WIDGET/#text_display", "title": "\"text_display\"", "text": "<p>FTLK documentatin - FL_Text_Display</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"scroll\", 20, 20, 300, 180));\nw.child(\"ns\") +=  (tx:$WIDGET(\"text_display\", 20, 20, 800, 340));\nw.child(\"ns\").child(\"tx\").set({text:$sys().getenv('LICENCE')});\nw.set({resizable: \"ns\"});\nw.redraw();\n</code></pre>"}, {"location": "type/WIDGET/#menu_bar", "title": "\"menu_bar\"", "text": "<p>FTLK documentatin - FL_Menu_Bar</p> <pre><code>w = $WIDGET(\"double_window\", 20, 50, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw +=  (tx:$WIDGET(\"text_display\", 20, 50, 300, 150));\nw.child(\"tx\").set({text:\"blank\"});\n\nw += (menu: $WIDGET(\"menu_bar\", 0, 0, 640, 30));\nm1_cb = op(o,cbdata,item) {o.parent().child(\"tx\").set({text:\"M1\"});};\nw.child(\"menu\") += (M1: {path: \"&amp;File/&amp;M1\", flags: [\"DIVIDER\"], shortcut: \"^a\", callback: m1_cb});\nm2_cb = op(o,cbdata,item) {o.parent().child(\"tx\").set({text:\"M2\"});};\nw.child(\"menu\") += (M2: {path: \"&amp;File/&amp;M2\", shortcut: \"^b\", callback: m2_cb});\n\nw.child(\"menu\").get([ {\"M1\":[\"path\",\"shortcut\"]} ]);\nw.child(\"menu\").get([ {\"M1\":[\"label\",\"labelsize\"]} ]);\nw.child(\"menu\").set({child:{M1: {label: \"M1X\", \"labelsize\":18}}});\nw.child(\"menu\").get([ {\"M1\":[\"label\",\"labelsize\"]} ]);\n</code></pre>"}, {"location": "type/WIDGET/#widget_1", "title": "\"widget\"", "text": "<p>FTLK documentatin - FL_Widget</p> <p>Widget that does nothing. Useful for inserting a spacer in a \"pack\". </p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"pack\", 20, 20, 0, 20, \"\", {type: \"horizontal\", spacing: 4}));\nw.child(\"ns\") +=  (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw.child(\"ns\") +=  (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\nw.child(\"ns\") +=  (s1:$WIDGET(\"widget\", 20, 40, 20, 20));\nw.child(\"ns\") +=  (b3:$WIDGET(\"button\", 20, 40, 60, 20, \"B3\"));\nw.child(\"ns\") +=  (b4:$WIDGET(\"button\", 20, 40, 60, 20, \"B4\"));\n</code></pre>"}, {"location": "type/WIDGET/#table_row", "title": "\"table_row\"", "text": "<p>FTLK documentatin - FL_Table_Row</p> <pre><code>w = $WIDGET(\"double_window\", 20, 50, 440, 340, \"test\", {color: \"BLUE\"});\nw.show();\nw += (table: $WIDGET(\"table_row\", 20, 20, 400, 300));\nw.child(\"table\").set({vector:$file().ls().vector()});\n</code></pre>"}, {"location": "type/WIDGET/#show", "title": "show ()", "text": "<p>Shows a widget.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\n</code></pre>"}, {"location": "type/WIDGET/#hide", "title": "hide ()", "text": "<p>Hides a widget.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw += (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\nw.child(\"b1\").hide();\n</code></pre>"}, {"location": "type/WIDGET/#redraw", "title": "redraw ()", "text": "<p>FTLK documentatin - redraw()</p> <p>A message can be sent to a widget to request a redraw, for situations where a change is made but the widget does not automatically update to reflect the change.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (b1:$WIDGET(\"button\", 20, 20, 60, 20, \"B1\"));\nw += (b2:$WIDGET(\"button\", 20, 40, 60, 20, \"B2\"));\nw.child(\"b1\").redraw();\n</code></pre>"}, {"location": "type/WIDGET/#resizable-resizewidget", "title": "resizable (resizewidget)", "text": "<p>FTLK documentatin - resizable()</p> <p>Binds the resizable definition for a widget to another widget. For example, a window may have both a text box and a button and resizing the window should result in resizing the text box but not the button. In this case, the resizable definition for the window should include the text box, but not the button. </p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw.resizable(w);\n\nw += (ns:$WIDGET(\"pack\", 20, 20, 300, 180, \"\", {spacing: 4}));\n\nw.child(\"ns\") += (bt:$WIDGET(\"pack\", 20, 20, 0, 20, \"\", {type: \"horizontal\", spacing: 4}));\nw.child(\"ns\").child(\"bt\") +=  (bt1:$WIDGET(\"button\", 20, 20, 40, 20, \"btn1\"));\nw.child(\"ns\").child(\"bt\") +=  (bt2:$WIDGET(\"button\", 20, 20, 40, 20, \"btn2\"));\n\nw.child(\"ns\") +=  (tx:$WIDGET(\"text_display\", 20, 40, 300, 160));\nw.resizable(w.child(\"ns\"));\nw.child(\"ns\").resizable(w.child(\"ns\").child(\"tx\"));\n\nw.child(\"ns\").child(\"tx\").set({text:$sys().getenv('LICENCE')});\n</code></pre>"}, {"location": "type/WIDGET/#resize-x-y-w-h", "title": "resize (x, y, w, h)", "text": "<p>FTLK documentatin - resize()</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"scroll\", 20, 20, 300, 180));\nw.child(\"ns\") +=  (tx:$WIDGET(\"text_display\", 20, 20, 800, 340));\nw.child(\"ns\").child(\"tx\").set({text:$sys().getenv('LICENCE')});\nw.set({resizable: \"ns\"});\nw.redraw();\n\nr = w.get([\"x\",\"y\",\"w\",\"h\"]);\nw.resize(r.x,r.y,r.w+50,r.h+100);\n</code></pre>"}, {"location": "type/WIDGET/#parent", "title": "parent ()", "text": "<p>FTLK documentatin - parent()</p> <p>Parent widget...which will always be a \"group\" type of widget. Useful in handlers that get passed the widget for the handler, and the script needs to make a change to another widget that is relative to the target widget. An example would be a button that updates a text display. </p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 260, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"button\", 20, 20, 40, 20, \"time\"));\nw += (tx:$WIDGET(\"text_display\", 20, 40, 300, 200));\nw.child(\"ns\").set({on_release: op(o) {o.parent().child(\"tx\").set({text:($TIME().utc()+$TIME().tz()).str()});}});\n</code></pre>"}, {"location": "type/WIDGET/#child-name", "title": "child (name)", "text": "<p>FTLK documentatin - child()</p> <p>Child of widget. Name can either be a string or a number. If number, than it is the n'th widget in the group.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 260, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"button\", 20, 20, 40, 20, \"time\"));\nw += (tx:$WIDGET(\"text_display\", 20, 40, 300, 200));\nw.child(\"ns\").set({on_release: op(o) {o.parent().child(\"tx\").set({text:($TIME().utc()+$TIME().tz()).str()});}});\n</code></pre>"}, {"location": "type/WIDGET/#next", "title": "next ()", "text": "<p>Next widget in the group. This is useful when an action with a widget in a group needs to modify the widget that follows in the group.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 260, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"button\", 20, 20, 40, 20, \"time\"));\nw += (tx:$WIDGET(\"text_display\", 20, 40, 300, 200));\nw.child(\"ns\").set({on_release: op(o) {o.next().set({text:($TIME().utc()+$TIME().tz()).str()});}});\n</code></pre>"}, {"location": "type/WIDGET/#focus", "title": "focus ()", "text": "<p>FTLK documentatin - focus()</p> <p>Get's the current widget in focus.</p> <p>The following example has a menu item that will update the in focus text editor with the current time.</p> <pre><code>w = $WIDGET(\"double_window\", 20, 50, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw +=  (tx:$WIDGET(\"text_editor\", 20, 50, 300, 75));\nw +=  (tx:$WIDGET(\"text_editor\", 20, 125, 300, 75));\n\nw += (menu: $WIDGET(\"menu_bar\", 0, 0, 640, 30));\nm1_cb = op(o,cbdata,item) {o.focus().set({text:($TIME().utc()+$TIME().tz()).str()});};\nw.child(\"menu\") += (Time: {path: \"&amp;File/&amp;Time\", shortcut: \"^a\", callback: m1_cb});\n</code></pre>"}, {"location": "type/WIDGET/#get-attr_array", "title": "get (attr_array)", "text": "<p>Gets a list of attributes as specified.</p> <p>See $WIDGET attributes.</p>"}, {"location": "type/WIDGET/#set-attr_list", "title": "set (attr_list)", "text": "<p>Sets a list of attributes as specified.</p> <p>See $WIDGET attributes.</p>"}, {"location": "type/WIDGET/#handle-event", "title": "handle (event)", "text": "<p>FTLK documentatin - handle()</p> <p>In an event handler, such as \"on_keydown\", if the event is not processed by the \"on_keydown\" function, call handle(event).</p> <p>The following will process a text selection when Shift+Enter is pressed. If not pressed, than the default event handler is called for the widget.</p> <pre><code>on_keydown: op(o,event)\n{\n  $local.handled = 0;\n  if (((o.event_key() &amp; (0x7f).int()) == 0x0d) &amp;&amp; (o.event_key((0xffe1).int())))\n  {\n    $local.s = o.get(\"selection\");\n    if (s==\"\"||s.type()==\"$ERR\")\n      s = o.get(\"text\");\n    if (s!=\"\")\n    {\n      $local.t = s.post();\n    };\n    handled = 1;\n  }\n  else\n  {\n    handled = o.handle(event);\n  };\n  handled;\n}\n</code></pre>"}, {"location": "type/WIDGET/#event_key-key", "title": "event_key (key)", "text": "<p>FTLK documentatin - event_key()</p> <p>Returns the key lasted pressed if key parameter not passed in. If key parameter passed in, returns true if key is pressed.</p> <p>See \"handle\" example.</p>"}, {"location": "type/WIDGET/#append-data", "title": "append (data)", "text": "<p>Appends to text_display or text_editor widget.</p> <pre><code>w = $WIDGET(\"double_window\", 20, 50, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw += (tx:$WIDGET(\"text_display\", 20, 50, 300, 150));\nw.child(\"tx\").set({text:\"blank\"});\n\nw.child(\"tx\").append(\"hi\");\n</code></pre>"}, {"location": "type/WIDGET/#post-postop-postparams-doneop", "title": "post (postop, postparams, doneop)", "text": "<p>Runs postop in the widget thread with postparams. Runs doneop when done.</p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 260, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"button\", 20, 20, 40, 20, \"clear\", {on_release: op(o){o.next().set({\"text\":\"\"});} }));\nw += (tx:$WIDGET(\"text_display\", 20, 40, 300, 200));\nw.child(\"tx\").post(op(p){$self.set({text:p+\" start\\n\"})},\"test\",op(p){$self.set({append:p+\" end\\n\"})});\n</code></pre>"}, {"location": "type/WIDGET/#clear", "title": "clear ()", "text": "<p>Removes all child elements from menu or group widget. </p>"}, {"location": "type/XML/", "title": "$XML", "text": "<p>$XML is an array of $TAG or $STR values. The $XML class also inherits the $ARRAY class, and any operation that works on an $ARRAY will work on an $XML. </p> <p>For consistency, entering a single $TAG will always result in the creation of $XML, where the $XML includes at least 1 $TAG. </p> <p>To reference items in $XML, use an index. <pre><code>&gt; x = &lt;test one=1&gt;data&lt;/test&gt;&lt;tt hi=\"dd\" /&gt;;\n\n&gt; x.len();\n2\n\n&gt; x[0];\n&lt;test one=1&gt;data&lt;/test&gt;\n\n&gt; x[1];\n&lt;tt hi=\"dd\"/&gt;\n</code></pre></p> <p>Or specify a tag name. <pre><code>&gt; x = &lt;test one=1&gt;data&lt;/test&gt;&lt;tt hi=\"dd\" /&gt;;\n&gt; x.tt;\n&lt;tt hi=\"dd\"/&gt;\n</code></pre></p> <p>Use $LIST to access the attributes. <pre><code>&gt; x = &lt;test one=1&gt;data&lt;/test&gt;&lt;tt hi=\"dd\" /&gt;;\n\n&gt; x.test.$LIST.len();\n1\n\n&gt; x.test.$LIST.one;\n1\n</code></pre></p> <p>Index into the $TAG to access the contents. <pre><code>&gt; x = &lt;test one=1&gt;data&lt;/test&gt;&lt;tt hi=\"dd\" /&gt;;\n\n&gt; x.test.len();\n1\n\n&gt; x.test[0];\ndata\n</code></pre></p> <p>To convert $XML or $TAG to JSON format, use the list method. This produces the underlying representation of how the $XML and $TAG values are stored. <pre><code>&gt; x = &lt;test one=1&gt;data&lt;/test&gt;&lt;tt hi=\"dd\" /&gt;;\n\n&gt; x.list();\n[{\"test\":[{\"one\":1},[\"data\"]]},{\"tt\":[{\"hi\":dd}]}]\n\n&gt; x.test.list();\n{\"test\":[{\"one\":1},[\"data\"]]}\n</code></pre></p>"}, {"location": "type/widget/attributes/", "title": "$WIDGET attributes", "text": "scope name get set options widget \"namespace\" :heavy_minus_sign: :heavy_check_mark: If set, \"global\" is the only option. widget \"name\" :heavy_check_mark: :heavy_minus_sign: widget \"visible\" :heavy_check_mark: :heavy_minus_sign: widget \"x\" :heavy_check_mark: :heavy_check_mark: widget \"y\" :heavy_check_mark: :heavy_check_mark: widget \"w\" :heavy_check_mark: :heavy_check_mark: widget \"h\" :heavy_check_mark: :heavy_check_mark: widget \"size\" :heavy_check_mark: :heavy_check_mark: widget \"label\" :heavy_check_mark: :heavy_check_mark: widget \"scroll_type\" :heavy_minus_sign: :heavy_check_mark: \"HORIZONTAL\", \"VERTICAL\" widget \"orientation\" :heavy_minus_sign: :heavy_check_mark: \"HORIZONTAL\", \"VERTICAL\" widget \"jpeg\" :heavy_minus_sign: :heavy_check_mark: widget \"labelfont\" :heavy_minus_sign: :heavy_check_mark: See font constants. widget \"resizable\" :heavy_minus_sign: :heavy_check_mark: widget \"color\" :heavy_minus_sign: :heavy_check_mark: See color constants. widget \"on_hide\" :heavy_minus_sign: :heavy_check_mark: $OP widget \"get\" :heavy_minus_sign: :heavy_check_mark: attr_array - there are some instances where it is useful to get the value off some attributes right after setting something. widget \"exec\" :heavy_minus_sign: :heavy_check_mark: $OP - runs an $OP within a widget. $self will contain the reference to the widget. Example: w.child(\"tx\").set({exec:op(){$this.get([\"text\"]);}}); If the goal is to run the $OP in the background in the widget, use the post method. widget \"on_post_start\" :heavy_minus_sign: :heavy_check_mark: $OP - used only in $editor.grc widget \"on_post_end\" :heavy_minus_sign: :heavy_check_mark: $OP - used only in $editor.grc widget \"on_post_echo\" :heavy_minus_sign: :heavy_check_mark: $OP - used only in $editor.grc scroll \"scroll_type\" :heavy_minus_sign: :heavy_check_mark: \"HORIZONTAL\", \"VERTICAL\", \"BOTH\", \"ALWAYS_ON\", \"HORIZONTAL_ALWAYS\", \"VERTICAL_ALWAYS\", \"BOTH_ALWAYS\" scrollbar \"linesize\" :heavy_check_mark: :heavy_check_mark: scrollbar \"scrollvalue\" :heavy_check_mark: :heavy_check_mark: [pos,size,first,total] scrollbar \"on_drag\" :heavy_minus_sign: :heavy_check_mark: $OP scrollbar \"on_push\" :heavy_minus_sign: :heavy_check_mark: $OP scrollbar \"on_release\" :heavy_minus_sign: :heavy_check_mark: $OP hor_nice_slider \"scrollvalue\" :heavy_check_mark: :heavy_check_mark: [pos,size,first,total] button \"on_release\" :heavy_minus_sign: :heavy_check_mark: $OP menu_bar \"child\" :heavy_minus_sign: :heavy_check_mark: list of text \"text\" :heavy_check_mark: :heavy_check_mark: text \"append\" :heavy_minus_sign: :heavy_check_mark: text \"wrap\" :heavy_minus_sign: :heavy_check_mark: \"NONE\", \"COLUMN\", \"PIXEL\", \"BOUNDS\" text \"key\" :heavy_minus_sign: :heavy_check_mark: text \"textsize\" :heavy_minus_sign: :heavy_check_mark: text \"textfont\" :heavy_minus_sign: :heavy_check_mark: See font constants. text \"textcolor\" :heavy_minus_sign: :heavy_check_mark: See color constants. text \"cursor_state\" :heavy_minus_sign: :heavy_check_mark: \"show\", \"hide\" text \"cursor_color\" :heavy_minus_sign: :heavy_check_mark: text \"cursor_style\" :heavy_minus_sign: :heavy_check_mark: See cursor style constants. text \"cursor_visible\" :heavy_minus_sign: :heavy_check_mark: text \"on_resize\" :heavy_minus_sign: :heavy_check_mark: $OP text \"on_keydown\" :heavy_minus_sign: :heavy_check_mark: :heavy_minus_sign: text \"on_mousewheel\" :heavy_minus_sign: :heavy_check_mark: $OP text \"on_drag\" :heavy_minus_sign: :heavy_check_mark: $OP text \"on_push\" :heavy_minus_sign: :heavy_check_mark: $OP text \"on_release\" :heavy_minus_sign: :heavy_check_mark: $OP text \"mNBufferLines\" :heavy_check_mark: :heavy_minus_sign: text \"mMaxsize\" :heavy_check_mark: :heavy_minus_sign: text \"selection\" :heavy_check_mark: :heavy_minus_sign: text \"start\" :heavy_check_mark: :heavy_minus_sign: text \"end\" :heavy_check_mark: :heavy_minus_sign: text \"row\" :heavy_check_mark: :heavy_minus_sign: text \"col\" :heavy_check_mark: :heavy_minus_sign: pack \"spacing\" :heavy_minus_sign: :heavy_check_mark: table_row \"rows\" :heavy_minus_sign: :heavy_check_mark: table_row \"cols\" :heavy_minus_sign: :heavy_check_mark: table_row \"shape\" :heavy_check_mark: :heavy_check_mark: table_row \"vector\" :heavy_minus_sign: :heavy_check_mark: table_row \"on_draw_cell\" :heavy_minus_sign: :heavy_check_mark: $OP"}, {"location": "type/widget/attributes/#color-constants", "title": "Color constants", "text": "<p>\"BACKGROUND_COLOR\", \"BACKGROUND2_COLOR\", \"FOREGROUND_COLOR\", \"INACTIVE_COLOR\", \"SELECTION_COLOR\", \"BLACK\", \"BLUE\", \"CYAN\", \"DARK_BLUE\", \"DARK_CYAN\", \"DARK_GREEN\", \"DARK_MAGENTA\", \"DARK_RED\", \"DARK_YELLOW\", \"GREEN\", \"MAGENTA\", \"RED\", \"WHITE\", \"YELLOW\", \"GRAY0\", \"DARK3\", \"DARK2\", \"DARK1\", \"LIGHT1\", \"LIGHT2\", \"LIGHT3\"</p>"}, {"location": "type/widget/attributes/#font-constants", "title": "Font constants", "text": "<p>\"HELVETICA\", \"HELVETICA_BOLD\", \"HELVETICA_ITALIC\", \"HELVETICA_BOLD_ITALIC\", \"COURIER\", \"COURIER_BOLD\", \"COURIER_ITALIC\", \"COURIER_BOLD_ITALIC\", \"TIMES\", \"TIMES_BOLD\", \"TIMES_ITALIC\", \"TIMES_BOLD_ITALIC\", \"SYMBOL\", \"SCREEN\", \"SCREEN_BOLD\", \"ZAPF_DINGBATS\", \"FREE_FONT\"</p>"}, {"location": "type/widget/attributes/#cursor-style-constants", "title": "Cursor style constants", "text": "<p>\"DEFAULT\", \"ARROW\", \"CROSS\", \"WAIT\", \"INSERT\", \"HAND\", \"HELP\", \"MOVE\", \"NS\", \"WE\", \"NWSE\", \"NESW\", \"NONE\"</p>"}, {"location": "type/widget/attributes/#menu_bar-attributes", "title": "menu_bar attributes", "text": "<p>The array item is a list, where for each item the label is menu item label and the item value is an array of attributes to query for that menu item.</p> name get set options \"name\" :heavy_check_mark: :heavy_check_mark: \"path\" :heavy_check_mark: :heavy_check_mark: \"label\" :heavy_check_mark: :heavy_check_mark: \"data\" :heavy_check_mark: :heavy_check_mark: \"shortcut\" :heavy_check_mark: :heavy_check_mark: \"labelsize\" :heavy_check_mark: :heavy_check_mark: \"callback\" :heavy_check_mark: :heavy_check_mark: $OP \"options\" :heavy_check_mark: :heavy_minus_sign: \"flags\" :heavy_minus_sign: :heavy_check_mark: \"labelfont\" :heavy_minus_sign: :heavy_check_mark: \"labelcolor\" :heavy_minus_sign: :heavy_check_mark: \"setonly\" :heavy_minus_sign: :heavy_check_mark: <pre><code>w = $WIDGET(\"double_window\", 20, 50, 340, 220, \"test\", {color: \"BLUE\"});\nw.show();\nw +=  (tx:$WIDGET(\"text_display\", 20, 50, 300, 150));\nw.child(\"tx\").set({text:\"blank\"});\n\nw += (menu: $WIDGET(\"menu_bar\", 0, 0, 640, 30));\nm1_cb = op(o,cbdata,item) {o.parent().child(\"tx\").set({text:\"M1\"});};\nw.child(\"menu\") += (M1: {path: \"&amp;File/&amp;M1\", flags: [\"DIVIDER\"], shortcut: \"^a\", callback: m1_cb});\nm2_cb = op(o,cbdata,item) {o.parent().child(\"tx\").set({text:\"M2\"});};\nw.child(\"menu\") += (M2: {path: \"&amp;File/&amp;M2\", shortcut: \"^b\", callback: m2_cb});\n\nw.child(\"menu\").get([ {\"M1\":[\"path\",\"shortcut\"]} ]);\nw.child(\"menu\").set({child:{M1: {label: \"M1X\", \"labelsize\":18}}});\n</code></pre>"}, {"location": "type/widget/attributes/#on_post-handlers", "title": "on_post handlers", "text": "<p>Enables sending scripts (raw text script, not an $OP) to a widget to be compiled and run in a thread specific to that widget (async to other threads). </p> name value desc \"on_post_start\" $OP \"on_post_end\" $OP \"on_post_echo\" $OP <p>The script below will setup on_post handlers in the text_display widget, and then will exec a function in that widget to \"post\" a text script to be compiled and run in a thread. </p> <pre><code>w = $WIDGET(\"double_window\", 0, 0, 340, 260, \"test\", {color: \"BLUE\"});\nw.show();\nw += (ns:$WIDGET(\"button\", 20, 20, 40, 20, \"clear\", {on_release: op(o){o.next().set({\"text\":\"\"});} }));\nw += (tx:$WIDGET(\"text_display\", 20, 40, 300, 200));\nw.child(\"tx\").set({  \n    on_post_start: op(o)\n    {\n        o.set({text:\"\"});\n        o.append(\"on_post_start\\n\");\n    },\n    on_post_echo: op(o,data)\n    {\n        o.append(\"on_post_echo:\"+data.str()+\"\\n\");\n    },\n    on_post_end: op(o,data)\n    {\n        o.append(\"on_post_end:\"+data.str()+\"\\n\");\n    }\n   });\n\nw.child(\"tx\").set({exec:op(){\"(1).echo();2;\".post();}});\n</code></pre> <p>The result of the sccript below will create a window with a button and a text_display, with the text_display set to: <pre><code>on_post_start\non_post_echo:1\non_post_end:2\n</code></pre></p>"}, {"location": "use_cases/", "title": "Grapa Use Cases", "text": "<p>See Also: - Getting Started - Python Integration Guide - JS-to-Grapa Migration Guide - Examples</p>"}, {"location": "use_cases/#thread-safety-and-parallelism", "title": "Thread Safety and Parallelism", "text": "<p>Grapa is fully thread safe by design. All variable and data structure updates are internally synchronized at the C++ level, so you will never encounter crashes or corruption from concurrent access. However, if your program logic allows multiple threads to read and write the same variable or data structure, you may see logical race conditions (unexpected values, overwrites, etc.). This is a design consideration, not a stability issue. Minimize shared mutable state between threads unless intentional.</p> <p>Only <code>$thread()</code> objects provide explicit locking and unlocking via <code>lock()</code>, <code>unlock()</code>, and <code>trylock()</code>. To protect access to a shared resource, create a <code>$thread()</code> lock object and use it to guard access. Calling <code>.lock()</code> or <code>.unlock()</code> on a regular variable (like an array or scalar) will return an error.</p> <p>Canonical Example: <pre><code>lock_obj = $thread();\nlock_obj.lock();\n/* ... perform thread-safe operations on shared data ... */\nlock_obj.unlock();\n</code></pre></p> <p>See Threading and Locking and Function Operators: static and const for details and best practices.</p> <p>Grapa is designed to be inviting and usable for the broadest audience, from data engineers and scientists to educators and language researchers. Below are key use cases, each with a high-level overview and links to examples in both Grapa and Python (GrapaPy).</p>"}, {"location": "use_cases/#use-case-categories", "title": "Use Case Categories", "text": ""}, {"location": "use_cases/#1-etl-data-engineering", "title": "1. ETL / Data Engineering", "text": "<p>Grapa excels at Extract, Transform, Load (ETL) workflows, offering parallelism, unlimited precision, and unified file/database APIs. Ideal for data cleaning, transformation, and large-scale processing.</p> <p>Key Features: - Parallel Processing with <code>$thread</code> and <code>map/reduce/filter</code> - Unlimited Precision arithmetic with <code>$INT</code> and <code>$FLOAT</code> - Unified APIs for files, databases, and network resources - Memory-efficient large dataset processing</p>"}, {"location": "use_cases/#2-compilerbnf-learning", "title": "2. Compiler/BNF Learning", "text": "<p>With executable BNF and mutable grammar, Grapa is perfect for teaching and experimenting with language design, parsing, and compiler construction.</p> <p>Key Features: - Executable BNF grammar definitions - Mutable grammar modification at runtime - AST manipulation and transformation - Meta-programming capabilities</p>"}, {"location": "use_cases/#3-high-precision-math-scientific-computing", "title": "3. High-Precision Math &amp; Scientific Computing", "text": "<p>Grapa's $INT, $FLOAT, and $TIME types support unlimited precision, making it valuable for scientific, cryptographic, and financial applications.</p> <p>Key Features: - Unlimited precision arithmetic - Time series manipulation and analysis - Parallel mathematical computation - Memory-efficient large number handling</p>"}, {"location": "use_cases/#4-parallelconcurrent-programming", "title": "4. Parallel/Concurrent Programming", "text": "<p>Grapa's $thread, $net, and map/reduce/filter features enable true parallelism, overcoming Python's GIL and enabling high-performance data processing.</p> <p>Key Features: - True parallelism bypassing GIL limitations - Concurrent network operations - Functional programming with map/reduce/filter - Built-in thread safety primitives</p>"}, {"location": "use_cases/#5-webdata-scraping-automation", "title": "5. Web/Data Scraping &amp; Automation", "text": "<p>Grapa provides powerful tools for web scraping, API integration, and automation tasks with built-in rate limiting and error handling.</p> <p>Key Features: - HTTP requests with <code>$net().get()</code> and <code>$net().post()</code> - HTML/XML parsing with <code>$XML().parse()</code> - Rate limiting and error handling - Concurrent scraping operations</p>"}, {"location": "use_cases/#6-database-file-system-integration", "title": "6. Database &amp; File System Integration", "text": "<p>Unified APIs for files and databases boost productivity for backend developers, sysadmins, and data engineers.</p> <p>Key Features: - Unified interface for files and databases - SQL-like syntax for file operations - ACID transaction support - Parallel read/write operations</p>"}, {"location": "use_cases/#7-education-prototyping", "title": "7. Education &amp; Prototyping", "text": "<p>Grapa's dynamic grammar and meta-programming are ideal for rapid prototyping and teaching programming concepts.</p> <p>Key Features: - Interactive learning with immediate feedback - Visual debugging and execution tracing - Custom language and DSL creation - Algorithm visualization</p>"}, {"location": "use_cases/#8-cryptography", "title": "8. Cryptography", "text": "<p>Comprehensive cryptographic capabilities through OpenSSL integration and custom implementations for production-ready security applications.</p> <p>Key Features: - Prime number generation and testing - Modular arithmetic operations - Hash functions (SHA3 family, SHAKE) - RSA, Diffie-Hellman, and digital signatures</p> <p>For each use case, see the corresponding section for detailed examples in both Grapa and Python (GrapaPy). </p>"}, {"location": "use_cases/compiler_bnf_learning/", "title": "Compiler/BNF Learning", "text": "<p>With executable BNF and mutable grammar, Grapa is perfect for teaching and experimenting with language design, parsing, and compiler construction.</p>"}, {"location": "use_cases/compiler_bnf_learning/#key-features-for-bnfcompiler-work", "title": "Key Features for BNF/Compiler Work:", "text": "<ul> <li>Executable BNF: Define and test grammars directly in Grapa</li> <li>Mutable Grammar: Modify language syntax at runtime</li> <li>AST Manipulation: Build and transform abstract syntax trees</li> <li>Meta-programming: Generate code and modify language behavior</li> </ul>"}, {"location": "use_cases/compiler_bnf_learning/#example-simple-expression-parser", "title": "Example: Simple Expression Parser", "text": "<pre><code>/* Define a simple arithmetic expression grammar */\nexpression_grammar = {\n    \"expression\": \"term (( '+' | '-' ) term)*\",\n    \"term\": \"factor (( '*' | '/' ) factor)*\",\n    \"factor\": \"number | '(' expression ')',\",\n    \"number\": \"[0-9]+\"\n};\n\n/* Parse and evaluate expressions */\nparse_expression = op(expr) {\n    ast = $rule().parse(expr, expression_grammar);\n    $rule().evaluate(ast);\n};\n\n/* Test the parser */\ntest_expressions = [\"2+3*4\", \"(1+2)*3\", \"10/2+5\"];\nresults = test_expressions.map(op(expr) { parse_expression(expr); });\n</code></pre>"}, {"location": "use_cases/compiler_bnf_learning/#example-custom-language-extension", "title": "Example: Custom Language Extension", "text": "<pre><code>/* Extend Grapa with a custom \"repeat\" construct */\nextend_grammar = {\n    \"statement\": \"original_statement | repeat_statement\",\n    \"repeat_statement\": \"'repeat' number 'times' '{' statement* '}'\"\n};\n\n/* Implement the repeat functionality */\nexecute_repeat = op(ast) {\n    if (ast.get(\"type\") == \"repeat_statement\") {\n        count = ast.get(\"count\");\n        body = ast.get(\"body\");\n        i = 0;\n        while (i &lt; count) {\n            $rule().execute(body);\n            i += 1;\n        };\n    };\n};\n</code></pre> <ul> <li>See also: Python BNF/Compiler Examples </li> </ul>"}, {"location": "use_cases/cryptography/", "title": "Cryptography in Grapa", "text": ""}, {"location": "use_cases/cryptography/#overview", "title": "Overview", "text": "<p>Grapa provides comprehensive cryptographic capabilities through OpenSSL integration and custom implementations. All cryptographic functions are designed for production use with industry-standard security.</p>"}, {"location": "use_cases/cryptography/#security-foundation", "title": "Security Foundation", "text": "<ul> <li>OpenSSL Integration: Core functions use OpenSSL's battle-tested cryptographic primitives</li> <li>Industry Standards: Implements NIST-approved algorithms and security practices  </li> <li>Unlimited Precision: Handles arbitrarily large numbers for cryptographic operations</li> <li>Production Ready: Prime generation and primality testing use OpenSSL's <code>BN_generate_prime_ex()</code> and <code>BN_is_prime_ex()</code></li> </ul>"}, {"location": "use_cases/cryptography/#prime-number-operations", "title": "Prime Number Operations", "text": ""}, {"location": "use_cases/cryptography/#generating-prime-numbers", "title": "Generating Prime Numbers", "text": "<pre><code>/* Generate a random 256-bit prime */\nprime = 256.genprime();\n(\"Generated prime: \" + prime.str() + \"\\n\").echo();\n\n/* Generate a safe prime (p-1)/2 is also prime) */\nsafe_prime = 256.genprime(1);\n(\"Safe prime: \" + safe_prime.str() + \"\\n\").echo();\n\n/* Get a predefined prime for testing (specific bit sizes only) */\ntest_prime = 256.staticprime();\n(\"Test prime: \" + test_prime.str() + \"\\n\").echo();\n</code></pre> <p>Available staticprime() bit sizes: 2, 3, 4, 256, 512, 768, 1024, 1536, 2048, 3072, 4096</p>"}, {"location": "use_cases/cryptography/#testing-primality", "title": "Testing Primality", "text": "<pre><code>/* Test if a number is prime */\nis_prime = 17.isprime();\n(\"Is 17 prime? \" + is_prime.str() + \"\\n\").echo();\n\n/* Test with higher confidence (default is 64) */\nis_prime = 17.isprime(100);\n(\"Is 17 prime with confidence 100? \" + is_prime.str() + \"\\n\").echo();\n\n/* Test large numbers */\nlarge_number = 123456789012345678901234567890123456789;\nis_large_prime = large_number.isprime();\n(\"Is large number prime? \" + is_large_prime.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#modular-arithmetic", "title": "Modular Arithmetic", "text": ""}, {"location": "use_cases/cryptography/#modular-exponentiation", "title": "Modular Exponentiation", "text": "<pre><code>/* Calculate base^exponent mod modulus */\nbase = 7;\nexponent = 13;\nmodulus = 11;\nresult = base.modpow(exponent, modulus);\n(\"7^13 mod 11 = \" + result.str() + \"\\n\").echo();\n\n/* Large number example */\nlarge_base = 123456789;\nlarge_exponent = 987654321;\nlarge_modulus = 1000000007;\nlarge_result = large_base.modpow(large_exponent, large_modulus);\n(\"Large modpow result: \" + large_result.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#modular-multiplicative-inverse", "title": "Modular Multiplicative Inverse", "text": "<pre><code>/* Find modular inverse: (value * inverse) mod modulus = 1 */\nvalue = 3;\nmodulus = 11;\ninverse = value.modinv(modulus);\n(\"Modular inverse of 3 mod 11: \" + inverse.str() + \"\\n\").echo();\n(\"Verification: \" + ((value * inverse) % modulus).str() + \"\\n\").echo();\n\n/* Large number example */\nlarge_value = 123456789;\nlarge_modulus = 1000000007;\nlarge_inverse = large_value.modinv(large_modulus);\n(\"Large modular inverse: \" + large_inverse.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#greatest-common-divisor", "title": "Greatest Common Divisor", "text": "<pre><code>/* Find GCD of two numbers */\na = 48;\nb = 18;\ngcd_result = a.gcd(b);\n(\"GCD of 48 and 18: \" + gcd_result.str() + \"\\n\").echo();\n\n/* Large number example */\nlarge_a = 123456789012345678901234567890;\nlarge_b = 987654321098765432109876543210;\nlarge_gcd = large_a.gcd(large_b);\n(\"Large GCD: \" + large_gcd.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#hash-functions", "title": "Hash Functions", "text": ""}, {"location": "use_cases/cryptography/#sha3-family", "title": "SHA3 Family", "text": "<pre><code>/* SHA3 hash functions */\ndata = \"Hello, Grapa!\";\nsha3_224 = data.encode(\"SHA3-224\");\nsha3_256 = data.encode(\"SHA3-256\");\nsha3_384 = data.encode(\"SHA3-384\");\nsha3_512 = data.encode(\"SHA3-512\");\n\n(\"SHA3-224: \" + sha3_224.hex() + \"\\n\").echo();\n(\"SHA3-256: \" + sha3_256.hex() + \"\\n\").echo();\n(\"SHA3-384: \" + sha3_384.hex() + \"\\n\").echo();\n(\"SHA3-512: \" + sha3_512.hex() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#shake-functions", "title": "SHAKE Functions", "text": "<pre><code>/* SHAKE hash functions */\ndata = \"Hello, Grapa!\";\nshake128 = data.encode(\"SHAKE128\");\nshake256 = data.encode(\"SHAKE256\");\n\n(\"SHAKE128: \" + shake128.hex() + \"\\n\").echo();\n(\"SHAKE256: \" + shake256.hex() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#hash-function-output-sizes", "title": "Hash Function Output Sizes", "text": "Function Output Size SHA3-224 28 bytes (224 bits) SHA3-256 32 bytes (256 bits) SHA3-384 48 bytes (384 bits) SHA3-512 64 bytes (512 bits) SHAKE128 32 bytes (256 bits) default SHAKE256 64 bytes (512 bits) default"}, {"location": "use_cases/cryptography/#data-conversion", "title": "Data Conversion", "text": ""}, {"location": "use_cases/cryptography/#format-conversion", "title": "Format Conversion", "text": "<pre><code>/* Convert between formats */\ndata = \"Hello, Grapa!\";\nraw_bytes = data.raw();\nhex_string = data.hex();\nbinary_string = data.bin();\nunsigned_int = data.uint();\n\n(\"Raw bytes: \" + raw_bytes.str() + \"\\n\").echo();\n(\"Hex string: \" + hex_string + \"\\n\").echo();\n(\"Binary string: \" + binary_string + \"\\n\").echo();\n(\"Unsigned int: \" + unsigned_int.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#case-conversion", "title": "Case Conversion", "text": "<pre><code>/* Convert case for consistent comparison */\ndata = \"Hello, Grapa!\";\nlowercase = data.lower();\nuppercase = data.upper();\n\n(\"Lowercase: \" + lowercase + \"\\n\").echo();\n(\"Uppercase: \" + uppercase + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#practical-examples", "title": "Practical Examples", "text": ""}, {"location": "use_cases/cryptography/#rsa-cryptography", "title": "RSA Cryptography", "text": "<pre><code>/* Generate RSA keys using Grapa's prime functions */\ngenerate_rsa_keys = op(bits) {\n    /* Generate two large primes */\n    p = bits.genprime();\n    q = bits.genprime();\n\n    /* Calculate modulus and Euler's totient */\n    n = p * q;\n    phi = (p - 1) * (q - 1);\n\n    /* Choose public exponent (common choice) */\n    e = 65537;\n\n    /* Calculate private exponent */\n    d = e.modinv(phi);\n\n    /* Return key pair */\n    {\n        \"public_key\": {\"n\": n, \"e\": e},\n        \"private_key\": {\"n\": n, \"d\": d},\n        \"p\": p,\n        \"q\": q\n    };\n};\n\n/* RSA encryption */\nrsa_encrypt = op(message, public_key) {\n    message.modpow(public_key.get(\"e\"), public_key.get(\"n\"));\n};\n\n/* RSA decryption */\nrsa_decrypt = op(ciphertext, private_key) {\n    ciphertext.modpow(private_key.get(\"d\"), private_key.get(\"n\"));\n};\n\n/* Example usage */\nkeys = generate_rsa_keys(512);\nmessage = 12345;\nencrypted = rsa_encrypt(message, keys.get(\"public_key\"));\ndecrypted = rsa_decrypt(encrypted, keys.get(\"private_key\"));\n\n(\"Original message: \" + message.str() + \"\\n\").echo();\n(\"Encrypted: \" + encrypted.str() + \"\\n\").echo();\n(\"Decrypted: \" + decrypted.str() + \"\\n\").echo();\n(\"Success: \" + (message == decrypted).str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#diffie-hellman-key-exchange", "title": "Diffie-Hellman Key Exchange", "text": "<pre><code>/* Diffie-Hellman key exchange */\ndiffie_hellman_exchange = op() {\n    /* Use a known safe prime and generator */\n    p = 256.staticprime();  /* Large prime */\n    g = 2;  /* Generator */\n\n    /* Alice's private key (random) */\n    alice_private = $random().genbits(256);\n    alice_public = g.modpow(alice_private, p);\n\n    /* Bob's private key (random) */\n    bob_private = $random().genbits(256);\n    bob_public = g.modpow(bob_private, p);\n\n    /* Shared secret calculation */\n    shared_secret_alice = bob_public.modpow(alice_private, p);\n    shared_secret_bob = alice_public.modpow(bob_private, p);\n\n    /* Verify both parties get the same secret */\n    success = shared_secret_alice == shared_secret_bob;\n\n    {\n        \"p\": p,\n        \"g\": g,\n        \"alice_private\": alice_private,\n        \"alice_public\": alice_public,\n        \"bob_private\": bob_private,\n        \"bob_public\": bob_public,\n        \"shared_secret\": shared_secret_alice,\n        \"success\": success\n    };\n};\n\n/* Run the exchange */\nresult = diffie_hellman_exchange();\n(\"Diffie-Hellman Exchange Result:\\n\").echo();\n(\"Shared secret: \" + result.get(\"shared_secret\").str() + \"\\n\").echo();\n(\"Exchange successful: \" + result.get(\"success\").str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#digital-signatures", "title": "Digital Signatures", "text": "<pre><code>/* Simple digital signature using hash functions */\ncreate_signature = op(message, private_key) {\n    /* Hash the message */\n    message_hash = message.encode(\"SHA3-256\");\n\n    /* Sign the hash using private key */\n    signature = message_hash.modpow(private_key.get(\"d\"), private_key.get(\"n\"));\n\n    signature;\n};\n\nverify_signature = op(message, signature, public_key) {\n    /* Hash the message */\n    message_hash = message.encode(\"SHA3-256\");\n\n    /* Verify signature using public key */\n    recovered_hash = signature.modpow(public_key.get(\"e\"), public_key.get(\"n\"));\n\n    /* Compare hashes */\n    message_hash == recovered_hash;\n};\n\n/* Example usage */\nkeys = generate_rsa_keys(512);\nmessage = \"Hello, Grapa!\";\nsignature = create_signature(message, keys.get(\"private_key\"));\nis_valid = verify_signature(message, signature, keys.get(\"public_key\"));\n\n(\"Message: \" + message + \"\\n\").echo();\n(\"Signature: \" + signature.str() + \"\\n\").echo();\n(\"Signature valid: \" + is_valid.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#data-integrity-verification", "title": "Data Integrity Verification", "text": "<pre><code>/* Hash data for integrity verification */\nhash_data = op(data) {\n    {\n        \"sha3_224\": data.encode(\"SHA3-224\").hex(),\n        \"sha3_256\": data.encode(\"SHA3-256\").hex(),\n        \"sha3_384\": data.encode(\"SHA3-384\").hex(),\n        \"sha3_512\": data.encode(\"SHA3-512\").hex(),\n        \"shake128\": data.encode(\"SHAKE128\").hex(),\n        \"shake256\": data.encode(\"SHAKE256\").hex()\n    };\n};\n\n/* Verify data integrity */\nverify_integrity = op(data, expected_hash) {\n    actual_hash = data.encode(\"SHA3-256\").hex().lower();\n    expected_hash.lower() == actual_hash;\n};\n\n/* Example usage */\ndata = \"Important data that must not be tampered with\";\nhashes = hash_data(data);\n(\"Data hashes:\\n\").echo();\n(\"SHA3-256: \" + hashes.get(\"sha3_256\") + \"\\n\").echo();\n\n/* Later, verify integrity */\nis_intact = verify_integrity(data, hashes.get(\"sha3_256\"));\n(\"Data integrity verified: \" + is_intact.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#password-hashing", "title": "Password Hashing", "text": "<pre><code>/* Simple password hashing with salt */\nhash_password = op(password, salt) {\n    /* Combine password and salt */\n    combined = password + salt;\n\n    /* Hash multiple times for security */\n    hash1 = combined.encode(\"SHA3-256\");\n    hash2 = hash1.encode(\"SHA3-256\");\n    hash3 = hash2.encode(\"SHA3-256\");\n\n    hash3.hex();\n};\n\n/* Verify password */\nverify_password = op(password, salt, stored_hash) {\n    computed_hash = hash_password(password, salt);\n    computed_hash.lower() == stored_hash.lower();\n};\n\n/* Example usage */\npassword = \"mysecretpassword\";\nsalt = \"randomsalt123\";\nstored_hash = hash_password(password, salt);\n\n(\"Stored hash: \" + stored_hash + \"\\n\").echo();\n\n/* Verify later */\nis_correct = verify_password(password, salt, stored_hash);\n(\"Password correct: \" + is_correct.str() + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#security-best-practices", "title": "Security Best Practices", "text": ""}, {"location": "use_cases/cryptography/#key-generation", "title": "Key Generation", "text": "<pre><code>/* Generate secure keys */\ngenerate_secure_keys = op() {\n    /* Use sufficient key sizes */\n    p = 1024.genprime(1);  /* Safe prime */\n    q = 1024.genprime(1);  /* Safe prime */\n\n    /* Verify primality */\n    p_prime = p.isprime(100);\n    q_prime = q.isprime(100);\n\n    /* Generate fresh random primes */\n    {\n        \"p\": p,\n        \"q\": q,\n        \"p_is_prime\": p_prime,\n        \"q_is_prime\": q_prime,\n        \"key_size_bits\": (p.bitCount() + q.bitCount())\n    };\n};\n</code></pre>"}, {"location": "use_cases/cryptography/#hash-function-best-practices", "title": "Hash Function Best Practices", "text": "<pre><code>/* Secure hash comparison */\nsecure_hash_compare = op(hash1, hash2) {\n    /* Use constant-time comparison to prevent timing attacks */\n    hash1.lower() == hash2.lower();\n};\n\n/* Hash with salt for passwords */\nsecure_password_hash = op(password, salt) {\n    /* Use multiple rounds */\n    combined = password + salt;\n    hash = combined.encode(\"SHA3-256\");\n\n    /* Multiple iterations */\n    hash = hash.encode(\"SHA3-256\");\n    hash = hash.encode(\"SHA3-256\");\n\n    hash.hex();\n};\n</code></pre>"}, {"location": "use_cases/cryptography/#input-validation", "title": "Input Validation", "text": "<pre><code>/* Validate cryptographic inputs */\nvalidate_crypto_inputs = op(value, modulus) {\n    /* Check for valid parameters */\n    if (value &lt;= 0) {\n        return \"Error: Value must be positive\";\n    }\n\n    if (modulus &lt;= 1) {\n        return \"Error: Modulus must be greater than 1\";\n    }\n\n    if (value &gt;= modulus) {\n        return \"Error: Value must be less than modulus\";\n    }\n\n    \"Valid\";\n};\n\n/* Safe modular inverse */\nsafe_modinv = op(value, modulus) {\n    validation = validate_crypto_inputs(value, modulus);\n    if (validation != \"Valid\") {\n        return validation;\n    }\n\n    /* Check if inverse exists */\n    gcd_result = value.gcd(modulus);\n    if (gcd_result != 1) {\n        return \"Error: Modular inverse does not exist\";\n    }\n\n    value.modinv(modulus);\n};\n</code></pre>"}, {"location": "use_cases/cryptography/#performance-considerations", "title": "Performance Considerations", "text": ""}, {"location": "use_cases/cryptography/#large-number-operations", "title": "Large Number Operations", "text": "<pre><code>/* Benchmark prime generation */\nbenchmark_prime_gen = op(bits) {\n    start_time = $time();\n    prime = bits.genprime();\n    end_time = $time();\n\n    {\n        \"bits\": bits,\n        \"prime\": prime,\n        \"time_seconds\": end_time - start_time\n    };\n};\n\n/* Test different bit sizes */\nsizes = [128, 256, 512, 1024];\nsizes.range().each(op(i) {\n    result = benchmark_prime_gen(sizes.get(i));\n    (\"Bits: \" + result.get(\"bits\").str() + \" Time: \" + result.get(\"time_seconds\").str() + \" seconds\\n\").echo();\n});\n</code></pre>"}, {"location": "use_cases/cryptography/#memory-usage", "title": "Memory Usage", "text": "<pre><code>/* Monitor memory usage for large operations */\nlarge_operation = op() {\n    /* Large prime generation */\n    large_prime = 2048.genprime();\n\n    /* Large modular exponentiation */\n    base = 123456789;\n    exponent = large_prime - 1;\n    modulus = large_prime;\n\n    result = base.modpow(exponent, modulus);\n\n    \"Large operation completed\";\n};\n</code></pre>"}, {"location": "use_cases/cryptography/#error-handling", "title": "Error Handling", "text": ""}, {"location": "use_cases/cryptography/#common-errors-and-solutions", "title": "Common Errors and Solutions", "text": "<pre><code>/* Handle common cryptographic errors */\nsafe_crypto_operation = op(operation, params) {\n    try {\n        /* Attempt the operation */\n        if (operation == \"modinv\") {\n            params.get(\"value\").modinv(params.get(\"modulus\"));\n        } else if (operation == \"modpow\") {\n            params.get(\"base\").modpow(params.get(\"exponent\"), params.get(\"modulus\"));\n        } else if (operation == \"genprime\") {\n            params.get(\"bits\").genprime();\n        } else {\n            \"Error: Unknown operation\";\n        }\n    } catch (error) {\n        \"Error: \" + error;\n    }\n};\n\n/* Example usage */\nresult1 = safe_crypto_operation(\"modinv\", {\"value\": 3, \"modulus\": 11});\nresult2 = safe_crypto_operation(\"modinv\", {\"value\": 3, \"modulus\": 0});  /* Invalid */\n\n(\"Valid operation: \" + result1 + \"\\n\").echo();\n(\"Invalid operation: \" + result2 + \"\\n\").echo();\n</code></pre>"}, {"location": "use_cases/cryptography/#openssl-integration", "title": "OpenSSL Integration", "text": ""}, {"location": "use_cases/cryptography/#benefits", "title": "Benefits", "text": "<ul> <li>Industry Standard: Uses OpenSSL's <code>BN_generate_prime_ex()</code> and <code>BN_is_prime_ex()</code></li> <li>Security Audited: OpenSSL is extensively tested and audited</li> <li>High Performance: Optimized C implementations</li> <li>Regular Updates: Security patches and improvements</li> </ul>"}, {"location": "use_cases/cryptography/#functions-using-openssl", "title": "Functions Using OpenSSL", "text": "Grapa Function OpenSSL Function Purpose <code>genprime()</code> <code>BN_generate_prime_ex()</code> Generate random primes <code>isprime()</code> <code>BN_is_prime_ex()</code> Test primality All modular arithmetic OpenSSL BIGNUM Large number operations"}, {"location": "use_cases/cryptography/#references", "title": "References", "text": "<ul> <li>OpenSSL Documentation</li> <li>NIST Cryptographic Standards</li> <li>RFC 8017 - RSA Cryptography</li> <li>SHA3 Standard</li> <li>Diffie-Hellman Key Exchange</li> </ul>"}, {"location": "use_cases/cryptography/#examples-summary", "title": "Examples Summary", "text": "<p>This documentation provides comprehensive examples for:</p> <ol> <li>Prime Number Operations: Generation and testing</li> <li>Modular Arithmetic: Exponentiation, inverse, GCD</li> <li>Hash Functions: SHA3 and SHAKE families</li> <li>RSA Cryptography: Key generation, encryption, decryption</li> <li>Diffie-Hellman: Key exchange protocol</li> <li>Digital Signatures: Message signing and verification</li> <li>Data Integrity: Hash-based verification</li> <li>Password Security: Hashing with salt</li> <li>Security Best Practices: Input validation, secure comparisons</li> <li>Performance: Benchmarking and optimization</li> <li>Error Handling: Robust error management</li> </ol> <p>All examples are production-ready and use industry-standard cryptographic practices with OpenSSL integration. </p>"}, {"location": "use_cases/database_file_system/", "title": "Database &amp; File System Integration", "text": "<p>Unified APIs for files and databases boost productivity for backend developers, sysadmins, and data engineers.</p>"}, {"location": "use_cases/database_file_system/#key-features-for-filedb-work", "title": "Key Features for File/DB Work:", "text": "<ul> <li>Unified Interface: Same APIs for files and databases</li> <li>Query Language: SQL-like syntax for file operations</li> <li>Transaction Support: ACID compliance for data integrity</li> <li>Parallel Access: Concurrent read/write operations</li> </ul>"}, {"location": "use_cases/database_file_system/#example-file-system-operations", "title": "Example: File System Operations", "text": "<pre><code>/* Recursive file processing */\nprocess_files = op(directory, file_pattern) {\n    files = $file().find(directory, file_pattern);\n\n    results = files.map(op(file) {\n        try {\n            content = $file().read(file);\n            stats = $file().stat(file);\n\n            {\n                \"file\": file,\n                \"size\": stats.get(\"size\"),\n                \"modified\": stats.get(\"modified\"),\n                \"lines\": content.split(\"\\n\").len(),\n                \"words\": content.split(\" \").len()\n            };\n        } catch (error) {\n            {\"file\": file, \"error\": error.get(\"message\")};\n        };\n    });\n\n    results;\n};\n\n/* Database-like file queries */\nquery_files = op(directory) {\n    /* Find all Python files larger than 1KB */\n    large_python_files = $file().select(\"* from \" + directory + \" where name like '*.py' and size &gt; 1024\");\n\n    /* Group by directory */\n    grouped = large_python_files.group(op(file) { $file().dirname(file); });\n\n    grouped.map(op(dir, files) {\n        {\n            \"directory\": dir,\n            \"file_count\": files.len(),\n            \"total_size\": files.reduce(op(sum, f) { sum + f.get(\"size\"); }, 0)\n        };\n    });\n};\n</code></pre>"}, {"location": "use_cases/database_file_system/#example-database-operations", "title": "Example: Database Operations", "text": "<pre><code>/* Create and populate a database table */\ncreate_user_table = op() {\n    /* Create table with schema */\n    $TABLE().create(\"users\", {\n        \"id\": \"INT PRIMARY KEY\",\n        \"name\": \"STR\",\n        \"email\": \"STR UNIQUE\",\n        \"created_at\": \"TIME\"\n    });\n\n    /* Insert sample data */\n    users_data = [\n        {1, \"Alice Johnson\", \"alice@example.com\", $TIME().now()},\n        {2, \"Bob Smith\", \"bob@example.com\", $TIME().now()},\n        {3, \"Carol Davis\", \"carol@example.com\", $TIME().now()}\n    ];\n\n    users_data.map(op(user) {\n        $TABLE().insert(\"users\", user);\n    });\n\n    \"User table created and populated\".echo();\n};\n\n/* Query and process database data */\nquery_users = op() {\n    /* Find users by email domain */\n    gmail_users = $TABLE().select(\"SELECT * FROM users WHERE email LIKE '%@gmail.com'\");\n\n    /* Aggregate user statistics */\n    total_users = $TABLE().select(\"SELECT COUNT(*) as count FROM users\");\n    avg_name_length = $TABLE().select(\"SELECT AVG(LENGTH(name)) as avg_length FROM users\");\n\n    {\n        \"gmail_users\": gmail_users,\n        \"total_users\": total_users.get(0).get(\"count\"),\n        \"avg_name_length\": avg_name_length.get(0).get(\"avg_length\")\n    };\n};\n</code></pre>"}, {"location": "use_cases/database_file_system/#example-file-system-monitoring", "title": "Example: File System Monitoring", "text": "<pre><code>/* Monitor file system changes */\nmonitor_directory = op(directory, interval_ms) {\n    initial_files = $file().find(directory, \"*\");\n    initial_state = {};\n\n    /* Create initial file state */\n    initial_files.map(op(file) {\n        stats = $file().stat(file);\n        initial_state.set(file, {\n            \"size\": stats.get(\"size\"),\n            \"modified\": stats.get(\"modified\")\n        });\n    });\n\n    /* Monitor for changes */\n    while (true) {\n        current_files = $file().find(directory, \"*\");\n        current_state = {};\n\n        current_files.map(op(file) {\n            stats = $file().stat(file);\n            current_state.set(file, {\n                \"size\": stats.get(\"size\"),\n                \"modified\": stats.get(\"modified\")\n            });\n        });\n\n        /* Detect new files */\n        new_files = current_files.filter(op(file) { !initial_state.has(file); });\n        if (new_files.len() &gt; 0) {\n            (\"New files detected: \" + new_files.join(\", \")).echo();\n        };\n\n        /* Detect modified files */\n        modified_files = current_files.filter(op(file) {\n            if (initial_state.has(file)) {\n                initial = initial_state.get(file);\n                current = current_state.get(file);\n                initial.get(\"size\") != current.get(\"size\") || \n                initial.get(\"modified\") != current.get(\"modified\");\n            } else {\n                false;\n            };\n        });\n\n        if (modified_files.len() &gt; 0) {\n            (\"Modified files: \" + modified_files.join(\", \")).echo();\n        };\n\n        /* Update state */\n        initial_state = current_state;\n\n        /* Wait before next check */\n        $sys().sleep(interval_ms);\n    };\n};\n</code></pre>"}, {"location": "use_cases/database_file_system/#example-data-backup-and-sync", "title": "Example: Data Backup and Sync", "text": "<pre><code>/* Backup database to file system */\nbackup_database = op(database_name, backup_dir) {\n    /* Get all tables */\n    tables = $TABLE().tables();\n\n    backup_data = {};\n    tables.map(op(table) {\n        /* Export table data */\n        table_data = $TABLE().select(\"SELECT * FROM \" + table);\n        backup_data.set(table, table_data);\n    });\n\n    /* Save backup to file */\n    backup_file = backup_dir + \"/\" + database_name + \"_\" + $TIME().now().str() + \".json\";\n    $file().write(backup_file, $JSON().stringify(backup_data));\n\n    (\"Database backup saved to: \" + backup_file).echo();\n    backup_file;\n};\n\n/* Restore database from backup */\nrestore_database = op(backup_file) {\n    /* Read backup data */\n    backup_content = $file().read(backup_file);\n    backup_data = $JSON().parse(backup_content);\n\n    /* Restore each table */\n    backup_data.keys().map(op(table) {\n        table_data = backup_data.get(table);\n\n        /* Drop existing table if it exists */\n        try {\n            $TABLE().drop(table);\n        } catch (error) {\n            /* Table doesn't exist, continue */\n        };\n\n        /* Recreate table and insert data */\n        if (table_data.len() &gt; 0) {\n            /* Create table with inferred schema */\n            sample_row = table_data.get(0);\n            schema = {};\n            sample_row.keys().map(op(key) {\n                value = sample_row.get(key);\n                if (value.type() == \"$INT\") {\n                    schema.set(key, \"INT\");\n                } else if (value.type() == \"$FLOAT\") {\n                    schema.set(key, \"FLOAT\");\n                } else {\n                    schema.set(key, \"STR\");\n                };\n            });\n\n            $TABLE().create(table, schema);\n\n            /* Insert data */\n            table_data.map(op(row) {\n                $TABLE().insert(table, row);\n            });\n        };\n\n        (\"Restored table: \" + table).echo();\n    });\n\n    \"Database restoration completed\".echo();\n};\n</code></pre> <ul> <li>See also: Python File/DB Examples </li> </ul>"}, {"location": "use_cases/education_prototyping/", "title": "Education &amp; Prototyping", "text": "<p>Grapa's dynamic grammar and meta-programming are ideal for rapid prototyping and teaching programming concepts.</p>"}, {"location": "use_cases/education_prototyping/#key-features-for-education", "title": "Key Features for Education:", "text": "<ul> <li>Interactive Learning: Immediate feedback and experimentation</li> <li>Visual Debugging: See AST and execution flow</li> <li>Language Design: Create custom languages and DSLs</li> <li>Algorithm Visualization: Step-through execution</li> </ul>"}, {"location": "use_cases/education_prototyping/#example-teaching-recursion", "title": "Example: Teaching Recursion", "text": "<pre><code>/* Visualize recursive function execution */\nfactorial_with_trace = op(n, depth) {\n    indent = \"  \".repeat(depth);\n    (indent + \"factorial(\" + n.str() + \")\").echo();\n    if (n &lt;= 1) {\n        (indent + \"return 1\").echo();\n        1;\n    } else {\n        result = n * factorial_with_trace(n - 1, depth + 1);\n        (indent + \"return \" + n.str() + \" * \" + (n - 1).str() + \"! = \" + result.str()).echo();\n        result;\n    };\n};\n\n/* Example: Calculate 4! with trace */\n\"Calculating 4! with execution trace:\".echo();\nresult = factorial_with_trace(4, 0);\n(\"Final result: \" + result.str()).echo();\n</code></pre>"}, {"location": "use_cases/education_prototyping/#example-custom-dsl-for-data-processing", "title": "Example: Custom DSL for Data Processing", "text": "<pre><code>/* Define a simple data processing language */\ndata_dsl_grammar = {\n    \"pipeline\": \"command*\",\n    \"command\": \"filter_command | map_command | reduce_command\",\n    \"filter_command\": \"'filter' condition\",\n    \"map_command\": \"'map' expression\", \n    \"reduce_command\": \"'reduce' expression 'with' initial_value\",\n    \"condition\": \"field operator value\",\n    \"expression\": \"field | function_call\",\n    \"operator\": \"'==' | '!=' | '&gt;' | '&lt;' | '&gt;=' | '&lt;='\"\n};\n\n/* Example DSL usage */\ndsl_script = \"\nfilter age &gt; 18\nmap salary * 1.1\nreduce sum with 0\n\";\n\n/* Execute the DSL */\nexecute_dsl = op(script, data) {\n    ast = $rule().parse(script, data_dsl_grammar);\n    $rule().execute(ast, data);\n};\n</code></pre>"}, {"location": "use_cases/education_prototyping/#example-algorithm-visualization", "title": "Example: Algorithm Visualization", "text": "<pre><code>/* Visualize sorting algorithms */\nbubble_sort_with_trace = op(array) {\n    n = array.len();\n    trace = [];\n\n    i = 0;\n    while (i &lt; n - 1) {\n        j = 0;\n        while (j &lt; n - i - 1) {\n            /* Show current state */\n            current_state = array.copy();\n            trace += {\n                \"step\": \"Compare \" + array.get(j).str() + \" and \" + array.get(j + 1).str(),\n                \"array\": current_state,\n                \"comparing\": [j, j + 1]\n            };\n\n            /* Swap if needed */\n            if (array.get(j) &gt; array.get(j + 1)) {\n                temp = array.get(j);\n                array.set(j, array.get(j + 1));\n                array.set(j + 1, temp);\n\n                trace += {\n                    \"step\": \"Swap \" + array.get(j).str() + \" and \" + array.get(j + 1).str(),\n                    \"array\": array.copy(),\n                    \"swapped\": [j, j + 1]\n                };\n            };\n            j += 1;\n        };\n        i += 1;\n    };\n\n    {\"sorted_array\": array, \"trace\": trace};\n};\n\n/* Example usage */\ndata = [64, 34, 25, 12, 22, 11, 90];\nresult = bubble_sort_with_trace(data);\n\n\"Bubble Sort Visualization:\".echo();\nresult.get(\"trace\").map(op(step) {\n    (step.get(\"step\") + \": \" + step.get(\"array\").join(\", \")).echo();\n});\n\n(\"Final sorted array: \" + result.get(\"sorted_array\").join(\", \")).echo();\n</code></pre>"}, {"location": "use_cases/education_prototyping/#example-interactive-language-learning", "title": "Example: Interactive Language Learning", "text": "<pre><code>/* Interactive calculator with step-by-step evaluation */\ninteractive_calculator = op(expression) {\n    /* Parse the expression */\n    ast = $rule().parse(expression, {\n        \"expression\": \"term (( '+' | '-' ) term)*\",\n        \"term\": \"factor (( '*' | '/' ) factor)*\",\n        \"factor\": \"number | '(' expression ')'\",\n        \"number\": \"[0-9]+\"\n    });\n\n    /* Evaluate with trace */\n    evaluate_with_trace = op(node, depth) {\n        indent = \"  \".repeat(depth);\n\n        if (node.type() == \"number\") {\n            value = node.get(\"value\").int();\n            (indent + \"Number: \" + value.str()).echo();\n            value;\n        } else if (node.type() == \"expression\") {\n            (indent + \"Expression: \" + node.get(\"text\")).echo();\n\n            if (node.get(\"terms\").len() == 1) {\n                evaluate_with_trace(node.get(\"terms\").get(0), depth + 1);\n            } else {\n                left = evaluate_with_trace(node.get(\"terms\").get(0), depth + 1);\n                operator = node.get(\"operators\").get(0);\n                right = evaluate_with_trace(node.get(\"terms\").get(1), depth + 1);\n\n                result = 0;\n                if (operator == \"+\") {\n                    result = left + right;\n                } else if (operator == \"-\") {\n                    result = left - right;\n                };\n\n                (indent + \"Result: \" + left.str() + \" \" + operator + \" \" + right.str() + \" = \" + result.str()).echo();\n                result;\n            };\n        } else {\n            /* Handle other node types */\n            0;\n        };\n    };\n\n    evaluate_with_trace(ast, 0);\n};\n\n/* Example usage */\n\"Interactive Calculator:\".echo();\nresult = interactive_calculator(\"2 + 3 * 4\");\n(\"Final result: \" + result.str()).echo();\n</code></pre>"}, {"location": "use_cases/education_prototyping/#example-prototype-web-framework", "title": "Example: Prototype Web Framework", "text": "<pre><code>/* Simple web framework prototype */\nsimple_web_framework = op() {\n    routes = {};\n\n    {\n        \"get\": op(path, handler) {\n            routes.set(\"GET:\" + path, handler);\n        },\n        \"post\": op(path, handler) {\n            routes.set(\"POST:\" + path, handler);\n        },\n        \"handle_request\": op(method, path, data) {\n            route_key = method + \":\" + path;\n            if (routes.has(route_key)) {\n                handler = routes.get(route_key);\n                handler(data);\n            } else {\n                {\"status\": 404, \"body\": \"Not Found\"};\n            };\n        }\n    };\n};\n\n/* Example usage */\napp = simple_web_framework();\n\n/* Define routes */\napp.get(\"/hello\", op(data) {\n    {\"status\": 200, \"body\": \"Hello, World!\"};\n});\n\napp.post(\"/echo\", op(data) {\n    {\"status\": 200, \"body\": \"Echo: \" + data.get(\"message\")};\n});\n\n/* Handle requests */\nresponse1 = app.handle_request(\"GET\", \"/hello\", {});\nresponse2 = app.handle_request(\"POST\", \"/echo\", {\"message\": \"Hello from Grapa!\"});\n\n(\"Response 1: \" + response1.get(\"body\")).echo();\n(\"Response 2: \" + response2.get(\"body\")).echo();\n</code></pre> <ul> <li>See also: Python Education Examples </li> </ul>"}, {"location": "use_cases/etl_data_engineering/", "title": "ETL / Data Engineering", "text": "<p>Grapa excels at Extract, Transform, Load (ETL) workflows, offering parallelism, unlimited precision, and unified file/database APIs. Ideal for data cleaning, transformation, and large-scale processing.</p>"}, {"location": "use_cases/etl_data_engineering/#key-features-for-etl", "title": "Key Features for ETL:", "text": "<ul> <li>Parallel Processing: Use <code>$thread</code> and <code>map/reduce/filter</code> for high-performance data transformation</li> <li>Unlimited Precision: Handle large numbers and precise calculations with <code>$INT</code> and <code>$FLOAT</code></li> <li>Unified APIs: Seamlessly work with files, databases, and network resources</li> <li>Memory Efficiency: Process large datasets without loading everything into memory</li> </ul>"}, {"location": "use_cases/etl_data_engineering/#example-parallel-csv-processing", "title": "Example: Parallel CSV Processing", "text": "<pre><code>/* Extract: Read multiple CSV files in parallel */\nfiles = [\"data1.csv\", \"data2.csv\", \"data3.csv\"];\ndata = files.map(op(file) { $file().read(file).split(\"\\n\"); });\n\n/* Transform: Clean and validate data in parallel */\nclean_data = data.map(op(rows) { \n    rows.filter(op(row) { \n        fields = row.split(\",\");\n        fields.len() == 5 &amp;&amp; fields.get(0) != \"\";  /* Validate row structure */\n    });\n});\n\n/* Load: Aggregate results and save to database */\ntotal_records = clean_data.reduce(op(sum, rows) { sum + rows.len(); }, 0);\n(\"Processed \" + total_records.str() + \" records across \" + files.len().str() + \" files\").echo();\n</code></pre>"}, {"location": "use_cases/etl_data_engineering/#example-data-validation-pipeline", "title": "Example: Data Validation Pipeline", "text": "<pre><code>/* Define validation rules */\nrules = {\n    \"email\": {\"pattern\": \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"},\n    \"age\": {\"min\": 0, \"max\": 150},\n    \"salary\": {\"min\": 0, \"max\": 1000000}\n};\n\n/* Validate data in parallel */\nvalidate_record = op(record, rules) {\n    errors = [];\n    if (!record.get(\"email\").match(rules.get(\"email\").get(\"pattern\"))) {\n        errors += \"Invalid email format\";\n    };\n    if (record.get(\"age\") &lt; rules.get(\"age\").get(\"min\") || record.get(\"age\") &gt; rules.get(\"age\").get(\"max\")) {\n        errors += \"Age out of range\";\n    };\n    if (record.get(\"salary\") &lt; rules.get(\"salary\").get(\"min\") || record.get(\"salary\") &gt; rules.get(\"salary\").get(\"max\")) {\n        errors += \"Salary out of range\";\n    };\n    {\"record\": record, \"errors\": errors, \"valid\": errors.len() == 0};\n};\n\n/* Process validation results */\nresults = data.map(op(record) { validate_record(record, rules); });\nvalid_records = results.filter(op(result) { result.get(\"valid\"); });\ninvalid_records = results.filter(op(result) { !result.get(\"valid\"); });\n\n(\"Valid records: \" + valid_records.len().str()).echo();\n(\"Invalid records: \" + invalid_records.len().str()).echo();\n</code></pre>"}, {"location": "use_cases/etl_data_engineering/#example-time-series-data-processing", "title": "Example: Time Series Data Processing", "text": "<pre><code>/* Process time series data with unlimited precision */\nprocess_timestamps = op(data) {\n    data.map(op(row) {\n        timestamp = $TIME().parse(row.get(\"timestamp\"));\n        value = row.get(\"value\").float();\n        {\n            \"timestamp\": timestamp,\n            \"value\": value,\n            \"hour\": timestamp.hour(),\n            \"day\": timestamp.day(),\n            \"month\": timestamp.month()\n        };\n    });\n};\n\n/* Aggregate by time periods */\naggregate_by_hour = op(processed_data) {\n    grouped = processed_data.group(op(record) { record.get(\"hour\"); });\n    grouped.map(op(hour, records) {\n        {\n            \"hour\": hour,\n            \"count\": records.len(),\n            \"avg_value\": records.reduce(op(sum, r) { sum + r.get(\"value\"); }, 0) / records.len(),\n            \"min_value\": records.map(op(r) { r.get(\"value\"); }).min(),\n            \"max_value\": records.map(op(r) { r.get(\"value\"); }).max()\n        };\n    });\n};\n</code></pre> <ul> <li>See also: Python ETL Examples</li> </ul> <p>Best Practice: Grapa's parallelism is a core, production-ready feature, specifically designed and hardened for ETL and high-throughput data processing. Users can confidently leverage <code>.map()</code>, <code>.filter()</code>, and related methods for robust, parallel ETL workloads. For Python Users: See the Python Integration Guide and Migration Tips for Python Users for guidance on using Grapa for ETL and data processing from Python. </p>"}, {"location": "use_cases/high_precision_math/", "title": "High-Precision Math &amp; Scientific Computing", "text": "<p>Grapa's $INT, $FLOAT, and $TIME types support unlimited precision, making it valuable for scientific, cryptographic, and financial applications.</p>"}, {"location": "use_cases/high_precision_math/#key-features-for-mathscientific-work", "title": "Key Features for Math/Scientific Work:", "text": "<ul> <li>Unlimited Precision: Handle arbitrarily large numbers and precise calculations</li> <li>Time Series: Built-in time manipulation and analysis</li> <li>Parallel Computation: Distribute mathematical workloads across threads</li> <li>Memory Efficiency: Process large datasets without precision loss</li> </ul>"}, {"location": "use_cases/high_precision_math/#example-financial-calculations", "title": "Example: Financial Calculations", "text": "<pre><code>/* Calculate compound interest with unlimited precision */\ncompound_interest = op(principal, rate, time, periods) {\n    rate_per_period = rate / periods;\n    total_periods = time * periods;\n    principal * (1 + rate_per_period).pow(total_periods);\n};\n\n/* Calculate mortgage payments */\nmortgage_payment = op(principal, annual_rate, years) {\n    monthly_rate = annual_rate / 12 / 100;\n    total_payments = years * 12;\n    principal * (monthly_rate * (1 + monthly_rate).pow(total_payments)) /\n              ((1 + monthly_rate).pow(total_payments) - 1);\n};\n\n/* Example calculations */\nloan_amount = 300000;\nannual_rate = 3.5;\nloan_years = 30;\n\nmonthly_payment = mortgage_payment(loan_amount, annual_rate, loan_years);\ntotal_paid = monthly_payment * loan_years * 12;\ntotal_interest = total_paid - loan_amount;\n\n(\"Monthly payment: $\" + monthly_payment.str()).echo();\n</code></pre>"}, {"location": "use_cases/high_precision_math/#example-scientific-computing", "title": "Example: Scientific Computing", "text": "<pre><code>/* Calculate pi using infinite series with unlimited precision */\ncalculate_pi = op(iterations) {\n    pi = 0;\n    i = 0;\n    while (i &lt; iterations) {\n        term = 4 / (2 * i + 1);\n        if (i % 2 == 0) {\n            pi += term;\n        } else {\n            pi -= term;\n        };\n        i += 1;\n    };\n    pi;\n};\n\n/* Calculate with high precision */\npi_approximation = calculate_pi(1000000);\n(\"Pi approximation: \" + pi_approximation.str()).echo();\n</code></pre>"}, {"location": "use_cases/high_precision_math/#example-time-series-analysis", "title": "Example: Time Series Analysis", "text": "<pre><code>/* Process time series data with unlimited precision */\nprocess_timestamps = op(data) {\n    data.map(op(row) {\n        timestamp = $TIME().parse(row.get(\"timestamp\"));\n        value = row.get(\"value\").float();\n        {\n            \"timestamp\": timestamp,\n            \"value\": value,\n            \"hour\": timestamp.hour(),\n            \"day\": timestamp.day(),\n            \"month\": timestamp.month()\n        };\n    });\n};\n\n/* Aggregate by time periods */\naggregate_by_hour = op(processed_data) {\n    grouped = processed_data.group(op(record) { record.get(\"hour\"); });\n    grouped.map(op(hour, records) {\n        {\n            \"hour\": hour,\n            \"count\": records.len(),\n            \"avg_value\": records.reduce(op(sum, r) { sum + r.get(\"value\"); }, 0) / records.len(),\n            \"min_value\": records.map(op(r) { r.get(\"value\"); }).min(),\n            \"max_value\": records.map(op(r) { r.get(\"value\"); }).max()\n        };\n    });\n};\n</code></pre> <ul> <li>See also: Python Math Examples</li> <li>See also: Cryptography for cryptographic mathematical operations </li> </ul>"}, {"location": "use_cases/parallel_concurrent_programming/", "title": "Parallel/Concurrent Programming", "text": "<p>Grapa's $thread, $net, and map/reduce/filter features enable true parallelism, overcoming Python's GIL and enabling high-performance data processing.</p> <p>Note: Grapa is fully thread safe, but if you share mutable state between threads, you are responsible for the logic. Use a <code>$thread()</code> lock object if needed, or prefer immutable data and thread-local variables. See Threading and Locking for examples and best practices.</p>"}, {"location": "use_cases/parallel_concurrent_programming/#key-features-for-parallel-programming", "title": "Key Features for Parallel Programming:", "text": "<ul> <li>True Parallelism: Bypass GIL limitations with native threads</li> <li>Network Parallelism: Concurrent network operations</li> <li>Functional Programming: Map/reduce/filter for data parallelism</li> <li>Thread Safety: Built-in synchronization primitives</li> </ul>"}, {"location": "use_cases/parallel_concurrent_programming/#example-parallel-data-processing", "title": "Example: Parallel Data Processing", "text": "<pre><code>/* Process large dataset in parallel */\nprocess_chunk = op(chunk) {\n    chunk.map(op(item) {\n        /* Expensive computation */\n        result = complex_calculation(item);\n        {\"input\": item, \"result\": result};\n    });\n};\n\n/* Split data and process in parallel */\nparallel_process = op(data, num_threads) {\n    chunk_size = data.len() / num_threads;\n    chunks = [];\n\n    i = 0;\n    while (i &lt; num_threads) {\n        start = i * chunk_size;\n        end = (i == num_threads - 1) ? data.len() : (i + 1) * chunk_size;\n        chunks += data.slice(start, end);\n        i += 1;\n    };\n\n    /* Process chunks in parallel */\n    results = chunks.map(op(chunk) { process_chunk(chunk); });\n\n    /* Combine results */\n    results.flatten();\n};\n\n/* Example usage */\nlarge_dataset = generate_test_data(1000000);\nprocessed_data = parallel_process(large_dataset, 8);\n(\"Processed \" + processed_data.len().str() + \" items in parallel\").echo();\n</code></pre>"}, {"location": "use_cases/parallel_concurrent_programming/#example-concurrent-network-operations", "title": "Example: Concurrent Network Operations", "text": "<pre><code>/* Fetch multiple URLs concurrently */\nfetch_urls = op(urls) {\n    responses = urls.map(op(url) {\n        try {\n            response = $net().get(url);\n            {\"url\": url, \"success\": true, \"data\": response.get(\"body\")};\n        } catch (error) {\n            {\"url\": url, \"success\": false, \"error\": error.get(\"message\")};\n        };\n    });\n    responses;\n};\n\n/* Process API endpoints in parallel */\napi_endpoints = [\n    \"https://api.example.com/users\",\n    \"https://api.example.com/products\", \n    \"https://api.example.com/orders\"\n];\n\nresults = fetch_urls(api_endpoints);\nsuccessful = results.filter(op(r) { r.get(\"success\"); });\nfailed = results.filter(op(r) { !r.get(\"success\"); });\n\n(\"Successful requests: \" + successful.len().str()).echo();\n(\"Failed requests: \" + failed.len().str()).echo();\n</code></pre>"}, {"location": "use_cases/parallel_concurrent_programming/#example-thread-safe-data-processing", "title": "Example: Thread-Safe Data Processing", "text": "<pre><code>/* Thread-safe counter with locks */\nthread_safe_counter = op() {\n    counter = 0;\n    lock = $thread();\n\n    {\n        \"increment\": op() {\n            lock.lock();\n            counter += 1;\n            result = counter;\n            lock.unlock();\n            result;\n        },\n        \"get\": op() {\n            lock.lock();\n            result = counter;\n            lock.unlock();\n            result;\n        }\n    };\n};\n\n/* Use the thread-safe counter */\ncounter = thread_safe_counter();\nthreads = [];\n\n/* Create multiple threads that increment the counter */\ni = 0;\nwhile (i &lt; 10) {\n    thread = $thread();\n    thread.run(op() {\n        j = 0;\n        while (j &lt; 100) {\n            counter.increment();\n            j += 1;\n        };\n    });\n    threads += thread;\n    i += 1;\n};\n\n/* Wait for all threads to complete */\nthreads.map(op(t) { t.join(); });\n(\"Final counter value: \" + counter.get().str()).echo();\n</code></pre> <ul> <li>See also: Python Parallelism Examples </li> </ul>"}, {"location": "use_cases/web_data_scraping/", "title": "Web/Data Scraping &amp; Automation", "text": "<p>Best Practices: - Use <code>$net().get(url)</code> for HTTP requests; always check <code>.get(\"status\")</code> for HTTP status. - Parse HTML/XML with <code>$XML().parse(html)</code> or <code>.html()</code>. - Use <code>.select()</code> or <code>.findall()</code> to extract elements or attributes. - Rate limit requests with <code>$sys().sleep(ms)</code> to avoid overloading servers. - Use public, stable endpoints (e.g., <code>https://httpbin.org/html</code>, <code>https://example.com</code>) in examples. - Always check for <code>$ERR</code> when accessing attributes or elements that may not exist. - See Advanced Extraction Patterns for more on <code>.findall()</code> and complex queries.</p>"}, {"location": "use_cases/web_data_scraping/#example-web-scraper-with-rate-limiting", "title": "Example: Web Scraper with Rate Limiting", "text": "<pre><code>/* Define a function to scrape multiple pages with rate limiting */\nscrape_pages = op(urls, delay_ms) {\n    /* Map over each URL, with index for delay control */\n    results = urls.map(op(url, index) {\n        /* Add delay between requests except for the first */\n        if (index &gt; 0) {\n            $sys().sleep(delay_ms);\n        };\n\n        try {\n            /* Perform HTTP GET request */\n            response = $net().get(url);\n            /* Check for successful response */\n            if (response.get(\"status\") == 200) {\n                {\n                    \"url\": url,\n                    \"success\": true,\n                    \"content\": response.get(\"body\"),\n                    \"size\": response.get(\"body\").len()\n                };\n            } else {\n                {\"url\": url, \"success\": false, \"error\": \"HTTP \" + response.get(\"status\").str()};\n            };\n        } catch (error) {\n            /* Handle network or HTTP errors */\n            {\"url\": url, \"success\": false, \"error\": error.get(\"message\")};\n        };\n    });\n    results;\n};\n\n/* Define a function to extract data from HTML content */\nextract_data = op(html_content) {\n    /* Parse HTML and extract specific elements */\n    doc = $XML().parse(html_content);\n    titles = doc.select(\"h1, h2, h3\");\n    links = doc.select(\"a[href]\");\n\n    {\n        \"titles\": titles.map(op(t) { t.get(\"text\"); }),\n        \"links\": links.map(op(l) { l.get(\"href\"); })\n    };\n};\n\n/* Example usage: list of target URLs to scrape */\ntarget_urls = [\n    \"https://example.com/page1\",\n    \"https://example.com/page2\",\n    \"https://example.com/page3\"\n];\n\n/* Scrape the pages with a 1 second delay between requests */\nscraped_data = scrape_pages(target_urls, 1000);\n\n/* Extract data from each successfully scraped page */\nextracted_data = scraped_data.map(op(page) { \n    if (page.get(\"success\")) {\n        extract_data(page.get(\"content\"));\n    } else {\n        {\"error\": page.get(\"error\")};\n    };\n});\n</code></pre>"}, {"location": "use_cases/web_data_scraping/#example-api-data-collection", "title": "Example: API Data Collection", "text": "<pre><code>/* Collect data from REST API endpoints */\ncollect_api_data = op(base_url, endpoints) {\n    results = endpoints.map(op(endpoint) {\n        try {\n            url = base_url + endpoint;\n            response = $net().get(url);\n\n            if (response.get(\"status\") == 200) {\n                /* Parse JSON response */\n                data = $JSON().parse(response.get(\"body\"));\n                {\"endpoint\": endpoint, \"success\": true, \"data\": data};\n            } else {\n                {\"endpoint\": endpoint, \"success\": false, \"error\": \"HTTP \" + response.get(\"status\").str()};\n            };\n        } catch (error) {\n            {\"endpoint\": endpoint, \"success\": false, \"error\": error.get(\"message\")};\n        };\n    });\n    results;\n};\n\n/* Example API endpoints */\napi_endpoints = [\"/users\", \"/products\", \"/orders\"];\napi_data = collect_api_data(\"https://api.example.com\", api_endpoints);\n\n/* Process collected data */\nsuccessful_data = api_data.filter(op(result) { result.get(\"success\"); });\nfailed_requests = api_data.filter(op(result) { !result.get(\"success\"); });\n\n(\"Successfully collected data from \" + successful_data.len().str() + \" endpoints\").echo();\n(\"Failed requests: \" + failed_requests.len().str()).echo();\n</code></pre>"}, {"location": "use_cases/web_data_scraping/#example-automated-form-submission", "title": "Example: Automated Form Submission", "text": "<pre><code>/* Automated form submission with validation */\nsubmit_form = op(form_data) {\n    try {\n        /* Prepare form data */\n        post_data = $JSON().stringify(form_data);\n\n        /* Submit form via POST request */\n        response = $net().post(\"https://example.com/submit\", post_data, {\n            \"Content-Type\": \"application/json\"\n        });\n\n        if (response.get(\"status\") == 200) {\n            result = $JSON().parse(response.get(\"body\"));\n            {\"success\": true, \"result\": result};\n        } else {\n            {\"success\": false, \"error\": \"HTTP \" + response.get(\"status\").str()};\n        };\n    } catch (error) {\n        {\"success\": false, \"error\": error.get(\"message\")};\n    };\n};\n\n/* Example form data */\nform_data = {\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"message\": \"Hello from Grapa!\"\n};\n\n/* Submit the form */\nresult = submit_form(form_data);\nif (result.get(\"success\")) {\n    (\"Form submitted successfully: \" + result.get(\"result\").get(\"message\")).echo();\n} else {\n    (\"Form submission failed: \" + result.get(\"error\")).echo();\n}\n</code></pre> <ul> <li>See also: Python Web Scraping Examples </li> </ul>"}]}