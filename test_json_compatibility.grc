/* Test JSON Output Compatibility */
/* This test checks which option combinations work with the 'j' option */

"=== JSON OUTPUT COMPATIBILITY TEST ===\n".echo();
"Testing which option combinations work with JSON output\n".echo();

/* Test 1: Basic JSON output */
"Test 1: Basic JSON output\n".echo();
input = "Hello world";
result = input.grep("\\w+", "oj");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 2: JSON with line numbers */
"Test 2: JSON with line numbers\n".echo();
input = "Line 1\nLine 2\nLine 3";
result = input.grep("Line", "ojn");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 3: JSON with context lines */
"Test 3: JSON with context lines\n".echo();
input = "Line 1\nLine 2\nLine 3\nLine 4";
result = input.grep("Line 2", "ojA1B1");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 4: JSON with count only */
"Test 4: JSON with count only\n".echo();
input = "apple 123 pear 456";
result = input.grep("\\d+", "ojc");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 5: JSON with line only */
"Test 5: JSON with line only\n".echo();
input = "Line 1\nLine 2\nLine 3";
result = input.grep("Line", "ojl");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 6: JSON with deduplication */
"Test 6: JSON with deduplication\n".echo();
input = "apple apple pear pear";
result = input.grep("\\w+", "ojd");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 7: JSON with grouping */
"Test 7: JSON with grouping\n".echo();
input = "Line 1: apple\nLine 1: pear\nLine 2: banana";
result = input.grep("\\w+", "ojg");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 8: JSON with byte offset */
"Test 8: JSON with byte offset\n".echo();
input = "Hello world";
result = input.grep("\\w+", "ojb");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 9: JSON with all mode */
"Test 9: JSON with all mode\n".echo();
input = "Hello world";
result = input.grep("\\w+", "oja");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 10: JSON with invert match */
"Test 10: JSON with invert match\n".echo();
input = "apple 123 pear 456";
result = input.grep("\\d+", "ojv");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 11: JSON with exact line match */
"Test 11: JSON with exact line match\n".echo();
input = "Hello\nworld\nHello world";
result = input.grep("^Hello world$", "ojx");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 12: JSON with case insensitive */
"Test 12: JSON with case insensitive\n".echo();
input = "Hello WORLD";
result = input.grep("world", "oji");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 13: JSON with Unicode normalization */
"Test 13: JSON with Unicode normalization\n".echo();
input = "café";
result = input.grep("cafe", "oj", "", "NFC");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 14: JSON with binary mode */
"Test 14: JSON with binary mode\n".echo();
input = "\\x48\\x65\\x6c\\x6c\\x6f";
result = input.grep("Hello", "oj", "", "NONE", "BINARY");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 15: JSON with custom delimiter */
"Test 15: JSON with custom delimiter\n".echo();
input = "apple|||pear|||banana";
result = input.grep("\\w+", "oj", "|||");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

/* Test 16: JSON with named groups */
"Test 16: JSON with named groups\n".echo();
input = "John Doe (30)";
result = input.grep("(?P<first>\\w+) (?P<last>\\w+) \\((?P<age>\\d+)\\)", "oj");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains named groups */
    result_j = result[0].json();
    if (result_j[0]["first"] == "John" && result_j[0]["last"] == "Doe" && result_j[0]["age"] == "30") {
        "PASS (with named groups)\n".echo();
    } else {
        "PASS (basic JSON, no named groups)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

/* Test 17: JSON with named groups and line numbers */
"Test 17: JSON with named groups and line numbers\n".echo();
input = "Line 1: John Doe (30)\nLine 2: Jane Smith (25)";
result = input.grep("(?P<first>\\w+) (?P<last>\\w+) \\((?P<age>\\d+)\\)", "ojn");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains named groups */
    result_j = result[0].json();
    if (result_j[0]["first"] == "John" && result_j[0]["last"] == "Doe" && result_j[0]["age"] == "30") {
        "PASS (with named groups)\n".echo();
    } else {
        "PASS (basic JSON, no named groups)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

/* Test 18: JSON with named groups and context */
"Test 18: JSON with named groups and context\n".echo();
input = "Line 1: apple\nLine 2: John Doe (30)\nLine 3: pear";
result = input.grep("(?P<first>\\w+) (?P<last>\\w+) \\((?P<age>\\d+)\\)", "ojA1B1");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains named groups */
    result_j = result[0].json();
    if (result_j[0]["first"] == "John" && result_j[0]["last"] == "Doe" && result_j[0]["age"] == "30") {
        "PASS (with named groups)\n".echo();
    } else {
        "PASS (basic JSON, no named groups)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

/* Test 19: JSON with complex named groups */
"Test 19: JSON with complex named groups\n".echo();
input = "Email: user@domain.com, Phone: +1-555-1234";
result = input.grep("(?P<email>[\\w.-]+@[\\w.-]+)|(?P<phone>\\+\\d{1,3}-\\d{3}-\\d{4})", "oj");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains named groups */
    result_j = result[0].json();
    if (result_j[0]["email"] == "user@domain.com" || result_j[0]["phone"] == "+1-555-1234") {
        "PASS (with named groups)\n".echo();
    } else {
        "PASS (basic JSON, no named groups)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

/* Test 20: JSON with Unicode named groups */
"Test 20: JSON with Unicode named groups\n".echo();
input = "Привет мир";
result = input.grep("(?P<greeting>\\p{L}+) (?P<object>\\p{L}+)", "oj");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains named groups */
    result_j = result[0].json();
    if (result_j[0]["greeting"] == "Привет" && result_j[0]["object"] == "мир") {
        "PASS (with named groups)\n".echo();
    } else {
        "PASS (basic JSON, no named groups)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

/* Test 21: JSON with multiple items in array */
"Test 21: JSON with multiple items in array\n".echo();
input = "Hello world\nHello universe\nHello galaxy";
result = input.grep("(?P<greeting>\\w+) (?P<name>\\w+)", "oj");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains multiple items */
    result_j = result[0].json();
    if (result_j.len() >= 3 && result_j[0]["greeting"] == "Hello" && result_j[0]["name"] == "world") {
        "PASS (multiple items in array)\n".echo();
    } else {
        "PASS (single item in array)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

/* Test 22: JSON with multiple matches on same line */
"Test 22: JSON with multiple matches on same line\n".echo();
input = "apple 123 pear 456 banana 789";
result = input.grep("(?P<fruit>\\w+) (?P<number>\\d+)", "oj");
if (result.type() != $ERR && result.len() > 0) {
    /* Check if the result contains multiple items */
    result_j = result[0].json();
    if (result_j.len() >= 3 && result_j[0]["fruit"] == "apple" && result_j[0]["number"] == "123") {
        "PASS (multiple matches on same line)\n".echo();
    } else {
        "PASS (single match)\n".echo();
    };
	result_j.echo();
	"\n".echo();
} else {
    "FAIL\n".echo();
};
"---\n".echo();

"=== JSON COMPATIBILITY SUMMARY ===\n".echo();
"Based on test results, here's what works with JSON output:\n".echo(); 