/* Test Missing ripgrep Features */
/* This test identifies and verifies ripgrep features that are not yet implemented in Grapa grep */

"=== TESTING MISSING RIPGREP FEATURES ===\n".echo();
"Identifying ripgrep features that need implementation\n".echo();

/* ======================================== */
/* 1. Column Numbers (T option) */
/* ======================================== */
"1. Column Numbers (T option)\n".echo();
"   ripgrep: rg --column 'pattern'\n".echo();
"   Status: NOT IMPLEMENTED\n".echo();

input = "foo bar baz\nbar foo baz\nbaz bar foo";
"   Test input: " + input + "\n".echo();

/* Test column numbers with match-only */
"   Testing: input.grep('foo', 'oT')\n".echo();
result = input.grep("foo", "oT");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['5:foo', '5:foo', '9:foo'] (column:match format)\n".echo();
"   Current: Returns just matches without column numbers\n".echo();
"---\n".echo();

/* ======================================== */
/* 2. Word Boundary Mode (w option) */
/* ======================================== */
"2. Word Boundary Mode (w option)\n".echo();
"   ripgrep: rg --word-regexp 'pattern'\n".echo();
"   Status: NOT IMPLEMENTED\n".echo();

input = "foo bar foobar barfoo";
"   Test input: " + input + "\n".echo();

/* Test word boundary with match-only */
"   Testing: input.grep('foo', 'ow')\n".echo();
result = input.grep("foo", "ow");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['foo'] (only whole word matches)\n".echo();
"   Current: Returns all matches including partial words\n".echo();
"---\n".echo();

/* ======================================== */
/* 3. Null-Data Mode (z option) */
/* ======================================== */
"3. Null-Data Mode (z option)\n".echo();
"   ripgrep: rg -z 'pattern'\n".echo();
"   Status: NOT WORKING CORRECTLY\n".echo();

input = "foo\0bar\0baz\0foo";
"   Test input: foo\\0bar\\0baz\\0foo\n".echo();

/* Test null-data mode with match-only */
"   Testing: input.grep('foo', 'oz')\n".echo();
result = input.grep("foo", "oz");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['foo', 'foo'] (null-separated records)\n".echo();
"   Current: Treats null bytes as regular characters\n".echo();
"---\n".echo();

/* ======================================== */
/* 4. Color Output (L option) */
/* ======================================== */
"4. Color Output (L option)\n".echo();
"   ripgrep: rg --color=always 'pattern'\n".echo();
"   Status: NOT IMPLEMENTED\n".echo();

input = "foo bar baz";
"   Test input: " + input + "\n".echo();

/* Test color output with match-only */
"   Testing: input.grep('foo', 'oL')\n".echo();
result = input.grep("foo", "oL");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['\\x1b[1;31mfoo\\x1b[0m'] (with ANSI color codes)\n".echo();
"   Expected hex: 5b1b5b313b33316d666f6f1b5b306d5d (for ANSI color codes)\n".echo();
"   Current: Returns plain text without color\n".echo();
"---\n".echo();

/* ======================================== */
/* 5. Smart Case Matching */
/* ======================================== */
"5. Smart Case Matching\n".echo();
"   ripgrep: rg 'hello' (case-insensitive for lowercase)\n".echo();
"   ripgrep: rg 'HELLO' (case-sensitive for uppercase)\n".echo();
"   Status: NEEDS IMPLEMENTATION\n".echo();

input = "Hello WORLD hello world HELLO World";
"   Test input: " + input + "\n".echo();

/* Test smart case with lowercase pattern */
"   Testing: input.grep('hello', '')\n".echo();
result = input.grep("hello", "");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['Hello', 'hello'] (case-insensitive for lowercase)\n".echo();
"   Current: Case-sensitive by default\n".echo();

/* Test smart case with uppercase pattern */
"   Testing: input.grep('HELLO', '')\n".echo();
result = input.grep("HELLO", "");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['HELLO'] (case-sensitive for uppercase)\n".echo();
"   Current: Case-sensitive by default\n".echo();
"---\n".echo();

/* ======================================== */
/* 6. File Path Display */
/* ======================================== */
"6. File Path Display\n".echo();
"   ripgrep: rg --with-filename 'pattern'\n".echo();
"   Status: NOT APPLICABLE (Grapa handles file operations separately)\n".echo();
"   Note: Grapa grep operates on strings, not files\n".echo();
"   File operations are handled by Grapa language: file().ls(), file().read()\n".echo();
"---\n".echo();

/* ======================================== */
/* 7. Line Number Display */
/* ======================================== */
"7. Line Number Display\n".echo();
"   ripgrep: rg --line-number 'pattern'\n".echo();
"   Status: IMPLEMENTED\n".echo();

input = "line 1\nline 2\nline 3\nline 4";
"   Test input: " + input + "\n".echo();

/* Test line numbers */
"   Testing: input.grep('line', 'n')\n".echo();
result = input.grep("line", "n");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['1:line 1', '2:line 2', '3:line 3', '4:line 4']\n".echo();
"   Status: Working correctly\n".echo();
"---\n".echo();

/* ======================================== */
/* 8. Byte Offset Display */
/* ======================================== */
"8. Byte Offset Display\n".echo();
"   ripgrep: rg --byte-offset 'pattern'\n".echo();
"   Status: IMPLEMENTED\n".echo();

input = "foo bar baz";
"   Test input: " + input + "\n".echo();

/* Test byte offsets */
"   Testing: input.grep('foo', 'b')\n".echo();
result = input.grep("foo", "b");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['0:foo bar baz'] (byte offset:line)\n".echo();
"   Status: Working correctly\n".echo();
"---\n".echo();

/* ======================================== */
/* 9. Context Lines */
/* ======================================== */
"9. Context Lines\n".echo();
"   ripgrep: rg -A 2 -B 1 'pattern'\n".echo();
"   Status: IMPLEMENTED\n".echo();

input = "a\nb\nc\nd\ne\nf\ng";
"   Test input: " + input + "\n".echo();

/* Test context lines */
"   Testing: input.grep('d', 'A2B1')\n".echo();
result = input.grep("d", "A2B1");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['c\\n', 'd\\n', 'e\\n', 'f\\n'] (1 before, match, 2 after)\n".echo();
"   Status: Working correctly\n".echo();
"---\n".echo();

/* ======================================== */
/* 10. Invert Match */
/* ======================================== */
"10. Invert Match\n".echo();
"   ripgrep: rg -v 'pattern'\n".echo();
"   Status: IMPLEMENTED\n".echo();

input = "match1\nnomatch\nmatch2\nnomatch";
"   Test input: " + input + "\n".echo();

/* Test invert match */
"   Testing: input.grep('match', 'v')\n".echo();
result = input.grep("match", "v");
"   Result: " + result.str() + "\n".echo();
"   Result hex: " + result.hex() + "\n".echo();
"   Expected: ['nomatch', 'nomatch'] (lines not matching)\n".echo();
"   Status: Working correctly\n".echo();
"---\n".echo();

/* ======================================== */
/* SUMMARY */
/* ======================================== */
"\n=== SUMMARY OF MISSING RIPGREP FEATURES ===\n".echo();
"Features that need implementation:\n".echo();
"1. Column numbers (T option) - NOT IMPLEMENTED\n".echo();
"2. Word boundary mode (w option) - NOT IMPLEMENTED\n".echo();
"3. Null-data mode (z option) - NOT WORKING CORRECTLY\n".echo();
"4. Color output (L option) - NOT IMPLEMENTED\n".echo();
"5. Smart case matching - NEEDS IMPLEMENTATION\n".echo();
"\nFeatures that are implemented and working:\n".echo();
"6. Line numbers (n option) - ✅ IMPLEMENTED\n".echo();
"7. Byte offsets (b option) - ✅ IMPLEMENTED\n".echo();
"8. Context lines (A/B/C options) - ✅ IMPLEMENTED\n".echo();
"9. Invert match (v option) - ✅ IMPLEMENTED\n".echo();
"10. All other basic grep features - ✅ IMPLEMENTED\n".echo();
"\nTotal missing features: 5 out of 10 core ripgrep features\n".echo();
"Coverage: 50% of core ripgrep features implemented\n".echo(); 