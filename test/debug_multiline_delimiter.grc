/* Debug test for multiline pattern with custom delimiter */
"=== DEBUG TEST: MULTILINE PATTERN WITH CUSTOM DELIMITER ===\n".echo();

/* Test 1: Multiline pattern with s flag and custom delimiter */
"Test 1: Multiline pattern with s flag and custom delimiter\n".echo();
input1 = "start|middle|end";
result1 = input1.grep("start.*end", "s", "|");
("Input: " + input1 + "\n").echo();
("Pattern: start.*end, Options: s, Delimiter: |\n").echo();
("Result: " + result1.str() + "\n").echo();
("Expected: [\"start|middle|end\"]\n").echo();
("Status: " + (result1.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 2: Multiline pattern without s flag and custom delimiter */
"Test 2: Multiline pattern without s flag and custom delimiter\n".echo();
input2 = "start|middle|end";
result2 = input2.grep("start.*end", "", "|");
("Input: " + input2 + "\n").echo();
("Pattern: start.*end, Options: (none), Delimiter: |\n").echo();
("Result: " + result2.str() + "\n").echo();
("Expected: [\"start|middle|end\"] (should work without s flag)\n").echo();
("Status: " + (result2.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 3: Lookaround assertion with custom delimiter */
"Test 3: Lookaround assertion with custom delimiter\n".echo();
input3 = "word123|text456|word789";
result3 = input3.grep("\\w+(?=\\d)", "o", "|");
("Input: " + input3 + "\n").echo();
("Pattern: \\w+(?=\\d), Options: o, Delimiter: |\n").echo();
("Result: " + result3.str() + "\n").echo();
("Expected: [\"word\", \"text\", \"word\"]\n").echo();
("Status: " + (result3.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 4: Unicode script property with custom delimiter */
"Test 4: Unicode script property with custom delimiter\n".echo();
input4 = "Hello|World|123|Test";
result4 = input4.grep("\\p{sc=Latin}+", "o", "|");
("Input: " + input4 + "\n").echo();
("Pattern: \\p{sc=Latin}+, Options: o, Delimiter: |\n").echo();
("Result: " + result4.str() + "\n").echo();
("Expected: [\"Hello\", \"World\", \"Test\"]\n").echo();
("Status: " + (result4.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 5: Multiline pattern with multi-character custom delimiter */
"Test 5: Multiline pattern with multi-character custom delimiter\n".echo();
input5 = "start|||middle|||end";
result5 = input5.grep("start.*end", "", "|||");
("Input: " + input5 + "\n").echo();
("Pattern: start.*end, Options: (none), Delimiter: |||\n").echo();
("Result: " + result5.str() + "\n").echo();
("Expected: [\"start|||middle|||end\"] (should work with multi-character delimiter)\n").echo();
("Status: " + (result5.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 6: Multi-character delimiter at start and end */
"Test 6: Multi-character delimiter at start and end\n".echo();
input6 = "|||start|||middle|||end|||";
result6 = input6.grep("start.*end", "", "|||");
("Input: " + input6 + "\n").echo();
("Pattern: start.*end, Options: (none), Delimiter: |||\n").echo();
("Result: " + result6.str() + "\n").echo();
("Expected: [\"|||start|||middle|||end|||\"] (should match full input)\n").echo();
("Status: " + (result6.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 7: Multi-character delimiter not present */
"Test 7: Multi-character delimiter not present\n".echo();
input7 = "startmiddleend";
result7 = input7.grep("start.*end", "", "|||");
("Input: " + input7 + "\n").echo();
("Pattern: start.*end, Options: (none), Delimiter: |||\n").echo();
("Result: " + result7.str() + "\n").echo();
("Expected: [\"startmiddleend\"] (should match full input)\n").echo();
("Status: " + (result7.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 8: Delimiter as part of the pattern */
"Test 8: Delimiter as part of the pattern\n".echo();
input8 = "foo|||bar|||baz";
result8 = input8.grep("bar\|\|\|baz", "", "|||");
("Input: " + input8 + "\n").echo();
("Pattern: bar\|\|\|baz, Options: (none), Delimiter: |||\n").echo();
("Result: " + result8.str() + "\n").echo();
("Expected: [\"foo|||bar|||baz\"] (should match full input)\n").echo();
("Status: " + (result8.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 9: Delimiter with regex metacharacters */
"Test 9: Delimiter with regex metacharacters\n".echo();
input9 = "a.*b.*c.*d";
result9 = input9.grep("a.*d", "", ".*");
("Input: " + input9 + "\n").echo();
("Pattern: a.*d, Options: (none), Delimiter: .*\n").echo();
("Result: " + result9.str() + "\n").echo();
("Expected: [\"a.*b.*c.*d\"] (should match full input)\n").echo();
("Status: " + (result9.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 10: Unicode delimiter (U+2028 LINE SEPARATOR) */
"Test 10: Unicode delimiter (U+2028 LINE SEPARATOR)\n".echo();
input10 = "start\u2028middle\u2028end";
result10 = input10.grep("start.*end", "", "\u2028");
("Input: " + input10 + "\n").echo();
("Pattern: start.*end, Options: (none), Delimiter: \\u2028\n").echo();
("Result: " + result10.str() + "\n").echo();
("Expected: [\"start\u2028middle\u2028end\"] (should match full input)\n").echo();
("Status: " + (result10.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 11: Unicode delimiter (emoji) */
"Test 11: Unicode delimiter (emoji)\n".echo();
input11 = "foo😀bar😀baz";
result11 = input11.grep("foo.*baz", "", "😀");
("Input: " + input11 + "\n").echo();
("Pattern: foo.*baz, Options: (none), Delimiter: 😀\n").echo();
("Result: " + result11.str() + "\n").echo();
("Expected: [\"foo😀bar😀baz\"] (should match full input)\n").echo();
("Status: " + (result11.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/*
NOTE ON COMBINING MARK DELIMITERS:
Using a Unicode combining mark (e.g., U+0301) as a delimiter is not meaningful in real-world text processing.
Combining marks are intended to modify the preceding base character, forming a single grapheme cluster (e.g., 'a' + U+0301 = 'á').
When used as a delimiter, the engine splits after every occurrence of the combining mark, resulting in segments like 'a', 'b', 'c', 'd'.
This means patterns like 'a.*d' will not match, as no segment contains both 'a' and 'd'.
This is not a bug in the engine, but a limitation of using combining marks as delimiters.
If grapheme cluster splitting is desired, a different approach is needed.
*/
/* Test 12: Unicode delimiter (combining mark) */
"Test 12: Unicode delimiter (combining mark)\n".echo();
input12 = "a\u0301b\u0301c\u0301d";
result12 = input12.grep("a.*d", "", "\u0301");
("Input: " + input12 + "\n").echo();
("Pattern: a.*d, Options: (none), Delimiter: \\u0301\n").echo();
("Result: " + result12.str() + "\n").echo();
("Expected: [\"a\u0301b\u0301c\u0301d\"] (should match full input)\n").echo();
("Status: " + (result12.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 13: Multi-emoji delimiter */
"Test 13: Multi-emoji delimiter\n".echo();
input13 = "foo😀😃bar😀😃baz";
result13 = input13.grep("foo.*baz", "", "😀😃");
("Input: " + input13 + "\n").echo();
("Pattern: foo.*baz, Options: (none), Delimiter: 😀😃\n").echo();
("Result: " + result13.str() + "\n").echo();
("Expected: [\"foo😀😃bar😀😃baz\"] (should match full input)\n").echo();
("Status: " + (result13.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 14: Rare Unicode sequence delimiter */
"Test 14: Rare Unicode sequence delimiter\n".echo();
input14 = "foo\u2060bar\u2060baz";
result14 = input14.grep("foo.*baz", "", "\u2060");
("Input: " + input14 + "\n").echo();
("Pattern: foo.*baz, Options: (none), Delimiter: \\u2060\n").echo();
("Result: " + result14.str() + "\n").echo();
("Expected: [\"foo\u2060bar\u2060baz\"] (should match full input)\n").echo();
("Status: " + (result14.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

"=== DEBUG TEST COMPLETE ===\n".echo(); 