/* Test Basic Option Combinations */
/* This test covers all basic grep options with simple patterns to catch integration gaps */

"=== BASIC OPTION COMBINATIONS TEST ===\n".echo();
"Testing all basic grep options with simple patterns\n".echo();

input = "Hello World\nLine 2\nLine 3\nHello again";
pattern = "Hello";

/* Test 1: Basic pattern without options */
"Test 1: Basic pattern without options\n".echo();
result = input.grep(pattern);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + "\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 2: Match-only option (o) */
"Test 2: Match-only option (o)\n".echo();
result = input.grep(pattern, "o");
("Pattern: " + pattern + ", Options: o\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 3: JSON output option (j) - This was the gap we found */
"Test 3: JSON output option (j)\n".echo();
result = input.grep(pattern, "j");
("Pattern: " + pattern + ", Options: j\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 4: Match-only + JSON (oj) */
"Test 4: Match-only + JSON (oj)\n".echo();
result = input.grep(pattern, "oj");
("Pattern: " + pattern + ", Options: oj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 5: JSON + Match-only (jo) - Test option order */
"Test 5: JSON + Match-only (jo)\n".echo();
result = input.grep(pattern, "jo");
("Pattern: " + pattern + ", Options: jo\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 6: Line numbers (n) */
"Test 6: Line numbers (n)\n".echo();
result = input.grep(pattern, "n");
("Pattern: " + pattern + ", Options: n\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 7: Line numbers + JSON (nj) */
"Test 7: Line numbers + JSON (nj)\n".echo();
result = input.grep(pattern, "nj");
("Pattern: " + pattern + ", Options: nj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 8: Byte offsets (b) */
"Test 8: Byte offsets (b)\n".echo();
result = input.grep(pattern, "b");
("Pattern: " + pattern + ", Options: b\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 9: Byte offsets + JSON (bj) */
"Test 9: Byte offsets + JSON (bj)\n".echo();
result = input.grep(pattern, "bj");
("Pattern: " + pattern + ", Options: bj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 10: Line numbers only (l) */
"Test 10: Line numbers only (l)\n".echo();
result = input.grep(pattern, "l");
("Pattern: " + pattern + ", Options: l\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 11: Line numbers only + JSON (lj) */
"Test 11: Line numbers only + JSON (lj)\n".echo();
result = input.grep(pattern, "lj");
("Pattern: " + pattern + ", Options: lj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 12: Case insensitive (i) */
"Test 12: Case insensitive (i)\n".echo();
result = input.grep(pattern, "i");
("Pattern: " + pattern + ", Options: i\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 13: Case insensitive + JSON (ij) */
"Test 13: Case insensitive + JSON (ij)\n".echo();
result = input.grep(pattern, "ij");
("Pattern: " + pattern + ", Options: ij\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 14: Invert match (v) */
"Test 14: Invert match (v)\n".echo();
result = input.grep(pattern, "v");
("Pattern: " + pattern + ", Options: v\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 15: Invert match + JSON (vj) */
"Test 15: Invert match + JSON (vj)\n".echo();
result = input.grep(pattern, "vj");
("Pattern: " + pattern + ", Options: vj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 16: Exact match (x) */
"Test 16: Exact match (x)\n".echo();
result = input.grep("Hello", "x");
("Pattern: Hello, Options: x\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 17: Exact match + JSON (xj) */
"Test 17: Exact match + JSON (xj)\n".echo();
result = input.grep("Hello", "xj");
("Pattern: Hello, Options: xj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 18: All mode (a) */
"Test 18: All mode (a)\n".echo();
result = input.grep(pattern, "a");
("Pattern: " + pattern + ", Options: a\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 19: All mode + JSON (aj) */
"Test 19: All mode + JSON (aj)\n".echo();
result = input.grep(pattern, "aj");
("Pattern: " + pattern + ", Options: aj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 20: Count only (c) */
"Test 20: Count only (c)\n".echo();
result = input.grep(pattern, "c");
("Pattern: " + pattern + ", Options: c\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 21: Count only + JSON (cj) */
"Test 21: Count only + JSON (cj)\n".echo();
result = input.grep(pattern, "cj");
("Pattern: " + pattern + ", Options: cj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

/* Test 22: Multiple options combination */
"Test 22: Multiple options (inoj)\n".echo();
result = input.grep(pattern, "inoj");
("Pattern: " + pattern + ", Options: inoj\n").echo();
("Result type: " + result.type() + "\n").echo();
("Result: " + result + "\n").echo();
"---\n".echo();

"=== BASIC OPTION COMBINATIONS SUMMARY ===\n".echo();
"All basic option combinations tested.\n".echo();
"Check results above for any $ERR responses that should be valid.\n".echo(); 