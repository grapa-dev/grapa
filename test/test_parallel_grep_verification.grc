/* Test Parallel Grep Thread Allocation and Verification */
/* This test verifies that the parallel grep implementation actually uses */
/* the specified number of threads and auto-detection works correctly */

"=== PARALLEL GREP THREAD VERIFICATION TEST ===\n".echo();

/* Test 1: Verify that num_workers = 0 uses auto-detection */
"Test 1: Auto-detection with num_workers = 0\n".echo();
test_input = "line1\nline2\nline3\nline4\nline5\nline6\nline7\nline8\nline9\nline10\n";
test_input += test_input; /* Make it larger */
test_input += test_input; /* Make it even larger */
test_input += test_input; /* Make it very large */
test_input += test_input; /* Make it very large */
test_input += test_input; /* Make it very large */

matches1 = test_input.grep("line", "", "\n", 0, 0, 0);
("Auto-detection result: " + matches1.len().str() + " matches found\n").echo();
"---\n".echo();

/* Test 2: Verify that num_workers = 1 uses sequential processing */
"Test 2: Sequential processing with num_workers = 1\n".echo();
matches2 = test_input.grep("line", "", "\n", 0, 0, 1);
("Sequential processing result: " + matches2.len().str() + " matches found\n").echo();
"---\n".echo();

/* Test 3: Verify that num_workers = 2 uses 2 threads */
"Test 3: 2-thread processing with num_workers = 2\n".echo();
matches3 = test_input.grep("line", "", "\n", 0, 0, 2);
("2-thread processing result: " + matches3.len().str() + " matches found\n").echo();
"---\n".echo();

/* Test 4: Verify that num_workers = 4 uses 4 threads */
"Test 4: 4-thread processing with num_workers = 4\n".echo();
matches4 = test_input.grep("line", "", "\n", 0, 0, 4);
("4-thread processing result: " + matches4.len().str() + " matches found\n").echo();
"---\n".echo();

/* Test 5: Verify that small input uses sequential processing regardless of num_workers */
"Test 5: Small input should use sequential processing\n".echo();
small_input = "line1\nline2\nline3\n";
matches5 = small_input.grep("line", "", "\n", 0, 0, 4);
("Small input processing result: " + matches5.len().str() + " matches found\n").echo();
"---\n".echo();

/* Test 6: Verify that results are consistent across different thread counts */
"Test 6: Result consistency verification\n".echo();
pattern = "line[0-9]";
matches6a = test_input.grep(pattern, "", "\n", 0, 0, 0);
matches6b = test_input.grep(pattern, "", "\n", 0, 0, 1);
matches6c = test_input.grep(pattern, "", "\n", 0, 0, 2);
matches6d = test_input.grep(pattern, "", "\n", 0, 0, 4);

("Auto-detection matches: " + matches6a.len().str() + "\n").echo();
("Sequential matches: " + matches6b.len().str() + "\n").echo();
("2-thread matches: " + matches6c.len().str() + "\n").echo();
("4-thread matches: " + matches6d.len().str() + "\n").echo();

/* Verify all results are identical */
consistent = true;
if ((matches6a.len() != matches6b.len()) || (matches6a.len() != matches6c.len()) || (matches6a.len() != matches6d.len())) {
    consistent = false;
};

if (consistent) {
    /* Check that the actual matches are identical */
	i = 0;
	while (i < matches6a.len())
	{
        if ((matches6a[i] != matches6b[i]) || (matches6a[i] != matches6c[i]) || (matches6a[i] != matches6d[i]))
            consistent = false;
		i += 1;
	};
};

("Result consistency: " + (consistent ? "PASS" : "FAIL").str() + "\n").echo();
"---\n".echo();

/* Test 7: Performance comparison (basic) */
"Test 7: Basic performance comparison\n".echo();
large_input = "";
i = 0;
while (i < 100000)
{
	large_input += "line" + i.str() + "\n";
	i += 1;
};

start_time = $TIME().utc();
matches7a = large_input.grep("line[0-9]+", "", "\n", 0, 0, 1);
sequential_time = (($TIME().utc()-start_time)/1000000).int();

start_time = $TIME().utc();
matches7b = large_input.grep("line[0-9]+", "", "\n", 0, 0, 4);
parallel_time = (($TIME().utc()-start_time)/1000000).int();

("Sequential processing time: " + sequential_time.str() + " ms\n").echo();
("Parallel processing time: " + parallel_time.str() + " ms\n").echo();
("Speedup: " + (sequential_time / parallel_time).str() + "x\n").echo();
"---\n".echo();

/* Test 8: Verify that the parallel function exists and works */
"Test 8: Parallel function verification\n".echo();
matches8 = test_input.grep("line", "", "\n", 0, 0, 2);
("Parallel function result: " + matches8.len().str() + " matches found\n").echo();
"---\n".echo();

"=== PARALLEL GREP VERIFICATION COMPLETE ===\n".echo();
"All parallel grep tests completed successfully!\n".echo(); 

