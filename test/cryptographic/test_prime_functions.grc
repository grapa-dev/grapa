/* Test Prime Number Functions */
/* Tests for genprime, isprime, staticprime, and isaks functions */

"=== Testing Prime Number Functions ===".echo();

/* Test 1: Generate prime numbers */
"\n1. Testing prime generation".echo();
("Generating 16-bit prime...").echo();
prime_16 = 16.genprime();
("16-bit prime: " + prime_16.str()).echo();
("Prime in hex: " + prime_16.hex()).echo();
("Prime in binary: " + prime_16.bin()).echo();

("Generating 32-bit prime...").echo();
prime_32 = 32.genprime();
("32-bit prime: " + prime_32.str()).echo();
("Prime in hex: " + prime_32.hex()).echo();

("Generating 64-bit prime...").echo();
prime_64 = 64.genprime();
("64-bit prime: " + prime_64.str()).echo();
("Prime in hex: " + prime_64.hex()).echo();

/* Test 2: Test primality */
"\n2. Testing primality checking".echo();
test_numbers = [2, 3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];
i = 0;
while (i < test_numbers.len()) {
    num = test_numbers[i];
    is_prime = num.isprime();
    ("Number " + num.str() + " is prime: " + is_prime.str()).echo();
    i += 1;
}

/* Test 3: Test composite numbers */
"\n3. Testing composite numbers".echo();
composite_numbers = [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40];
i = 0;
while (i < composite_numbers.len()) {
    num = composite_numbers[i];
    is_prime = num.isprime();
    ("Number " + num.str() + " is prime: " + is_prime.str()).echo();
    i += 1;
}

/* Test 4: Test generated primes */
"\n4. Testing generated primes".echo();
("Testing if generated 16-bit prime is actually prime: " + prime_16.isprime().str()).echo();
("Testing if generated 32-bit prime is actually prime: " + prime_32.isprime().str()).echo();
("Testing if generated 64-bit prime is actually prime: " + prime_64.isprime().str()).echo();

/* Test 5: Test safe primes */
"\n5. Testing safe prime generation".echo();
("Generating 16-bit safe prime...").echo();
safe_prime_16 = 16.genprime(1);  /* safe=1 */
("16-bit safe prime: " + safe_prime_16.str()).echo();
("Safe prime in hex: " + safe_prime_16.hex()).echo();

/* Test 6: Test static primes */
"\n6. Testing static prime generation".echo();
("Generating static 16-bit prime...").echo();
static_prime_16 = 16.staticprime();
("Static 16-bit prime: " + static_prime_16.str()).echo();
("Static prime in hex: " + static_prime_16.hex()).echo();

/* Test 7: Test AKS primality test */
"\n7. Testing AKS primality test".echo();
aks_test_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];
i = 0;
while (i < aks_test_numbers.len()) {
    num = aks_test_numbers[i];
    is_aks_prime = num.isaks();
    ("Number " + num.str() + " passes AKS test: " + is_aks_prime.str()).echo();
    i += 1;
}

/* Test 8: Performance test */
"\n8. Testing performance".echo();
start_time = $TIME().utc();
i = 0;
while (i < 10) {
    test_prime = 32.genprime();
    i += 1;
}
end_time = $TIME().utc();
elapsed_ns = end_time - start_time;
elapsed_ms = (elapsed_ns / 1000000).int();
("10 32-bit prime generations completed in: " + elapsed_ms.str() + " ms").echo();

/* Test 9: Large prime test */
"\n9. Testing large prime generation".echo();
("Generating 128-bit prime...").echo();
large_prime = 128.genprime();
("128-bit prime: " + large_prime.str()).echo();
("Large prime in hex: " + large_prime.hex()).echo();
("Large prime is actually prime: " + large_prime.isprime().str()).echo();

/* Test 10: Edge cases */
"\n10. Testing edge cases".echo();
("Testing 2-bit prime generation...").echo();
tiny_prime = 2.genprime();
("2-bit prime: " + tiny_prime.str()).echo();

("Testing 1-bit prime generation (should fail)...").echo();
try {
    invalid_prime = 1.genprime();
    ("1-bit prime: " + invalid_prime.str()).echo();
} catch {
    ("1-bit prime generation failed as expected").echo();
}

/* Test 11: RSA key generation with generated primes */
"\n11. Testing RSA key generation with generated primes".echo();
p = 64.genprime();
q = 64.genprime();
n = p * q;
phi = (p - 1) * (q - 1);
e = 65537;  /* Common RSA exponent */

/* Calculate private exponent */
d = e.modinv(phi);
("RSA key with generated primes:").echo();
("p: " + p.str()).echo();
("q: " + q.str()).echo();
("n: " + n.str()).echo();
("e: " + e.str()).echo();
("d: " + d.str()).echo();
("Verification: (e * d) mod phi = " + ((e * d) % phi).str()).echo();

/* Test RSA encryption/decryption */
message = 42;
encrypted = message.modpow(e, n);
decrypted = encrypted.modpow(d, n);
("RSA test - Original: " + message.str() + ", Encrypted: " + encrypted.str() + ", Decrypted: " + decrypted.str()).echo();
("RSA encryption/decryption successful: " + (message == decrypted).str()).echo();

/* Test 12: Final time measurement */
"\n12. Final time measurement".echo();
end_time = $TIME().utc();
total_elapsed_ns = end_time - start_time;
total_elapsed_ms = (total_elapsed_ns / 1000000).int();
("Total test time: " + total_elapsed_ms.str() + " ms").echo();

"=== Prime Number Functions Test Complete ===".echo(); 