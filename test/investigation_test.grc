/* Investigation Test for Remaining Issues */

"=== INVESTIGATION TEST FOR REMAINING ISSUES ===\n".echo();

/* ======================================== */
/* Test 1: Context line merging with overlapping matches */
/* ======================================== */
"Test 1: Context Line Merging with Overlapping Matches\n".echo();
input = "Line 1\nLine 2\nLine 3\nLine 2\nLine 4\nLine 2\nLine 5";
"Input: " + input + "\n".echo();
"Pattern: Line 2, Options: A1B1\n".echo();
result = input.grep("Line 2", "A1B1");
"Result: " + result.str() + "\n".echo();
"Expected: Should merge overlapping context lines\n".echo();
"---\n".echo();

/* ======================================== */
/* Test 2: Column numbers with T option */
/* ======================================== */
"Test 2: Column Numbers with T Option\n".echo();
input = "foo bar baz\nbar foo baz\nbaz bar foo";
"Input: " + input + "\n".echo();
"Pattern: foo, Options: oT\n".echo();
result = input.grep("foo", "oT");
"Result: " + result.str() + "\n".echo();
"Expected: ['0:foo', '4:foo', '8:foo'] (column:match format)\n".echo();
"---\n".echo();

/* ======================================== */
/* Test 3: Context separator lines */
/* ======================================== */
"Test 3: Context Separator Lines\n".echo();
input = "File 1:\nLine 1\nLine 2\nLine 3\n\nFile 2:\nLine 1\nLine 2\nLine 3";
"Input: " + input + "\n".echo();
"Pattern: Line 2, Options: A1B1\n".echo();
result = input.grep("Line 2", "A1B1");
"Result: " + result.str() + "\n".echo();
"Expected: Should include '--' separators between non-consecutive matches\n".echo();
"---\n".echo();

/* ======================================== */
/* Test 4: Color output with L option */
/* ======================================== */
"Test 4: Color Output with L Option\n".echo();
input = "foo bar baz";
"Input: " + input + "\n".echo();
"Pattern: foo, Options: oL\n".echo();
result = input.grep("foo", "oL");
"Result: " + result.str() + "\n".echo();
"Result hex: " + result.hex() + "\n".echo();
"Expected: Should include ANSI color codes around matches\n".echo();
"---\n".echo();

/* ======================================== */
/* Test 5: Null-data mode with z option */
/* ======================================== */
"Test 5: Null-Data Mode with z Option\n".echo();
/* Create input with null bytes */
input = "foo\0bar\0baz\0foo";
"Input: foo\\0bar\\0baz\\0foo\n".echo();
"Pattern: foo, Options: oz\n".echo();
result = input.grep("foo", "oz");
"Result: " + result.str() + "\n".echo();
"Result hex: " + result.hex() + "\n".echo();
"Expected: ['foo', 'foo'] (null-separated records)\n".echo();
"---\n".echo();

/* ======================================== */
/* Test 6: Error handling edge cases */
/* ======================================== */
"Test 6: Error Handling Edge Cases\n".echo();

/* Test invalid regex */
"Testing invalid regex:\n".echo();
result = "Hello World".grep("(", "");
"Pattern: (, Result: " + result.str() + "\n".echo();

/* Test empty pattern */
"Testing empty pattern:\n".echo();
result = "Hello World".grep("", "");
"Pattern: (empty), Result: " + result.str() + "\n".echo();

/* Test null pattern */
"Testing null pattern:\n".echo();
result = "Hello World".grep(null, "");
"Pattern: null, Result: " + result.str() + "\n".echo();

/* Test very large pattern */
"Testing very large pattern:\n".echo();
large_pattern = "";
i = 0;
while (i < 10000) {
    large_pattern = large_pattern + "a";
    i = i + 1;
}
result = "Hello World".grep(large_pattern, "");
"Pattern: (10000 chars), Result type: " + typeof(result) + "\n".echo();

"---\n".echo();

/* ======================================== */
/* Test 7: Python property-based test simulation */
/* ======================================== */
"Test 7: Python Property-Based Test Simulation\n".echo();
"Testing various pattern and input combinations:\n".echo();

/* Test random patterns */
patterns = ["a", "ab", "abc", "a+", "a*", "a?", "a{1,3}", "[abc]", "[^abc]", "\\d", "\\w", "\\s"];
inputs = ["a", "ab", "abc", "aaa", "bbb", "123", "abc123", "   ", ""];

i = 0;
while (i < patterns.length) {
    j = 0;
    while (j < inputs.length) {
        try {
            result = inputs[j].grep(patterns[i], "");
            "Pattern: " + patterns[i] + " Input: " + inputs[j] + " Result: " + result.str() + "\n".echo();
        } catch (e) {
            "Pattern: " + patterns[i] + " Input: " + inputs[j] + " Error: " + e.str() + "\n".echo();
        }
        j = j + 1;
    }
    i = i + 1;
}

"---\n".echo();

/* ======================================== */
/* Test 8: Comprehensive context merging test */
/* ======================================== */
"Test 8: Comprehensive Context Merging Test\n".echo();
input = "Header\nLine 1\nLine 2\nLine 3\nLine 2\nLine 4\nLine 2\nLine 5\nFooter";
"Input: " + input + "\n".echo();
"Pattern: Line 2, Options: A2B2\n".echo();
result = input.grep("Line 2", "A2B2");
"Result: " + result.str() + "\n".echo();
"Expected: Should merge overlapping context regions\n".echo();
"---\n".echo();

"=== INVESTIGATION COMPLETE ===\n".echo(); 