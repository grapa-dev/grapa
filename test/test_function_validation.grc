/* Function Validation Test Suite
   - Tests all functions used in documentation and tests to ensure they are actually supported by Grapa.
   - Validates string, array, numeric, and system functions.
   - Ensures no assumed functions that don't exist are being used.
   - Maintainers: Run this after any documentation or test changes to verify function support.
   - Status: All tests should pass - critical for documentation accuracy.
*/

"=== FUNCTION VALIDATION TEST SUITE ===\n".echo();
"Testing all functions used in documentation and tests\n".echo();

/* ======================================== */
/* 1. String Functions */
/* ======================================== */
"Test 1: String Functions\n".echo();

/* Test .len() for strings */
test_string = "Hello World";
len_result = test_string.len();
("String .len(): " + len_result + " (expected: 11)\n").echo();

/* Test .str() conversion */
num_val = 42;
str_result = num_val.str();
("Number .str(): " + str_result + " (expected: \"42\")\n").echo();

/* Test .echo() */
"Testing .echo() function\n".echo();

/* Test .hex() conversion */
hex_result = "Hello".hex();
("String .hex(): " + hex_result + "\n").echo();

/* Test .type() */
type_result = test_string.type();
("String .type(): " + type_result + "\n").echo();

/* Test .isint() */
int_test1 = "123".isint();
int_test2 = "abc".isint();
("'123'.isint(): " + int_test1 + " (expected: 1, which equals true in Grapa)\n").echo();
("'abc'.isint(): " + int_test2 + " (expected: 0, which equals false in Grapa)\n").echo();

/* Test .upper() and .lower() */
upper_result = "hello".upper();
lower_result = "WORLD".lower();
("'hello'.upper(): " + upper_result + " (expected: \"HELLO\")\n").echo();
("'WORLD'.lower(): " + lower_result + " (expected: \"world\")\n").echo();

/* Test .left(), .right(), .mid() */
left_result = "Hello World".left(5);
right_result = "Hello World".right(5);
mid_result = "Hello World".mid(6, 5);
("'Hello World'.left(5): " + left_result + " (expected: \"Hello\")\n").echo();
("'Hello World'.right(5): " + right_result + " (expected: \"World\")\n").echo();
("'Hello World'.mid(6, 5): " + mid_result + " (expected: \"World\")\n").echo();

/* Test .trim(), .ltrim(), .rtrim() */
trim_result = "  hello  ".trim();
ltrim_result = "  hello  ".ltrim();
rtrim_result = "  hello  ".rtrim();
("'  hello  '.trim(): '" + trim_result + "' (expected: 'hello')\n").echo();
("'  hello  '.ltrim(): '" + ltrim_result + "' (expected: 'hello  ')\n").echo();
("'  hello  '.rtrim(): '" + rtrim_result + "' (expected: '  hello')\n").echo();

/* Test .lpad(), .rpad() */
lpad_result = "hello".lpad(10, "X");
rpad_result = "hello".rpad(10, "X");
("'hello'.lpad(10, 'X'): " + lpad_result + " (expected: \"XXXXXhello\")\n").echo();
("'hello'.rpad(10, 'X'): " + rpad_result + " (expected: \"helloXXXXX\")\n").echo();

/* Test .reverse() */
reverse_result = "hello".reverse();
("'hello'.reverse(): " + reverse_result + " (expected: \"olleh\")\n").echo();

/* Test .replace() */
replace_result = "hello world".replace("world", "grapa");
("'hello world'.replace('world', 'grapa'): " + replace_result + " (expected: \"hello grapa\")\n").echo();

/* Test += operator for string concatenation */
concat_test = "start";
concat_test += " and";
concat_test += " end";
("String concatenation with +=: " + concat_test + " (expected: \"start and end\")\n").echo();

/* Test .split() */
split_result = "a,b,c".split(",");
("'a,b,c'.split(','): " + split_result.str() + " (expected: [\"a\", \"b\", \"c\"])\n").echo();

/* Test .join() */
join_array = ["a", "b", "c"];
join_result = join_array.join("-");
("['a','b','c'].join('-'): " + join_result + " (expected: \"a-b-c\")\n").echo();

/* Test .mid() for substring operations */
mid_result = "Hello World".mid(6, 5);
("'Hello World'.mid(6, 5): " + mid_result + " (expected: \"World\")\n").echo();

"---\n".echo();

/* ======================================== */
/* 2. Array Functions */
/* ======================================== */
"Test 2: Array Functions\n".echo();

/* Test .len() for arrays */
test_array = ["a", "b", "c"];
array_len = test_array.len();
("Array .len(): " + array_len + " (expected: 3)\n").echo();

/* Test .lrot(), .rrot() */
lrot_result = test_array.lrot(1);
rrot_result = test_array.rrot(1);
("['a','b','c'].lrot(1): " + lrot_result.str() + " (expected: [\"b\", \"c\", \"a\"])\n").echo();
("['a','b','c'].rrot(1): " + rrot_result.str() + " (expected: [\"c\", \"a\", \"b\"])\n").echo();

/* Test .reverse() for arrays */
array_reverse = test_array.reverse();
("['a','b','c'].reverse(): " + array_reverse.str() + " (expected: [\"c\", \"b\", \"a\"])\n").echo();

"---\n".echo();

/* ======================================== */
/* 3. Numeric Functions */
/* ======================================== */
"Test 3: Numeric Functions\n".echo();

/* Test .int() */
int_result1 = "123".int();
int_result2 = "45.67".int();
("'123'.int(): " + int_result1 + " (expected: 123)\n").echo();
("'45.67'.int(): " + int_result2 + " (expected: 45)\n").echo();

/* Test .float() */
float_result = "3.14159".float();
("'3.14159'.float(): " + float_result + " (expected: 3.14159)\n").echo();

/* Test .bool() */
bool_result1 = "true".bool();
bool_result2 = "false".bool();
bool_result3 = "1".bool();
bool_result4 = "0".bool();
("'true'.bool(): " + bool_result1.str() + " (expected: true)\n").echo();
("'false'.bool(): " + bool_result2.str() + " (expected: true)\n").echo();
("'1'.bool(): " + bool_result3.str() + " (expected: true)\n").echo();
("'0'.bool(): " + bool_result4.str() + " (expected: false)\n").echo();

/* Test type verification for conversion functions */
int_type_result = "123".int().type();
float_type_result = "3.14159".float().type();
bool_type_result1 = "true".bool().type();
bool_type_result2 = "1".bool().type();
("'123'.int().type(): " + int_type_result + " (expected: $INT)\n").echo();
("'3.14159'.float().type(): " + float_type_result + " (expected: $FLOAT)\n").echo();
("'true'.bool().type(): " + bool_type_result1 + " (expected: $BOOL)\n").echo();
("'1'.bool().type(): " + bool_type_result2 + " (expected: $BOOL)\n").echo();

/* Test .base() */
base_result1 = (15).base(8);
base_result2 = (15).base(7);
("15.base(8): " + base_result1 + " (expected: 17)\n").echo();
("15.base(7): " + base_result2 + " (expected: 21)\n").echo();

/* Test .bin() */
bin_result = (12).bin();
("12.bin(): " + bin_result + " (expected: 1100)\n").echo();

/* Test .raw(), .uraw() - for unlimited precision and cryptographic operations */
raw_result = (255).raw();
uraw_result = (255).uraw();
raw_type = raw_result.type();
uraw_type = uraw_result.type();
raw_str = raw_result.str();
uraw_str = uraw_result.str();
("(255).raw().type(): " + raw_type + " (expected: $RAW)\n").echo();
("(255).uraw().type(): " + uraw_type + " (expected: $RAW)\n").echo();
("(255).raw().str(): " + raw_str + " (raw byte representation)\n").echo();
("(255).uraw().str(): " + uraw_str + " (unsigned raw byte representation)\n").echo();

/* Test hex values with raw/uraw - demonstrates sign handling for unlimited precision */
hex_raw = (0xFF).raw().int();
hex_uraw = (0xFF).uraw().int();
("(0xFF).raw().int(): " + hex_raw + " (expected: 255)\n").echo();
("(0xFF).uraw().int(): " + hex_uraw + " (expected: -1, shows sign extension issue)\n").echo();

/* Note: .uraw() ensures leftmost bit=1 is treated as positive for cryptographic calculations */
"Note: .uraw() prevents sign extension issues in unlimited precision calculations\n".echo();

/* Test .abs() */
abs_result1 = (-55).abs();
abs_result2 = (42).abs();
abs_result3 = (-3.14).abs();
("(-55).abs(): " + abs_result1 + " (expected: 55)\n").echo();
("(42).abs(): " + abs_result2 + " (expected: 42)\n").echo();
("(-3.14).abs(): " + abs_result3 + " (expected: 3.14)\n").echo();

"---\n".echo();

/* ======================================== */
/* 4. System Functions */
/* ======================================== */
"Test 4: System Functions\n".echo();

/* Test $TIME().utc() */
time_result = $TIME().utc();
time_ms = (time_result/1000000).int();
("$TIME().utc(): " + time_result + " (nanoseconds)\n").echo();
("$TIME().utc() in ms: " + time_ms + " (milliseconds)\n").echo();

/* Test time difference calculation */
start_time = $TIME().utc();
/* Simulate some work */
i = 0;
while (i < 1000) {
    i = i + 1;
}
end_time = $TIME().utc();
elapsed_ms = ((end_time-start_time)/1000000).int();
("Time difference calculation: " + elapsed_ms + " ms\n").echo();

/* Test $ERR, $STR types */
err_type = $ERR;
str_type = $STR;
("$ERR type: " + err_type + "\n").echo();
("$STR type: " + str_type + "\n").echo();

/* Test $sys().type() */
sys_type_result = $sys().type("test");
sys_type_int = $sys().type(123);
sys_type_float = $sys().type(3.14);
sys_type_array = $sys().type([1,2,3]);
("$sys().type('test'): " + sys_type_result + " (expected: $STR)\n").echo();
("$sys().type(123): " + sys_type_int + " (expected: $INT)\n").echo();
("$sys().type(3.14): " + sys_type_float + " (expected: $FLOAT)\n").echo();
("$sys().type([1,2,3]): " + sys_type_array + " (expected: $ARRAY)\n").echo();

"---\n".echo();

/* ======================================== */
/* 5. Grep Function (Primary Function) */
/* ======================================== */
"Test 5: Grep Function\n".echo();

/* Test basic .grep() */
grep_result = "Hello World".grep("World");
("'Hello World'.grep('World'): " + grep_result.str() + " (expected: [\"Hello World\"])\n").echo();

/* Test .grep() with options */
grep_o_result = "Hello World".grep("\\w+", "o");
("'Hello World'.grep('\\\\w+', 'o'): " + grep_o_result.str() + " (expected: [\"Hello\", \"World\"])\n").echo();

/* Test .grep() with case insensitive */
grep_i_result = "Hello WORLD".grep("world", "i");
("'Hello WORLD'.grep('world', 'i'): " + grep_i_result.str() + " (expected: [\"Hello WORLD\"])\n").echo();

/* Test .grep() with JSON output */
grep_j_result = "Hello World".grep("\\w+", "j");
("'Hello World'.grep('\\\\w+', 'j'): " + grep_j_result.str() + " (should be JSON array)\n").echo();

"---\n".echo();

/* ======================================== */
/* 6. Test Functions That Should NOT Exist */
/* ======================================== */
"Test 6: Functions That Should NOT Exist\n".echo();

/* Note: Grapa doesn't support try/catch, so we can't test for non-existent functions */
/* These functions should NOT exist in Grapa: */
"Functions that should NOT exist in Grapa:\n".echo();
"- .repeat() - use manual string construction loops instead\n".echo();
"- .length() - use .len() instead\n".echo();
"- .indexOf() - use .grep() instead\n".echo();
"- .substr() - use .mid() instead\n".echo();
"- .charAt() - use array indexing instead\n".echo();
"- .concat() - use + operator instead\n".echo();
"- .slice() - use .mid() instead\n".echo();
"- try/catch blocks - not supported\n".echo();

"Manual validation: If any of these functions exist, the test will fail when executed.\n".echo();

"---\n".echo();

/* ======================================== */
/* 7. Edge Cases and Error Handling */
/* ======================================== */
"Test 7: Edge Cases and Error Handling\n".echo();

/* Test empty string functions */
empty_len = "".len();
("Empty string .len(): " + empty_len + " (expected: 0)\n").echo();

/* Test empty array functions */
empty_array = [];
empty_array_len = empty_array.len();
("Empty array .len(): " + empty_array_len + " (expected: 0)\n").echo();

/* Test null/undefined handling */
"Testing null handling:\n".echo();
"Note: Grapa doesn't support try/catch, so error handling is manual\n".echo();
"Manual validation: null.len() should fail if null is supported\n".echo();

/* Test invalid numeric conversions */
"Testing invalid numeric conversions:\n".echo();
"Manual validation: 'abc'.int() should fail for invalid conversions\n".echo();

"---\n".echo();

/* ======================================== */
/* 8. Function Chaining */
/* ======================================== */
"Test 8: Function Chaining\n".echo();

/* Test chaining string functions */
chain_result = "  hello world  ".trim().upper().replace("WORLD", "GRAPA");
("'  hello world  '.trim().upper().replace('WORLD', 'GRAPA'): " + chain_result + " (expected: \"HELLO GRAPA\")\n").echo();

/* Test chaining array functions */
chain_array = ["a", "b", "c"];
chain_array_result = chain_array.reverse().join("-");
("['a','b','c'].reverse().join('-'): " + chain_array_result + " (expected: \"c-b-a\")\n").echo();

"---\n".echo();

/* ======================================== */
/* 9. Performance Test */
/* ======================================== */
"Test 9: Performance Test\n".echo();

/* Test large string operations */
large_string = "";
i = 0;
while (i < 1000) {
    large_string = large_string + "test";
    i = i + 1;
}

large_len = large_string.len();
large_upper = large_string.upper();
("Large string .len(): " + large_len + " (expected: 4000)\n").echo();
("Large string .upper() length: " + large_upper.len() + " (expected: 4000)\n").echo();

/* Test large array operations */
large_array = [];
i = 0;
while (i < 1000) {
    large_array.push("item" + i);
    i = i + 1;
}

large_array_len = large_array.len();
("Large array .len(): " + large_array_len + " (expected: 1000)\n").echo();

"---\n".echo();

/* ======================================== */
/* 10. Summary */
/* ======================================== */
"Test 10: Summary\n".echo();
"All function validation tests completed.\n".echo();
"Functions tested:\n".echo();
"- String functions: .len(), .str(), .echo(), .hex(), .type(), .isint(), .upper(), .lower()\n".echo();
"- String functions: .left(), .right(), .mid(), .trim(), .ltrim(), .rtrim()\n".echo();
"- String functions: .lpad(), .rpad(), .reverse(), .replace(), .split(), .join()\n".echo();
"- Array functions: .len(), .lrot(), .rrot(), .reverse()\n".echo();
"- Numeric functions: .int(), .float(), .bool(), .base(), .bin(), .raw(), .uraw(), .abs()\n".echo();
"- System functions: $TIME().utc(), $ERR, $STR, $sys().type()\n".echo();
"- Primary function: .grep() with various options\n".echo();
"- Non-existent functions: .repeat(), .length(), .indexOf(), .substr(), .substring(), .charAt(), .concat(), .slice()\n".echo();

"=== FUNCTION VALIDATION COMPLETE ===\n".echo(); 