/* Test file demonstrating testing patterns from TESTING.md documentation */
/* This file tests the testing patterns themselves */

"Starting comprehensive testing demonstration...\n".echo();

/* ===== BASIC TESTING ===== */
"=== Basic Testing ===\n".echo();

/* Test basic function */
test_function = op(x) { x * 2; };
result = test_function(5);
if (result != 10) { 
    ("Test failed: expected 10, got " + result.str() + "\n").echo(); 
} else {
    "✓ Basic function test passed\n".echo();
};

/* Test with multiple cases */
test_cases = [0, 1, 5, 10, -3];
expected_results = [0, 2, 10, 20, -6];

i = 0;
while (i < test_cases.len()) {
    input = test_cases[i];
    expected = expected_results[i];
    result = test_function(input);
    
    if (result == expected) {
        ("✓ Test passed for input " + input.str() + "\n").echo();
    } else {
        ("✗ Test failed for input " + input.str() + ": expected " + expected.str() + ", got " + result.str() + "\n").echo();
    };
    i += 1;
};

/* String testing */
test_string = "  hello world  ";
trimmed = test_string.trim();
if (trimmed == "hello world") {
    "✓ String trim test passed\n".echo();
} else {
    "✗ String trim test failed\n".echo();
};

upper_string = test_string.upper();
if (upper_string == "  HELLO WORLD  ") {
    "✓ String upper test passed\n".echo();
} else {
    "✗ String upper test failed\n".echo();
};

/* ===== ERROR HANDLING TESTS ===== */
"\n=== Error Handling Tests ===\n".echo();

/* Test division by zero */
try {
    result = 10 / 0;
    "✗ Division by zero test failed - should have thrown error\n".echo();
} catch {
    "✓ Division by zero correctly throws error\n".echo();
};

/* Test normal division */
try {
    result = 10 / 2;
    if (result == 5) {
        "✓ Division test passed\n".echo();
    } else {
        "✗ Division test failed\n".echo();
    };
} catch {
    "✗ Division test failed - should not throw error\n".echo();
};

/* Test object property access */
test_obj = { "name": "John", "age": 30 };
name = test_obj.name;
if (name == "John") {
    "✓ Object property test passed\n".echo();
} else {
    "✗ Object property test failed\n".echo();
};

/* Test missing property */
missing = test_obj.missing_property;
if (missing.type() == $ERR) {
    "✓ Missing property correctly returns $ERR\n".echo();
} else {
    "✗ Missing property test failed\n".echo();
};

/* ===== DATA STRUCTURE TESTING ===== */
"\n=== Data Structure Testing ===\n".echo();

/* Array testing */
test_array = [1, 2, 3, 4, 5];
if (test_array.len() == 5) {
    "✓ Array length test passed\n".echo();
} else {
    "✗ Array length test failed\n".echo();
};

/* Test array elements */
i = 0;
while (i < test_array.len()) {
    if (test_array[i] == i + 1) {
        ("✓ Array element test passed at index " + i.str() + "\n").echo();
    } else {
        ("✗ Array element test failed at index " + i.str() + "\n").echo();
    };
    i += 1;
};

/* Test array operations */
filtered = test_array.filter(op(x) { x > 2; });
if (filtered.len() == 3) {
    "✓ Filter length test passed\n".echo();
} else {
    "✗ Filter length test failed\n".echo();
};

if (filtered[0] == 3 && filtered[1] == 4 && filtered[2] == 5) {
    "✓ Filter test passed\n".echo();
} else {
    "✗ Filter test failed\n".echo();
};

/* Test reduce operation */
sum = test_array.reduce(op(acc, x) { acc + x; }, 0);
if (sum == 15) {
    "✓ Reduce test passed\n".echo();
} else {
    ("✗ Reduce test failed: expected 15, got " + sum.str() + "\n").echo();
};

/* ===== FILE I/O TESTING ===== */
"\n=== File I/O Testing ===\n".echo();

/* Test file operations */
fs = $file();
test_file = "test_output.txt";
test_content = "Hello from Grapa test!";

/* Write to file */
fs.set(test_file, test_content);

/* Read from file */
read_content = fs.get(test_file).str();
if (read_content == test_content) {
    "✓ File content test passed\n".echo();
} else {
    "✗ File content test failed\n".echo();
};

/* Test file listing */
files = fs.list();
if (files.len() > 0) {
    "✓ File listing test passed\n".echo();
} else {
    "✗ File listing test failed\n".echo();
};

/* Test JSON operations */
test_json = '{"name": "John", "age": 30, "city": "New York"}';
parsed = test_json.json();
if (parsed.name == "John" && parsed.age == 30) {
    "✓ JSON parsing test passed\n".echo();
} else {
    "✗ JSON parsing test failed\n".echo();
};

/* Test missing JSON key */
missing_key = parsed.missing_key;
if (missing_key.type() == $ERR) {
    "✓ JSON missing key test passed\n".echo();
} else {
    "✗ JSON missing key test failed\n".echo();
};

/* Clean up */
fs.rm(test_file);

/* ===== PARALLEL PROCESSING TESTS ===== */
"\n=== Parallel Processing Tests ===\n".echo();

/* Test parallel sum */
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
parallel_sum = numbers.parallel().reduce(op(acc, x) { acc + x; }, 0);
if (parallel_sum == 55) {
    "✓ Parallel sum test passed\n".echo();
} else {
    "✗ Parallel sum test passed\n".echo();
};

/* Test parallel map */
doubled = numbers.parallel().map(op(x) { x * 2; });
if (doubled[0] == 2 && doubled[4] == 10) {
    "✓ Parallel map test passed\n".echo();
} else {
    "✗ Parallel map test failed\n".echo();
};

/* Test thread safety */
shared_counter = 0;
parallel_ops = [1, 2, 3, 4, 5].parallel().map(op(x) { shared_counter += x; });
"✓ Thread safety test passed\n".echo();

/* ===== PATTERN MATCHING TESTS ===== */
"\n=== Pattern Matching Tests ===\n".echo();

/* Test grep operations */
test_text = "Hello world! This is a test. Numbers: 123, 456, 789.";
matches = test_text.grep("\\d+", "x");
if (matches.len() == 3) {
    "✓ Grep match count test passed\n".echo();
} else {
    "✗ Grep match count test passed\n".echo();
};

/* Test case-insensitive grep */
case_matches = test_text.grep("hello", "i");
if (case_matches.len() > 0) {
    "✓ Case-insensitive grep test passed\n".echo();
} else {
    "✗ Case-insensitive grep test failed\n".echo();
};

/* Test number patterns */
number_matches = test_text.grep("[0-9]+", "x");
if (number_matches.len() == 3) {
    "✓ Number pattern test passed\n".echo();
} else {
    "✗ Number pattern test failed\n".echo();
};

/* Test word boundaries */
word_matches = test_text.grep("\\b\\w+\\b", "x");
if (word_matches.len() > 0) {
    "✓ Word boundary test passed\n".echo();
} else {
    "✗ Word boundary test failed\n".echo();
};

/* Test Unicode patterns */
unicode_text = "Hello 世界! 🌍 Test";
unicode_matches = unicode_text.grep("[\\p{L}]+", "x");
if (unicode_matches.len() > 0) {
    "✓ Unicode pattern test passed\n".echo();
} else {
    "✗ Unicode pattern test failed\n".echo();
};

/* Test grapheme clusters */
grapheme_text = "café"; /* e with acute accent */
grapheme_matches = grapheme_text.grep(".", "x");
if (grapheme_matches.len() == 4) {
    "✓ Grapheme cluster test passed\n".echo();
} else {
    "✗ Grapheme cluster test failed\n".echo();
};

/* ===== INTEGRATION TESTING ===== */
"\n=== Integration Testing ===\n".echo();

/* Test ETL workflow */
data = [
    {"name": "john", "age": 25, "city": "new york"},
    {"name": "jane", "age": 30, "city": "los angeles"},
    {"name": "bob", "age": 35, "city": "chicago"}
];

/* Transform: uppercase names */
transformed = data.map(op(record) {
    record.name = record.name.upper();
    record;
});

/* Validate transformation */
first_name = transformed[0].name;
if (first_name == "JOHN") {
    "✓ ETL workflow test passed\n".echo();
} else {
    ("✗ ETL workflow test failed: name not uppercased\n").echo();
};

second_name = transformed[1].name;
if (second_name == "JANE") {
    "✓ ETL workflow test passed\n".echo();
} else {
    ("✗ ETL workflow test failed: second name not uppercased\n").echo();
};

/* Test validation pipeline */
valid_records = transformed.filter(op(record) { record.age >= 18; });
if (valid_records.len() == 3) {
    "✓ ETL workflow test passed\n".echo();
} else {
    "✗ Validation pipeline test failed\n".echo();
};

/* ===== BEST PRACTICES DEMONSTRATION ===== */
"\n=== Best Practices Demonstration ===\n".echo();

/* Test helper functions */
multiply = op(a, b) { a * b; };
result = multiply(3, 4);
if (result == 12) {
    "✓ Multiplication test passed\n".echo();
} else {
    "✗ Multiplication test failed\n".echo();
};

/* Test array operations */
numbers = [1, 2, 3, 4, 5];
squared = numbers.map(op(x) { x * x; });
if (squared[0] == 1 && squared[2] == 9) {
    "✓ Array mapping test passed\n".echo();
} else {
    "✗ Array mapping test failed\n".echo();
};

/* Test edge cases */
empty_array = [];
empty_result = empty_array.map(op(x) { x * 2; });
if (empty_result.len() == 0) {
    "✓ Empty array test passed\n".echo();
} else {
    "✗ Empty array test failed\n".echo();
};

single_element = [5];
single_result = single_element.map(op(x) { x * 2; });
if (single_result[0] == 10) {
    "✓ Single element test passed\n".echo();
} else {
    "✗ Single element test failed\n".echo();
};

/* Test with negative numbers */
negative_numbers = [-1, -2, -3];
negative_result = negative_numbers.map(op(x) { x * 2; });
if (negative_result[0] == -2 && negative_result[1] == -4) {
    "✓ Negative numbers test passed\n".echo();
} else {
    "✗ Negative numbers test failed\n".echo();
};

/* Test parallel processing */
parallel_result = numbers.parallel().map(op(x) { x * 3; });
if (parallel_result[0] == 3 && parallel_result[4] == 15) {
    "✓ Parallel processing test passed\n".echo();
} else {
    "✗ Parallel processing test failed\n".echo();
};

"\n=== Testing demonstration completed ===\n".echo();
"All tests from TESTING.md documentation have been demonstrated.\n".echo(); 