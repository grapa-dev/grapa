/* Functional Programming and Advanced Methods Test Suite
   - Tests functional programming methods (.map(), .filter(), .reduce())
   - Tests array manipulation methods (.sort(), .unique(), .range())
   - Tests advanced string and numeric functions
   - Tests assignment operators (++=, -=)
   - Validates multi-threading capabilities
   - Status: Comprehensive validation of advanced Grapa features
*/

"=== FUNCTIONAL PROGRAMMING TEST SUITE ===\n".echo();
"Testing advanced functions discovered in BNF grammar and $OBJ definitions\n".echo();

/* ======================================== */
/* 1. Functional Programming Methods */
/* ======================================== */
"Test 1: Functional Programming Methods\n".echo();

/* Test .map() - Transform array elements */
test_array = [1, 2, 3, 4, 5];
map_result = test_array.map(op(x){x * 2});
("Basic .map(): " + map_result.str() + " (expected: [2, 4, 6, 8, 10])\n").echo();

/* Test .map() with additional data */
map_data_result = test_array.map(op(x, data){x + data}, 10);
(".map() with data: " + map_data_result.str() + " (expected: [11, 12, 13, 14, 15])\n").echo();

/* Test .map() with thread specification */
map_thread_result = test_array.map(op(x){x * x}, null, 2);
(".map() with threads: " + map_thread_result.str() + " (expected: [1, 4, 9, 16, 25])\n").echo();

/* Test .filter() - Filter array elements */
filter_result = test_array.filter(op(x){x > 3});
("Basic .filter(): " + filter_result.str() + " (expected: [4, 5])\n").echo();

/* Test .filter() with additional data */
filter_data_result = test_array.filter(op(x, threshold){x > threshold}, 2);
(".filter() with data: " + filter_data_result.str() + " (expected: [3, 4, 5])\n").echo();

/* Test .filter() with thread specification */
filter_thread_result = test_array.filter(op(x){x % 2 == 0}, null, 2);
(".filter() with threads: " + filter_thread_result.str() + " (expected: [2, 4])\n").echo();

/* Test .reduce() - Reduce array to single value */
reduce_result = test_array.reduce(op(acc, x){acc += x});
("Basic .reduce(): " + reduce_result + " (expected: 15)\n").echo();

/* Test .reduce() with initial value */
reduce_init_result = test_array.reduce(op(acc, x){acc += x}, 10);
(".reduce() with initial: " + reduce_init_result + " (expected: 25)\n").echo();

/* Test .reduce() with additional data */
reduce_data_result = test_array.reduce(op(acc, x, data){acc += x + data}, 0, 5);
(".reduce() with data: " + reduce_data_result + " (expected: 40)\n").echo();

"---\n".echo();

/* ======================================== */
/* 2. Array Manipulation Methods */
/* ======================================== */
"Test 2: Array Manipulation Methods\n".echo();

/* Test .sort() */
sort_test = [3, 1, 4, 1, 5, 9, 2, 6];
sort_result = sort_test.sort();
("Basic .sort(): " + sort_result.str() + " (expected: [1, 1, 2, 3, 4, 5, 6, 9])\n").echo();

/* Test .unique() */
unique_test = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4];
unique_result = unique_test.unique();
("Basic .unique(): " + unique_result.str() + " (expected: [1, 2, 3, 4])\n").echo();

/* Test .range() */
range_result1 = (5).range();
("(5).range(): " + range_result1.str() + " (expected: [0, 1, 2, 3, 4])\n").echo();

range_result2 = (9).range(1, 2);
("(9).range(1, 2): " + range_result2.str() + " (expected: [1, 3, 5, 7])\n").echo();

range_result3 = (10).range(0, 2);
("(10).range(0, 2): " + range_result3.str() + " (expected: [0, 2, 4, 6, 8])\n").echo();

"---\n".echo();

/* ======================================== */
/* 3. Advanced Assignment Operators */
/* ======================================== */
"Test 3: Advanced Assignment Operators\n".echo();

/* Test ++= operator (extend) */
extend_test = {"a": 1, "b": 2};
extend_test ++= {"c": 3, "d": 4};
("++= operator: " + extend_test.str() + " (expected: {\"a\":1,\"b\":2,\"c\":3,\"d\":4})\n").echo();

/* Test -= operator (remove) */
remove_test = {"a": 1, "b": 2, "c": 3, "d": 4};
remove_test -= remove_test["b"];
("-= operator: " + remove_test.str() + " (expected: {\"a\":1,\"c\":3,\"d\":4})\n").echo();

"---\n".echo();

/* ======================================== */
/* 4. Advanced String Functions */
/* ======================================== */
"Test 4: Advanced String Functions\n".echo();

/* Test .midtrim() */
midtrim_test = "this is a test to see";
midtrim_result = midtrim_test.midtrim([["a",2,1," "," "],["b",10,5," "," ",op(a){a.len();}]],1,13);
(".midtrim(): " + midtrim_result.str() + " (complex trimming rules)\n").echo();

/* Test .findall() */
findall_test = {"name": "test", "value": 42, "items": [1, 2, 3]};
findall_result = findall_test.findall({"name": ""});
(".findall(): " + findall_result.str() + " (search structured data)\n").echo();

/* Test .string() */
string_test = 42;
("Testing .string() output to stdio: ").echo();
string_test.string();
("\n").echo();

"---\n".echo();

/* ======================================== */
/* 5. Advanced Numeric Functions */
/* ======================================== */
"Test 5: Advanced Numeric Functions\n".echo();

/* Test .uint() */
uint_result = (-42).uint();
("(-42).uint(): " + uint_result + " (unsigned integer)\n").echo();

/* Test .fix() */
fix_result = (3.14159).fix(2);
("(3.14159).fix(2): " + fix_result + " (fixed-point)\n").echo();

/* Test .bits() and .bytes() */
bits_result = (255).bits();
bytes_result = (255).bytes();
("(255).bits(): " + bits_result + "\n").echo();
("(255).bytes(): " + bytes_result + "\n").echo();

/* Test .setbit() and .clearbit() */
setbit_test = 0;
setbit_result = setbit_test.setbit(3);
clearbit_result = setbit_result.clearbit(1);
("setbit(3): " + setbit_result + " (expected: 8)\n").echo();
("clearbit(1): " + clearbit_result + " (expected: 8)\n").echo();

/* Test .genbits() */
genbits_result = (8).genbits();
(".genbits(): " + genbits_result + " (generate bits)\n").echo();

"---\n".echo();

/* ======================================== */
/* 6. Advanced Object Functions */
/* ======================================== */
"Test 6: Advanced Object Functions\n".echo();

/* Test .identity() */
identity_result = (3).identity();
(".identity(): " + identity_result.str() + " (identity matrix)\n").echo();

/* Test .diagonal() */
diagonal_result = identity_test.diagonal();
(".diagonal(): " + diagonal_result.str() + " (diagonal elements)\n").echo();

/* Test .encode() and .decode() */
encode_test = "Hello World";
encode_result = encode_test.encode("BASE64");
decode_result = encode_result.decode("BASE64");
("BASE64 encode: " + encode_result + "\n").echo();
("BASE64 decode: " + decode_result + "\n").echo();

/* Test .json(), .xml(), .html() - Parse string input */
json_string = '{"name": "test", "value": 42, "nested": {"key": "value"}}';
xml_string = '<root><item id="1">test</item><item id="2">value</item></root>';
html_string = '<html><head><title>Test</title></head><body><h1>Hello</h1><p>World</p></body></html>';

json_result = json_string.encode("JSON");
xml_result = xml_string.encode("XML");
html_result = html_string.encode("HTML");

("JSON parsing: " + json_result.str() + " (type: " + json_result.type() + " - should be $LIST)\n").echo();
("XML parsing: " + xml_result.str() + " (type: " + xml_result.type() + " - should be $XML)\n").echo();
("HTML parsing: " + html_result.str() + " (type: " + html_result.type() + " - should be $XML)\n").echo();

"---\n".echo();

/* ======================================== */
/* 7. Complex Functional Programming */
/* ======================================== */
"Test 7: Complex Functional Programming\n".echo();

/* Test chaining functional operations */
complex_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

/* Filter even numbers, double them, then sum */
pipeline_result = complex_data.filter(op(x){x % 2 == 0}, null, 2)
                              .map(op(x){x * 2}, null, 2)
                              .reduce(op(acc, x){acc += x});
("Complex pipeline: " + pipeline_result + " (expected: 60)\n").echo();

/* Test with string data */
string_data = ["apple", "banana", "cherry", "date", "elderberry"];
filtered_strings = string_data.filter(op(s){s.len() > 5})
                              .map(op(s){s.upper()});
("String pipeline: " + filtered_strings.str() + " (expected: [\"BANANA\", \"ELDERBERRY\"])\n").echo();

"---\n".echo();

/* ======================================== */
/* 8. Performance and Threading */
/* ======================================== */
"Test 8: Performance and Threading\n".echo();

/* Test large array with threading */
large_array = [];
i = 0;
while (i < 1000) {
    large_array.push(i);
    i = i + 1;
}

start_time = $TIME().utc();
threaded_result = large_array.map(op(x){x * x}, null, 4);
end_time = $TIME().utc();
threaded_time = ((end_time - start_time) / 1000000).int();

start_time = $TIME().utc();
sequential_result = large_array.map(op(x){x * x});
end_time = $TIME().utc();
sequential_time = ((end_time - start_time) / 1000000).int();

("Large array threaded (4 threads): " + threaded_time + " ms\n").echo();
("Large array sequential: " + sequential_time + " ms\n").echo();
("Threading speedup: " + (sequential_time / threaded_time) + "x\n").echo();

"---\n".echo();

/* ======================================== */
/* 9. Error Handling and Edge Cases */
/* ======================================== */
"Test 9: Error Handling and Edge Cases\n".echo();

/* Test empty array operations */
empty_array = [];
empty_map = empty_array.map(op(x){x * 2});
empty_filter = empty_array.filter(op(x){x > 0});
empty_reduce = empty_array.reduce(op(acc, x){acc += x}, 0);
("Empty array .map(): " + empty_map.str() + " (expected: [])\n").echo();
("Empty array .filter(): " + empty_filter.str() + " (expected: [])\n").echo();
("Empty array .reduce(): " + empty_reduce + " (expected: 0)\n").echo();

/* Test single element operations */
single_array = [42];
single_map = single_array.map(op(x){x * 2});
single_filter = single_array.filter(op(x){x > 0});
single_reduce = single_array.reduce(op(acc, x){acc += x});
("Single element .map(): " + single_map.str() + " (expected: [84])\n").echo();
("Single element .filter(): " + single_filter.str() + " (expected: [42])\n").echo();
("Single element .reduce(): " + single_reduce + " (expected: 42)\n").echo();

"---\n".echo();

/* ======================================== */
/* 10. Summary */
/* ======================================== */
"Test 10: Summary\n".echo();
"All functional programming tests completed.\n".echo();
"Functions tested:\n".echo();
"- Functional programming: .map(), .filter(), .reduce()\n".echo();
"- Array manipulation: .sort(), .unique(), .range()\n".echo();
"- Assignment operators: ++=, -=\n".echo();
"- Advanced string: .midtrim(), .findall(), .string()\n".echo();
"- Advanced numeric: .uint(), .fix(), .bits(), .bytes(), .setbit(), .clearbit(), .genbits()\n".echo();
"- Advanced object: .identity(), .diagonal(), .encode(), .decode(), .json(), .xml(), .html()\n".echo();
"- Performance: Multi-threading validation\n".echo();
"- Edge cases: Empty arrays, single elements\n".echo();

"=== FUNCTIONAL PROGRAMMING TEST COMPLETE ===\n".echo(); 