/* Individual Test Runner */

"=== INDIVIDUAL TEST RUNNER ===".echo();
"\n".echo();

/*
NOTE: In Grapa, use $local. only on the first assignment of a function-local variable. All subsequent references in the same function can use the variable name directly. This prevents variable shadowing and ensures variables are scoped to the current function, similar to 'var' in other languages.
*/

/* Test: Parallel CSV Processing */
test_parallel_csv_processing = op() {
    $local.test_files = ["test1.csv", "test2.csv", "test3.csv"];
    $local.data = [];
    $local.clean_data = [];
    $local.total_records = 0;
    $local.i = 0;
    "Starting test_parallel_csv_processing\n".echo();
    ("test_files created: " + $local.test_files.str() + "\n").echo();
    
    /* Create test files */
    $file().set("test1.csv", "name,age,city\nJohn,30,NYC\nJane,25,LA");
    $file().set("test2.csv", "name,age,city\nBob,35,Chicago\nAlice,28,Boston");
    $file().set("test3.csv", "name,age,city\nCharlie,40,Seattle\nDiana,32,Portland");
    "Files created\n".echo();
    
    /* Test the parallel processing */
    $local.data = $local.test_files.map(op(file) { $file().get(file).str().split("\n"); });
    ("data created: " + $local.data.str() + "\n").echo();
    
    /* Transform: Clean and validate data */
    $local.clean_data = $local.data.map(op(rows) { 
        rows.filter(op(row) { 
            fields = row.split(",");
            fields.len() == 3 && fields[0] != "name";  /* Skip header, validate structure */
        });
    });
    ("clean_data created: " + $local.clean_data.str() + "\n").echo();
    
    /* Load: Aggregate results */
    $local.total_records = 0;
    $local.i = 0;
    while ($local.i < $local.clean_data.len()) {
        $local.total_records = $local.total_records + $local.clean_data[$local.i].len();
        $local.i = $local.i + 1;
    };
    ("total_records calculated: " + $local.total_records.str() + "\n").echo();
    
    ("Processed " + $local.total_records.str() + " records across " + $local.test_files.len().str() + " files\n").echo();
    
    /* Cleanup */
    $local.test_files.map(op(file) { $file().rm(file); });
    "Cleanup completed\n".echo();
    
    $local.total_records == 6;  /* Should have 6 records total */
};

/* Test: Data Validation Pipeline */
test_data_validation = op() {
    "Starting test_data_validation\n".echo();
    
    /* Define validation rules */
    rules = {
        "email": {"pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"},
        "age": {"min": 0, "max": 150},
        "salary": {"min": 0, "max": 1000000}
    };
    "Rules defined\n".echo();
    
    /* Test data */
    test_data = [
        {"email": "john@example.com", "age": 30, "salary": 50000},
        {"email": "invalid-email", "age": 200, "salary": 2000000},
        {"email": "jane@test.org", "age": 25, "salary": 75000}
    ];
    "Test data created\n".echo();
    
    /* Validate data in parallel */
    validate_record = op(record, rules) {
        errors = [];
        if (!record.get("email").match(rules.get("email").get("pattern"))) {
            errors += "Invalid email format";
        };
        if (record.get("age") < rules.get("age").get("min") || record.get("age") > rules.get("age").get("max")) {
            errors += "Age out of range";
        };
        if (record.get("salary") < rules.get("salary").get("min") || record.get("salary") > rules.get("salary").get("max")) {
            errors += "Salary out of range";
        };
        {"record": record, "errors": errors, "valid": errors.len() == 0};
    };
    "Validation function defined\n".echo();
    
    /* Process validation results */
    results = test_data.map(op(record) { validate_record(record, rules); });
    valid_records = results.filter(op(result) { result.get("valid"); });
    invalid_records = results.filter(op(result) { !result.get("valid"); });
    "Validation completed\n".echo();
    
    ("Valid records: " + valid_records.len().str() + "\n").echo();
    ("Invalid records: " + invalid_records.len().str() + "\n").echo();
    
    valid_records.len() == 1 && invalid_records.len() == 2;  /* Should have 1 valid, 2 invalid */
};

/* Test: Simple Expression Parser */
test_expression_parser = op() {
    "Starting test_expression_parser\n".echo();
    
    /* Test basic arithmetic evaluation */
    test_expressions = ["2+3*4", "(1+2)*3", "10/2+5"];
    results = test_expressions.map(op(expr) { 
        $sys().eval(expr); 
    });
    ("Expression results: " + results.str() + "\n").echo();
    
    results[0] == 14 && results[1] == 9 && results[2] == 10;
};

/* Test: Unlimited Precision Math */
test_unlimited_precision = op() {
    "Starting test_unlimited_precision\n".echo();
    
    large_number = 123456789012345678901234567890;
    precise_float = 3.14159265358979323846264338327950288419716939937510;
    
    result = large_number * precise_float;
    ("Large number result: " + result.str() + "\n").echo();
    
    result > large_number;  /* Should be larger than original */
};

/* Test: Financial Calculations */
test_financial_calculations = op() {
    "Starting test_financial_calculations\n".echo();
    
    /* Simple interest calculation */
    simple_interest = op(principal, rate, time) {
        principal * rate * time / 100;
    };
    
    /* Test calculations */
    $local.principal = 10000;
    $local.rate = 5.0;
    $local.time = 2;
    
    $local.interest = simple_interest($local.principal, $local.rate, $local.time);
    $local.total = $local.principal + $local.interest;
    
    ("Principal: $" + $local.principal.str() + "\n").echo();
    ("Interest: $" + $local.interest.str() + "\n").echo();
    ("Total: $" + $local.total.str() + "\n").echo();
    
    $local.interest > 0 && $local.total > $local.principal;  /* Should be positive values */
};

/* Test: Parallel Data Processing */
test_parallel_processing = op() {
    "Starting test_parallel_processing\n".echo();
    
    /* Create test data */
    test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    
    /* Process data in parallel */
    results = test_data.map(op(x) { x * 2; });
    
    ("Parallel processing results: " + results.str() + "\n").echo();
    
    results.len() == 10 && results[0] == 2 && results[9] == 20;
};

/* Test: Map with parameters */
test_map_with_params = op() {
    "Starting test_map_with_params\n".echo();
    
    test_data = [1, 2, 3, 4, 5];
    results = test_data.map(op(x, p) { x * 2 + p; }, 5);
    
    ("Map with params results: " + results.str() + "\n").echo();
    
    results[0] == 7 && results[4] == 15;  /* (1*2+5), (5*2+5) */
};

/* Test: String processing (simulating web scraping) */
test_string_processing = op() {
    "Starting test_string_processing\n".echo();
    
    /* Simulate HTML content */
    html_content = "<h1>Title 1</h1><h2>Title 2</h2><a href='http://example.com'>Link</a>";
    
    /* Extract data using string operations */
    titles = html_content.grep("<h[1-6][^>]*>.*?</h[1-6]>", "o");
    links = html_content.grep("href=['\"][^'\"]*['\"]", "o");
    
    ("Extracted titles: " + titles.str() + "\n").echo();
    ("Extracted links: " + links.str() + "\n").echo();
    
    titles.len() > 0 && links.len() > 0;
};

/* Test: File System Operations */
test_file_system = op() {
    "Starting test_file_system\n".echo();
    
    /* Create test file */
    test_content = "line 1\nline 2\nline 3\nline 4\nline 5";
    $file().set("test_file.txt", test_content);
    
    /* Read and process file */
    content = $file().get("test_file.txt").str();
    lines = content.split("\n");
    filtered = lines.filter(op(line) { line.len() > 0; });
    
    ("File lines: " + filtered.len().str() + "\n").echo();
    
    /* Cleanup */
    $file().rm("test_file.txt");
    
    filtered.len() == 5;  /* Should have 5 non-empty lines */
};

/* Test: Table Operations */
test_table_operations = op() {
    "Starting test_table_operations\n".echo();
    
    /* Create table */
    $local.table = $file().table("ROW");
    $local.table.mkfield("name", "STR", "VAR");
    $local.table.mkfield("age", "INT", "FIX", 4);
    
    /* Add data */
    $local.table.set("user1", "John", "name");
    $local.table.set("user1", 30, "age");
    $local.table.set("user2", "Jane", "name");
    $local.table.set("user2", 25, "age");
    
    /* Retrieve data */
    $local.name1 = $local.table.get("user1", "name").str();
    $local.age1_raw = $local.table.get("user1", "age");
    $local.name2 = $local.table.get("user2", "name").str();
    $local.age2_raw = $local.table.get("user2", "age");
    
    /*
    WORKAROUND: Table INT and FLOAT fields are returned as $STR containing raw bytes.
    Use .raw().int() or .raw().float() to get the correct value.
    This should be fixed in the C++ backend to return proper types.
    */
    $local.age1 = $local.age1_raw.raw().int();
    $local.age2 = $local.age2_raw.raw().int();
    
    ("User 1: " + $local.name1 + ", Age: " + $local.age1.str() + "\n").echo();
    ("User 2: " + $local.name2 + ", Age: " + $local.age2.str() + "\n").echo();
    
    $local.name1 == "John" && $local.age1 == 30 && $local.name2 == "Jane" && $local.age2 == 25;
};

/* Test: Teaching Recursion */
test_recursion = op() {
    "Starting test_recursion\n".echo();
    
    /* Simple factorial function */
    factorial = op(n) {
        if (n <= 1) {
            1;
        } else {
            n * factorial(n - 1);
        };
    };
    
    result = factorial(5);
    ("Factorial of 5: " + result.str() + "\n").echo();
    
    result == 120;  /* 5! = 120 */
};

/* Test: Function composition */
test_function_composition = op() {
    "Starting test_function_composition\n".echo();
    
    /* Create base functions */
    double = op(x) { x * 2; };
    add_one = op(x) { x + 1; };
    
    /* Compose functions */
    composed = op(x) { add_one(double(x)); };
    
    result = composed(5);
    ("Composed function result: " + result.str() + "\n").echo();
    
    result == 11;  /* (5 * 2) + 1 = 11 */
};

/* Test each function individually */
"Testing each function individually:\n".echo();
"\n".echo();

"Test 1: test_parallel_csv_processing\n".echo();
try {
    result1 = test_parallel_csv_processing();
    ("Result: " + result1.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 2: test_data_validation\n".echo();
try {
    result2 = test_data_validation();
    ("Result: " + result2.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 3: test_expression_parser\n".echo();
try {
    result3 = test_expression_parser();
    ("Result: " + result3.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 4: test_unlimited_precision\n".echo();
try {
    result4 = test_unlimited_precision();
    ("Result: " + result4.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 5: test_financial_calculations\n".echo();
try {
    result5 = test_financial_calculations();
    ("Result: " + result5.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 6: test_parallel_processing\n".echo();
try {
    result6 = test_parallel_processing();
    ("Result: " + result6.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 7: test_map_with_params\n".echo();
try {
    result7 = test_map_with_params();
    ("Result: " + result7.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 8: test_string_processing\n".echo();
try {
    result8 = test_string_processing();
    ("Result: " + result8.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 9: test_file_system\n".echo();
try {
    result9 = test_file_system();
    ("Result: " + result9.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 10: test_table_operations\n".echo();
try {
    result10 = test_table_operations();
    ("Result: " + result10.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 11: test_recursion\n".echo();
try {
    result11 = test_recursion();
    ("Result: " + result11.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"Test 12: test_function_composition\n".echo();
try {
    result12 = test_function_composition();
    ("Result: " + result12.str() + "\n").echo();
} catch (error) {
    ("Error: " + error.str() + "\n").echo();
}
"\n".echo();

"=== INDIVIDUAL TESTING COMPLETE ===".echo(); 