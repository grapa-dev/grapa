/* Test Suite for $sys Functions
   - Tests all documented $sys functions to verify understanding
   - Validates parameter types, return values, and error handling
   - Ensures documentation matches actual implementation
   - Status: Comprehensive test of $sys functionality
*/

"=== $SYS FUNCTIONS TEST SUITE ===\n".echo();
"Testing all documented $sys functions\n".echo();

/* ======================================== */
/* 1. Type Introspection Functions */
/* ======================================== */
"Test 1: Type Introspection\n".echo();

/* Test type() function */
test_int = $sys().type(5);
test_str = $sys().type("hello");
test_float = $sys().type(3.14);
test_array = $sys().type([1,2,3]);
test_bool = $sys().type(true);
test_null = $sys().type(null);

("$sys().type(5): " + test_int + " (expected: $INT)\n").echo();
("$sys().type('hello'): " + test_str + " (expected: $STR)\n").echo();
("$sys().type(3.14): " + test_float + " (expected: $FLOAT)\n").echo();
("$sys().type([1,2,3]): " + test_array + " (expected: $ARRAY)\n").echo();
("$sys().type(true): " + test_bool + " (expected: $BOOL)\n").echo();
("$sys().type(null): " + test_null + " (expected: null)\n").echo();

/* Test describe() function - should handle gracefully since not implemented */
test_describe = $sys().describe("test");
("$sys().describe('test'): " + test_describe + " (should handle gracefully)\n").echo();

"---\n".echo();

/* ======================================== */
/* 2. Environment Variable Functions */
/* ======================================== */
"Test 2: Environment Variables\n".echo();

/* Test getenv() with Grapa system variables */
version = $sys().getenv($VERSION);
home = $sys().getenv($HOME);
work = $sys().getenv($WORK);
name = $sys().getenv($NAME);
platform = $sys().getenv($PLATFORM);

("$sys().getenv($VERSION): " + version + "\n").echo();
("$sys().getenv($HOME): " + home + "\n").echo();
("$sys().getenv($WORK): " + work + "\n").echo();
("$sys().getenv($NAME): " + name + "\n").echo();
("$sys().getenv($PLATFORM): " + platform + "\n").echo();

/* Test getenv() with OS environment variables */
username = $sys().getenv("USERNAME");
path = $sys().getenv("PATH");

("$sys().getenv('USERNAME'): " + username + "\n").echo();
("$sys().getenv('PATH'): " + path + "\n").echo();

/* Test putenv() and getenv() together */
put_result = $sys().putenv("TEST_SYS_VAR", "test_value_123");
get_result = $sys().getenv("TEST_SYS_VAR");

("$sys().putenv('TEST_SYS_VAR', 'test_value_123'): " + put_result + " (expected: true)\n").echo();
("$sys().getenv('TEST_SYS_VAR'): " + get_result + " (expected: test_value_123)\n").echo();

/* Test putenv() with invalid parameters */
invalid_put = $sys().putenv(null, "value");
("$sys().putenv(null, 'value'): " + invalid_put + " (should handle gracefully)\n").echo();

"---\n".echo();

/* ======================================== */
/* 3. Script Compilation Functions */
/* ======================================== */
"Test 3: Script Compilation\n".echo();

/* Test compile() function */
simple_script = "result = 5 + 3; result";
compiled = $sys().compile(simple_script);
compiled_result = $sys().eval(compiled);

("$sys().compile('result = 5 + 3; result'): " + compiled.hex() + " (should be compiled object)\n").echo();
("Compiled script result: " + compiled_result.str() + " (expected: 8)\n").echo();

/* Test compile() with more complex script */
complex_script = "x = 10; y = 20; x * y + 5";
compiled_complex = $sys().compile(complex_script);
complex_result = $sys().eval(compiled_complex);

("Complex compiled script result: " + complex_result + " (expected: 205)\n").echo();

/* Test compile() with parameters - similar to notebook pattern */
param_script = "input * 2 + offset";
compiled_param = $sys().compile(param_script);
param_result = $sys().eval(compiled_param, {"input": 15, "offset": 5});

("Compiled script with parameters: " + param_result + " (expected: 35)\n").echo();

/* Test compile() pattern matching user's example */
user_example_compiled = op()("result = 5 + 3; result;");
user_example_result = user_example_compiled();
("User example pattern - op()('result = 5 + 3; result;')(): " + user_example_result + " (expected: 8)\n").echo();

/* Test compile() with invalid script */
invalid_script = "this is not valid grapa syntax";
invalid_compiled = $sys().compile(invalid_script);
if (invalid_compiled.type() == $ERR) {
    ("$sys().compile('invalid syntax'): Error - " + invalid_compiled.str() + "\n").echo();
} else {
    ("$sys().compile('invalid syntax'): " + invalid_compiled + " (should handle gracefully)\n").echo();
};

"---\n".echo();

/* ======================================== */
/* 4. Dynamic Evaluation Functions */
/* ======================================== */
"Test 4: Dynamic Evaluation\n".echo();

/* Test eval() with simple expression */
eval_result1 = $sys().eval("2 + 3");
("$sys().eval('2 + 3'): " + eval_result1 + " (expected: 5)\n").echo();

/* Test eval() with parameters */
eval_result2 = $sys().eval("x + y", {"x": 10, "y": 20});
("$sys().eval('x + y', {x: 10, y: 20}): " + eval_result2 + " (expected: 30)\n").echo();

/* Test eval() with complex expression and parameters */
eval_result3 = $sys().eval("result = input * 2 + offset; result", {"input": 15, "offset": 5});
("$sys().eval('result = input * 2 + offset; result', {input: 15, offset: 5}): " + eval_result3 + " (expected: 35)\n").echo();

/* Test eval() with starting rule - similar to notebook pattern */
eval_result4 = $sys().eval("a", {"a": 42}, "$function");
("$sys().eval('a', {a: 42}, '$function'): " + eval_result4 + " (expected: 42)\n").echo();

/* Test eval() with compiled script - direct pattern from notebook */
compiled_for_eval = $sys().compile("param1 + param2");
eval_compiled = $sys().eval(compiled_for_eval, {"param1": 7, "param2": 8});
("$sys().eval(compiled_script, {param1: 7, param2: 8}): " + eval_compiled + " (expected: 15)\n").echo();

/* Test eval() with string literal - simple pattern from notebook */
eval_string = $sys().eval("'hi';");
("$sys().eval('\\'hi\\';'): " + eval_string + " (expected: hi)\n").echo();

"---\n".echo();

/* ======================================== */
/* 5. System Timing Functions */
/* ======================================== */
"Test 5: System Timing\n".echo();

/* Test sleep() function */
start_time = $TIME().utc();
("Starting sleep test at: " + start_time + "\n").echo();

$sys().sleep(100);  /* Sleep for 100ms */

end_time = $TIME().utc();
elapsed_ms = ((end_time - start_time) / 1000000).int();

("End time: " + end_time + "\n").echo();
("Elapsed time: " + elapsed_ms + " ms (should be >= 100ms)\n").echo();

/* Test sleep() with different durations */
$sys().sleep(50);  /* 50ms */
("Slept for 50ms\n").echo();

$sys().sleep(25);  /* 25ms */
("Slept for 25ms\n").echo();

"---\n".echo();

/* ======================================== */
/* 6. Error Handling Tests */
/* ======================================== */
"Test 6: Error Handling\n".echo();

/* Test getenv() with non-existent variable */
non_existent = $sys().getenv("NON_EXISTENT_VARIABLE_12345");
("$sys().getenv('NON_EXISTENT_VARIABLE_12345'): " + non_existent + " (expected: null)\n").echo();

/* Test putenv() with invalid values */
invalid_put1 = $sys().putenv("", "value");
invalid_put2 = $sys().putenv("TEST_VAR", null);

("$sys().putenv('', 'value'): " + invalid_put1 + " (should handle gracefully)\n").echo();
("$sys().putenv('TEST_VAR', null): " + invalid_put2 + " (should handle gracefully)\n").echo();

/* Test eval() with invalid script */
invalid_eval = $sys().eval("this is not valid syntax");
if (invalid_eval.type() == $ERR) {
    ("$sys().eval('invalid syntax'): Caught error - " + invalid_eval.str() + "\n").echo();
} else {
    ("$sys().eval('invalid syntax'): " + invalid_eval + " (should handle gracefully)\n").echo();
};

/* Test compile() with empty script */
empty_compiled = $sys().compile("");
("$sys().compile(''): " + empty_compiled + " (should handle gracefully)\n").echo();

"---\n".echo();

/* ======================================== */
/* 7. Performance Tests */
/* ======================================== */
"Test 7: Performance Tests\n".echo();

/* Test type() performance */
type_start = $TIME().utc();
i = 0;
while (i < 1000) {
    $sys().type(i);
    i = i + 1;
};
type_end = $TIME().utc();
type_time = ((type_end - type_start) / 1000000).int();
("1000 type() calls took: " + type_time + " ms\n").echo();

/* Test eval() performance */
eval_start = $TIME().utc();
i = 0;
while (i < 100) {
    $sys().eval("x + 1", {"x": i});
    i = i + 1;
};
eval_end = $TIME().utc();
eval_time = ((eval_end - eval_start) / 1000000).int();
("100 eval() calls took: " + eval_time + " ms\n").echo();

/* Test compiled vs interpreted performance */
interpreted_start = $TIME().utc();
i = 0;
while (i < 50) {
    $sys().eval("x * 2 + 1", {"x": i});
    i = i + 1;
};
interpreted_end = $TIME().utc();
interpreted_time = ((interpreted_end - interpreted_start) / 1000000).int();

compiled_script = $sys().compile("x * 2 + 1");
compiled_start = $TIME().utc();
i = 0;
while (i < 50) {
    $sys().eval(compiled_script, {"x": i});
    i = i + 1;
};
compiled_end = $TIME().utc();
compiled_time = ((compiled_end - compiled_start) / 1000000).int();

("50 interpreted eval() calls: " + interpreted_time + " ms\n").echo();
("50 compiled eval() calls: " + compiled_time + " ms\n").echo();
("Compiled is " + (interpreted_time / compiled_time).int() + "x faster\n").echo();

"---\n".echo();

/* ======================================== */
/* 8. Integration Tests */
/* ======================================== */
"Test 8: Integration Tests\n".echo();

/* Test combining multiple $sys functions */
/* Create a script that uses environment variables */
env_script = "user = $sys().getenv('USERNAME'); 'Hello ' + user + '!'";
env_result = $sys().eval(env_script);
("Integration test - eval with getenv: " + env_result + "\n").echo();

/* Test type checking in eval */
type_check_script = "input_type = $sys().type(input); 'Input type: ' + input_type";
type_check_result = $sys().eval(type_check_script, {"input": [1,2,3]});
("Integration test - eval with type: " + type_check_result + "\n").echo();

/* Test compilation and evaluation workflow */
workflow_script = "result = 0; i = 0; while (i < count) { result = result + i; i = i + 1; }; result";
workflow_compiled = $sys().compile(workflow_script);
workflow_result = $sys().eval(workflow_compiled, {"count": 10});
("Integration test - workflow: " + workflow_result + " (expected: 45)\n").echo();

"---\n".echo();

/* ======================================== */
/* 9. Summary */
/* ======================================== */
"Test 9: Summary\n".echo();

"All $sys function tests completed!\n".echo();
"Functions tested:\n".echo();
"- type() - Type introspection\n".echo();
"- describe() - Object description (not implemented)\n".echo();
"- getenv() - Environment variable access\n".echo();
"- putenv() - Environment variable setting\n".echo();
"- compile() - Script compilation\n".echo();
"- eval() - Dynamic evaluation\n".echo();
"- sleep() - System timing\n".echo();

"Documentation verification: COMPLETE\n".echo();
"Implementation verification: COMPLETE\n".echo();

/* Test static library access - similar to notebook pattern */
static_lib = $sys().getenv($STATICLIB);
if (static_lib.type() != $ERR) {
    ("$sys().getenv($STATICLIB): Retrieved static library\n").echo();
    /* Test if we can access a specific file from the library */
    if (static_lib.type() == $ARRAY || static_lib.type() == $TABLE) {
        ("Static library contains " + static_lib.len() + " items\n").echo();
    };
} else {
    ("$sys().getenv($STATICLIB): Error - " + static_lib.str() + "\n").echo();
};

"---\n".echo();

"=== END OF $SYS FUNCTIONS TEST SUITE ===\n".echo(); 