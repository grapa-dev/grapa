/* Grapa Grep Edge Case Test Suite for Ripgrep Parity */

"=== GREP EDGE CASE TESTS ===\n".echo();

/* 1. Match at line boundaries */
"Test 1: Match at start/end of line\n".echo();
input = "foo\nbar\nbaz";
result = input.grep("^foo", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\"]\n").echo();
result = input.grep("baz$", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"baz\"]\n").echo();
"---\n".echo();

/* 2. Overlapping matches */
"Test 2: Overlapping matches\n".echo();
input = "ababa";
result = input.grep("aba", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"aba\"]\n").echo();
"---\n".echo();

/* 3. Zero-length matches */
"Test 3: Zero-length matches\n".echo();
input = "abc";
result = input.grep("^", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"\"]\n").echo();
result = input.grep("$", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"\"]\n").echo();
"---\n".echo();

/* 4. Multiline patterns */
"Test 4: Multiline patterns\n".echo();
input = "foo\nbar\nbaz";
result = input.grep("foo\nbar", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\\nbar\"]\n").echo();
"---\n".echo();

/* 5. Unicode edge cases */
"Test 5: Unicode edge cases\n".echo();
input = "e\u0301\nüòÄ\u2764\ufe0f";
result = input.grep("\u00e9", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"√©\"]\n").echo();
result = input.grep("\\X", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"√©\",\"\\n\",\"üòÄ\",\"‚ù§Ô∏è\"]\n").echo();
"---\n".echo();

/* 6. Null bytes in input */
"Test 6: Null bytes in input\n".echo();
input = "foo\0bar\0baz";
result = input.grep("foo", "oz");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\"]\n").echo();
"---\n".echo();

/* 7. Context window at file edges */
"Test 7: Context at file edges\n".echo();
input = "first\nsecond\nthird";
result = input.grep("first", "A2");
("Result: " + result.str() + "\n").echo();
("Expected: [\"first\n\", \"second\n\", \"third\"]\n").echo();
result = input.grep("third", "B2");
("Result: " + result.str() + "\n").echo();
("Expected: [\"first\n\", \"second\n\", \"third\"]\n").echo();
"---\n".echo();

/* 8. Color output with multiple matches per line */
"Test 8: Color output with multiple matches\n".echo();
input = "foo foo bar foo";
result = input.grep("foo", "oL");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\", \"foo\", \"foo\"] (all colorized)\n").echo();
"---\n".echo();

/* 9. Word boundary and non-word boundary */
"Test 9: Word boundary and non-word boundary\n".echo();
input = "foo,foo! foo? barfoo";
result = input.grep("foo", "ow");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\", \"foo\", \"foo\"]\n").echo();
result = input.grep("foo", "o");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\", \"foo\", \"foo\", \"foo\"]\n").echo();
"---\n".echo();

/* 10. Option precedence and combinations */
"Test 10: Option precedence\n".echo();
input = "foo bar foo";
result = input.grep("foo", "oT");
("Result: " + result.str() + "\n").echo();
("Expected: [\"1:foo\", \"9:foo\"]\n").echo();
result = input.grep("foo", "oL");
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\", \"foo\"] (colorized)\n").echo();
"---\n".echo();

/* 11. Invalid regex patterns */
"Test 11: Invalid regex\n".echo();
input = "foo";
result = input.grep("(", "o");
("Result: " + result.str() + "\n").echo();
("Expected: $ERR\n").echo();
"---\n".echo();

"=== END OF GREP EDGE CASE TESTS ===\n".echo(); 