/*
Grapa Grep Pathological Pattern Edge Cases
- Tests catastrophic backtracking, large alternations, deeply nested groups.
- Ensures production-readiness for mission-critical use and ripgrep parity.
- If any test causes a hang or crash, document and update implementation.
*/

'=== PATHOLOGICAL PATTERN EDGE CASES ===\n'.echo();

/* Test 1: Catastrophic backtracking */
'Catastrophic backtracking: (a+)+ on long input\n'.echo();
input1 = '';
i = 0;
while (i < 10000) { input1 = input1 + 'a'; i = i + 1; }
pattern1 = '(a+)+';
result1 = input1.grep(pattern1, 'o');
('Result length: ' + result1.len().str() + '\n').echo();
('Expected: Should not hang or crash; may be slow.\n').echo();
'---\n'.echo();

/* Test 2: Large alternation */
'Large alternation: a|b|c|...|z|aa|bb|cc|...|zz\n'.echo();
input2 = 'a b c d e f g h i j k l m n o p q r s t u v w x y z aa bb cc dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz';
pattern2 = 'a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|aa|bb|cc|dd|ee|ff|gg|hh|ii|jj|kk|ll|mm|nn|oo|pp|qq|rr|ss|tt|uu|vv|ww|xx|yy|zz';
result2 = input2.grep(pattern2, 'o');
('Result: ' + result2.str() + '\n').echo();
('Expected: All tokens matched; no crash.\n').echo();
'---\n'.echo();

/* Test 3: Deeply nested groups */
'Deeply nested groups: (((((((((a))))))))))\n'.echo();
input3 = 'a';
pattern3 = '((((((((((a))))))))))';
result3 = input3.grep(pattern3, 'o');
('Result: ' + result3.str() + '\n').echo();
('Expected: ["a"]\n').echo();
'---\n'.echo(); 