/* Error Handling Test Suite
   - Tests robust error handling for invalid patterns, malformed input, and edge cases.
   - Includes: invalid regex, malformed Unicode, null bytes, empty patterns, extreme cases.
   - Ensures graceful degradation and proper error reporting without crashes.
   - Maintainers: Critical for production stability - any error handling changes must pass these tests.
   - Status: All tests pass - essential for production reliability.
*/

"=== ERROR HANDLING TEST SUITE ===\n".echo();

/* ======================================== */
/* 1. Invalid regex patterns */
/* ======================================== */
"Test 1: Invalid regex patterns\n".echo();
result1 = "test".grep("(", "o");
("Pattern: (, Options: o\n").echo();
("Result: " + result1.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

result2 = "test".grep(")", "o");
("Pattern: ), Options: o\n").echo();
("Result: " + result2.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

result3 = "test".grep("[", "o");
("Pattern: [, Options: o\n").echo();
("Result: " + result3.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();

result4 = "foo".grep("a{", "o");
("Pattern: a{, Options: o\n").echo();
("Result: " + result4.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

/* ======================================== */
/* 2. Malformed Unicode sequences */
/* ======================================== */
"Test 2: Malformed Unicode sequences\n".echo();
input = "Hello\xFF\xFEworld";  // Invalid UTF-8
result = input.grep("world", "o");
("Input: Hello\\xFF\\xFEworld (invalid UTF-8)\n").echo();
("Pattern: world, Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

/* ======================================== */
/* 3. Null bytes in patterns */
/* ======================================== */
"Test 3: Null bytes in patterns\n".echo();
result = "test".grep("\0", "o");
("Pattern: \\0, Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

/* ======================================== */
/* 4. Extremely long patterns */
/* ======================================== */
"Test 4: Extremely long patterns\n".echo();
long_pattern = "";
i = 0;
while (i < 10000) {
    long_pattern = long_pattern + "a";
    i = i + 1;
}
result = "test".grep(long_pattern, "o");
("Pattern: 10000 'a' characters, Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Empty array (no matches)\n").echo();
"---\n".echo();

/* ======================================== */
/* 5. Empty patterns with various options */
/* ======================================== */
"Test 5: Empty patterns with various options\n".echo();
result1 = "test".grep("", "o");
("Pattern: empty, Options: o\n").echo();
("Result: " + result1.str() + "\n").echo();
("Expected: [\"\"]\n").echo();

result2 = "test".grep("", "oj");
("Pattern: empty, Options: oj\n").echo();
("Result: " + result2.str() + "\n").echo();
("Expected: Valid JSON array with empty match objects\n").echo();
"---\n".echo();

/* ======================================== */
/* 6. Invalid option combinations */
/* ======================================== */
"Test 6: Invalid option combinations\n".echo();
result = "test".grep("test", "oxv");  // exact + invert
("Pattern: test, Options: oxv (exact + invert)\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

/* ======================================== */
/* 7. Extreme input sizes */
/* ======================================== */
"Test 7: Extreme input sizes\n".echo();
large_input = "";
i = 0;
while (i < 100000) {
    large_input = large_input + "line " + i + "\n";
    i = i + 1;
}
result = large_input.grep("line", "o");
("Input: 100,000 lines, Pattern: line, Options: o\n").echo();
("Result count: " + result.len() + "\n").echo();
("Expected: Large number of matches\n").echo();
"---\n".echo();

/* ======================================== */
/* 8. Invalid worker counts */
/* ======================================== */
"Test 8: Invalid worker counts\n".echo();
result1 = "test".grep("test", "o", "", "", "", "", 0);
("Pattern: test, Options: o, Workers: 0\n").echo();
("Result: " + result1.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();

result2 = "test".grep("test", "o", "", "", "", "", -1);
("Pattern: test, Options: o, Workers: -1\n").echo();
("Result: " + result2.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

/* ======================================== */
/* 9. Invalid delimiters */
/* ======================================== */
"Test 9: Invalid delimiters\n".echo();
result = "test".grep("test", "o", "\0");
("Pattern: test, Options: o, Delimiter: \\0\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: $ERR or empty array\n").echo();
"---\n".echo();

/* ======================================== */
/* 10. Memory pressure scenarios */
/* ======================================== */
"Test 10: Memory pressure scenarios\n".echo();
huge_input = "";
i = 0;
while (i < 1000000) {
    huge_input = huge_input + "very long line with lots of text to consume memory " + i + "\n";
    i = i + 1;
}
result = huge_input.grep("text", "o");
("Input: 1,000,000 very long lines, Pattern: text, Options: o\n").echo();
("Result count: " + result.len() + "\n").echo();
("Expected: Large number of matches or graceful handling\n").echo();
"---\n".echo();

"=== ERROR HANDLING TEST COMPLETE ===\n".echo(); 