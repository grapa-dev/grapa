/* === COMPREHENSIVE TEST: FULL FUNCTIONALITY === */
/* Test all remaining grep functionality not covered in regression/integration */

"=== COMPREHENSIVE TEST: FULL FUNCTIONALITY ===\n".echo();
"Running comprehensive functionality tests...\n".echo();

/* ======================================== */
/* 1. Advanced Pattern Matching */
/* ======================================== */
"Test 1: Advanced pattern matching\n".echo();
"---\n".echo();

/* Test 1a: Lookaround assertions */
input = "Hello world\nHello universe\nGoodbye world";
pattern = "Hello(?=\\s+world)";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (positive lookahead)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 1b: Negative lookahead */
pattern = "Hello(?!\\s+universe)";
result = input.grep(pattern, options);
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (negative lookahead)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 1c: Lookbehind assertions */
input = "world Hello\nuniverse Hello\nworld Goodbye";
pattern = "(?<=world\\s+)Hello";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (positive lookbehind)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 1d: Unicode script properties */
input = "Hello 世界\nHello world\nHello こんにちは";
pattern = "\\p{Han}+";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"世界\"] (Han script)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 1e: Unicode grapheme clusters */
input = "café\ncafe\u0301\ncafé";
pattern = "café";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"café\", \"café\"] (grapheme cluster normalization)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 2. Complex Option Combinations */
/* ======================================== */
"Test 2: Complex option combinations\n".echo();
"---\n".echo();

/* Test 2a: Multiple options with custom delimiter */
input = "word1|||WORD2|||Word3|||word4|||";
pattern = "word";
options = "io";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"word1\", \"WORD2\", \"Word3\", \"word4\"]\n").echo();
("Status: " + (result.len() == 4 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 2b: Word boundaries with case-insensitive */
input = "foo bar FOOBAR barfoo";
pattern = "\\bfoo\\b";
options = "io";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\"] (word boundary with case-insensitive)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 2c: Exact match with custom delimiter */
input = "exact|||EXACT|||exact|||";
pattern = "exact";
options = "ix";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"exact\", \"exact\"] (exact match with case-insensitive)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 3. Multiline Pattern Handling */
/* ======================================== */
"Test 3: Multiline pattern handling\n".echo();
"---\n".echo();

/* Test 3a: Dot-all pattern with custom delimiter */
input = "line1\nline2\nline3";
pattern = "line1.*line3";
options = "s";
result = input.grep(pattern, options, "\n");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: \\n\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"line1\\nline2\\nline3\"] (dot-all across lines)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 3b: Multiline with lookaround */
input = "start\nmiddle\nend";
pattern = "(?<=start\\n).*(?=\\nend)";
options = "s";
result = input.grep(pattern, options, "\n");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: \\n\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"middle\"] (lookaround with multiline)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 4. Unicode Advanced Features */
/* ======================================== */
"Test 4: Unicode advanced features\n".echo();
"---\n".echo();

/* Test 4a: Unicode word boundaries with custom delimiter */
input = "café|||CAFÉ|||café|||";
pattern = "\\b\\w+\\b";
options = "io";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"café\", \"CAFÉ\", \"café\"] (Unicode word boundaries)\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 4b: Unicode script properties with custom delimiter */
input = "Hello|||世界|||Hello|||こんにちは|||";
pattern = "\\p{Han}+";
options = "o";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"世界\"] (Han script with custom delimiter)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 4c: Unicode grapheme clusters with custom delimiter */
input = "café|||cafe\u0301|||café|||";
pattern = "café";
options = "o";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"café\", \"café\"] (grapheme clusters with custom delimiter)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 5. Edge Cases and Error Handling */
/* ======================================== */
"Test 5: Edge cases and error handling\n".echo();
"---\n".echo();

/* Test 5a: Very long pattern */
long_pattern = "";
i = 0;
while (i < 1000) {
    long_pattern = long_pattern + "a";
    i = i + 1;
}
input = "test";
result = input.grep(long_pattern, "o");
("Input: " + input + "\n").echo();
("Pattern: 1000 'a' characters, Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [] (no matches for long pattern)\n").echo();
("Status: " + (result.len() == 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 5b: Very long input */
long_input = "";
i = 0;
while (i < 10000) {
    long_input = long_input + "line " + i + "\n";
    i = i + 1;
}
result = long_input.grep("line", "o");
("Input: 10000 lines, Pattern: line, Options: o\n").echo();
("Result count: " + result.len() + "\n").echo();
("Expected: 10000 matches\n").echo();
("Status: " + (result.len() == 10000 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 5c: Complex nested patterns */
input = "test";
pattern = "((((((((((a))))))))))";
result = input.grep(pattern, "o");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [] (complex nested groups)\n").echo();
("Status: " + (result.len() == 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 6. Performance and Stress Tests */
/* ======================================== */
"Test 6: Performance and stress tests\n".echo();
"---\n".echo();

/* Test 6a: Many small matches */
input = "a a a a a a a a a a";
pattern = "a";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result count: " + result.len() + "\n").echo();
("Expected: 10 matches\n").echo();
("Status: " + (result.len() == 10 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 6b: Alternation with many options */
input = "test";
pattern = "a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"t\", \"e\", \"s\", \"t\"]\n").echo();
("Status: " + (result.len() == 4 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 7. Special Pattern Features */
/* ======================================== */
"Test 7: Special pattern features\n".echo();
"---\n".echo();

/* Test 7a: Named capture groups */
input = "Hello world";
pattern = "(?<word>\\w+)";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"world\"] (named capture groups)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 7b: Atomic groups */
input = "Hello world";
pattern = "(?>\\w+)";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"world\"] (atomic groups)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 7c: Possessive quantifiers */
input = "Hello world";
pattern = "\\w++";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"world\"] (possessive quantifiers)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 8. Custom Delimiter Edge Cases */
/* ======================================== */
"Test 8: Custom delimiter edge cases\n".echo();
"---\n".echo();

/* Test 8a: Empty delimiter */
input = "Hello world";
pattern = "Hello";
options = "o";
result = input.grep(pattern, options, "");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: empty\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (empty delimiter)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 8b: Single character delimiter */
input = "a|b|c";
pattern = "a";
options = "o";
result = input.grep(pattern, options, "|");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"a\"] (single character delimiter)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 8c: Delimiter that appears in pattern */
input = "Hello|||world|||Hello|||";
pattern = "Hello|||";
options = "o";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello|||\", \"Hello|||\"] (delimiter in pattern)\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 9. Complex Integration Scenarios */
/* ======================================== */
"Test 9: Complex integration scenarios\n".echo();
"---\n".echo();

/* Test 9a: Multiple features combined */
input = "Hello 世界\nHELLO world\nhello こんにちは";
pattern = "\\b\\w+\\b";
options = "io";
result = input.grep(pattern, options, "\n");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: \\n\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Array of word matches (case-insensitive, word boundaries)\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 9b: Lookaround with custom delimiter */
input = "start|||middle|||end";
pattern = "(?<=start\\|\\|\\|).*(?=\\|\\|\\|end)";
options = "o";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"middle\"] (lookaround with custom delimiter)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 10. Final Validation */
/* ======================================== */
"Test 10: Final validation\n".echo();
"---\n".echo();

/* Test 10a: All basic options together */
input = "Hello world\nGoodbye world\nHello universe";
pattern = "Hello";
options = "ivn";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Goodbye world\"] (invert with line numbers)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 10b: Complex pattern with all features */
input = "Hello 世界\nHELLO world\nhello こんにちは";
pattern = "(?<=^)\\w+(?=\\s+\\p{Han}+)";
options = "io";
result = input.grep(pattern, options, "\n");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: \\n\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (complex pattern with lookaround and Unicode)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

"=== COMPREHENSIVE TEST COMPLETE ===\n".echo();
"Full functionality tests complete.\n".echo(); 