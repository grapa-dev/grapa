/* === INTEGRATION TEST: FEATURE INTERACTIONS === */
/* Test how different grep features work together */

/* Test 1: Basic option combinations */
"=== INTEGRATION TEST: FEATURE INTERACTIONS ===\n".echo();
"Running integration tests for feature interactions...\n".echo();

"Test 1: Basic option combinations\n".echo();
"---\n".echo();

/* Case-insensitive match-only */
input = "Hello WORLD\nhello world\nHELLO World";
pattern = "hello";
options = "io";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"hello\", \"HELLO\"]\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Invert with case-insensitive */
input = "Hello WORLD\nhello world\nHELLO World\nGoodbye";
pattern = "hello";
options = "iv";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Goodbye\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Match-only with word boundaries */
input = "foo bar foobar barfoo";
pattern = "foo";
options = "ow";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"foo\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 2: Advanced option combinations */
"Test 2: Advanced option combinations\n".echo();
"---\n".echo();

/* Case-insensitive exact match */
input = "Hello\nHello world\nHello";
pattern = "Hello";
options = "ix";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"Hello\"]\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Match-only with JSON output */
input = "Hello world\nGoodbye world";
pattern = "Hello";
options = "oj";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: JSON array with [\"Hello\"]\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* All mode with match-only (should return full input if matches) */
input = "Hello world\nGoodbye world";
pattern = "Hello";
options = "ao";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (match-only takes precedence)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 3: Complex patterns with options */
"Test 3: Complex patterns with options\n".echo();
"---\n".echo();

/* Unicode word boundaries with case-insensitive */
input = "café CAFÉ Café";
pattern = "\\b\\w+\\b";
options = "io";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Array of word matches\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Quantified patterns with match-only */
input = "aaa aaaa aaaaa";
pattern = "a{3,4}";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"aaa\", \"aaaa\", \"aaaa\"]\n").echo();
("Status: " + (result.len() >= 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Character classes with case-insensitive */
input = "Hello123 World456";
pattern = "[A-Za-z]+";
options = "io";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"World\"]\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 4: Custom delimiters with options */
"Test 4: Custom delimiters with options\n".echo();
"---\n".echo();

/* Custom delimiter with match-only */
input = "word1|||word2|||word3|||";
pattern = "word";
options = "o";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"word1\", \"word2\", \"word3\"]\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Custom delimiter with case-insensitive */
input = "Hello|||WORLD|||hello|||";
pattern = "hello";
options = "i";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello|||\", \"hello|||\"]\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Custom delimiter with match-only and case-insensitive */
input = "Hello|||WORLD|||hello|||";
pattern = "hello";
options = "io";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"hello\"]\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 5: Edge case interactions */
"Test 5: Edge case interactions\n".echo();
"---\n".echo();

/* Empty pattern with match-only */
input = "test";
pattern = "";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Empty input with match-only */
input = "";
pattern = "test";
options = "o";
result = input.grep(pattern, options);
("Input: empty, Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: []\n").echo();
("Status: " + (result.len() == 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Both empty with match-only */
input = "";
pattern = "";
options = "o";
result = input.grep(pattern, options);
("Input: empty, Pattern: empty, Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 6: Option precedence tests */
"Test 6: Option precedence tests\n".echo();
"---\n".echo();

/* Match-only should override all mode */
input = "Hello world\nGoodbye world";
pattern = "Hello";
options = "ao";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\"] (match-only takes precedence)\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Invert should work with match-only */
input = "Hello world\nGoodbye world";
pattern = "Hello";
options = "vo";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Goodbye\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 7: Performance with options */
"Test 7: Performance with options\n".echo();
"---\n".echo();

/* Large input with case-insensitive match-only */
large_input = "";
i = 0;
while (i < 100) {
    large_input = large_input + "Line " + i + "\n";
    i = i + 1;
}
pattern = "line";
options = "io";
result = large_input.grep(pattern, options);
("Input: 100 lines, Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result count: " + result.len() + "\n").echo();
("Expected: 100 matches\n").echo();
("Status: " + (result.len() == 100 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 8: Unicode interactions */
"Test 8: Unicode interactions\n".echo();
"---\n".echo();

/* Unicode with case-insensitive match-only */
input = "café CAFÉ Café";
pattern = "café";
options = "io";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"café\", \"CAFÉ\", \"Café\"]\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Unicode word boundaries with match-only */
input = "café world café";
pattern = "\\b\\w+\\b";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Array of word matches including café\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 9: Error handling with options */
"Test 9: Error handling with options\n".echo();
"---\n".echo();

/* Invalid regex with match-only */
input = "test";
pattern = "(";
options = "o";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [] or $ERR\n").echo();
("Status: " + (result.len() == 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Invalid regex with case-insensitive */
input = "test";
pattern = "a{";
options = "i";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [] or $ERR\n").echo();
("Status: " + (result.len() == 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 10: Complex integration scenarios */
"Test 10: Complex integration scenarios\n".echo();
"---\n".echo();

/* Multiple options with complex pattern */
input = "Hello123 World456\nHELLO789 world012\nhello345 WORLD678";
pattern = "[A-Za-z]+\\d+";
options = "io";
result = input.grep(pattern, options);
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + "\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Array of word+number matches\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Custom delimiter with complex pattern and options */
input = "word1|||WORD2|||Word3|||";
pattern = "\\b\\w+\\b";
options = "io";
result = input.grep(pattern, options, "|||");
("Input: " + input + "\n").echo();
("Pattern: " + pattern + ", Options: " + options + ", Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"word1\", \"WORD2\", \"Word3\"]\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

"=== INTEGRATION TEST COMPLETE ===\n".echo();
"Feature interaction tests complete.\n".echo(); 