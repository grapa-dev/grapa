/* Comprehensive Ripgrep Parity Test */
/* This test verifies full parity with ripgrep features */

"=== COMPREHENSIVE RIPGREP PARITY TEST ===\n".echo();

/* Test 1: Basic ripgrep options */
"Test 1: Basic ripgrep options\n".echo();
input = "Hello world\nGoodbye world\nHello universe";
("Input: " + input + "\n").echo();

/* Test 1a: Basic match */
result = input.grep("Hello", "");
("Basic match: " + result.str() + "\n").echo();

/* Test 1b: Case insensitive */
result = input.grep("hello", "i");
("Case insensitive: " + result.str() + "\n").echo();

/* Test 1c: Invert match */
result = input.grep("Hello", "v");
("Invert match: " + result.str() + "\n").echo();

/* Test 1d: Line numbers */
result = input.grep("Hello", "n");
("Line numbers: " + result.str() + "\n").echo();

/* Test 1e: Count only */
result = input.grep("Hello", "c");
("Count only: " + result.str() + "\n").echo();

/* Test 1f: Match only (Grapa unique) */
result = input.grep("Hello", "o");
("Match only: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 2: Context options */
"Test 2: Context options\n".echo();
input = "Header\nLine 1\nLine 2\nLine 3\nFooter";

/* Test 2a: After context */
result = input.grep("Line 2", "A1");
("After context (A1): " + result.str() + "\n").echo();

/* Test 2b: Before context */
result = input.grep("Line 2", "B1");
("Before context (B1): " + result.str() + "\n").echo();

/* Test 2c: Both context */
result = input.grep("Line 2", "C1");
("Both context (C1): " + result.str() + "\n").echo();

/* Test 2d: Combined context */
result = input.grep("Line 2", "A1B1");
("Combined context (A1B1): " + result.str() + "\n").echo();

"---\n".echo();

/* Test 3: Advanced ripgrep options */
"Test 3: Advanced ripgrep options\n".echo();
input = "foo bar baz\nbar foo baz\nbaz bar foo";

/* Test 3a: Word boundaries */
result = input.grep("foo", "w");
("Word boundaries: " + result.str() + "\n").echo();

/* Test 3b: Exact line match */
result = input.grep("^foo bar baz$", "x");
("Exact line match: " + result.str() + "\n").echo();

/* Test 3c: All mode */
result = input.grep("foo.*foo", "a");
("All mode: " + result.str() + "\n").echo();

/* Test 3d: Diacritic insensitive */
input = "café\ncafe\nCAFÉ";
result = input.grep("cafe", "d");
("Diacritic insensitive: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 4: Output formatting options */
"Test 4: Output formatting options\n".echo();
input = "Hello world\nGoodbye world";

/* Test 4a: JSON output */
result = input.grep("\\w+", "j");
("JSON output: " + result.str() + "\n").echo();

/* Test 4b: Color output */
result = input.grep("world", "L");
("Color output: " + result.str() + "\n").echo();

/* Test 4c: Column output */
result = input.grep("world", "T");
("Column output: " + result.str() + "\n").echo();

/* Test 4d: Byte offset */
result = input.grep("world", "b");
("Byte offset: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 5: Processing options */
"Test 5: Processing options\n".echo();
input = "foo\nfoo\nfoo\nbar\nbar";

/* Test 5a: Deduplication */
result = input.grep("foo", "u");
("Deduplication: " + result.str() + "\n").echo();

/* Test 5b: Grouping */
result = input.grep("foo", "g");
("Grouping: " + result.str() + "\n").echo();

/* Test 5c: Count with deduplication */
result = input.grep("foo", "cu");
("Count with deduplication: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 6: Unicode and normalization */
"Test 6: Unicode and normalization\n".echo();
input = "café\ncafe\u0301\nCAFÉ";

/* Test 6a: Unicode normalization */
result = input.grep("café", "N");
("Unicode normalization: " + result.str() + "\n").echo();

/* Test 6b: Case insensitive with normalization */
result = input.grep("café", "iN");
("Case insensitive with normalization: " + result.str() + "\n").echo();

/* Test 6c: Diacritic insensitive with normalization */
result = input.grep("cafe", "dN");
("Diacritic insensitive with normalization: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 7: Custom delimiters */
"Test 7: Custom delimiters\n".echo();
input = "Line 1|Line 2|Line 3";

/* Test 7a: Custom delimiter */
result = input.grep("Line 2", "", "|");
("Custom delimiter: " + result.str() + "\n").echo();

/* Test 7b: Custom delimiter with context */
result = input.grep("Line 2", "A1", "|");
("Custom delimiter with context: " + result.str() + "\n").echo();

/* Test 7c: Custom delimiter with match-only */
result = input.grep("Line", "o", "|");
("Custom delimiter with match-only: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 8: Parallel processing */
"Test 8: Parallel processing\n".echo();
input = "Line 1\nLine 2\nLine 3\nLine 4\nLine 5";

/* Test 8a: Sequential processing */
result = input.grep("Line", "", "", "", "", 1);
("Sequential processing: " + result.str() + "\n").echo();

/* Test 8b: Parallel processing */
result = input.grep("Line", "", "", "", "", 2);
("Parallel processing: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 9: Binary mode */
"Test 9: Binary mode\n".echo();
input = "Hello\x00World\nLine\x01with\x02control";

/* Test 9a: Binary mode */
result = input.grep("Hello", "", "", "", "BINARY");
("Binary mode: " + result.str() + "\n").echo();

/* Test 9b: Binary mode with null data */
result = input.grep("data", "z", "", "", "BINARY");
("Binary mode with null data: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 10: Edge cases and error handling */
"Test 10: Edge cases and error handling\n".echo();

/* Test 10a: Empty pattern */
result = input.grep("", "");
("Empty pattern: " + result.str() + "\n").echo();

/* Test 10b: Invalid regex */
result = input.grep("[", "");
("Invalid regex: " + result.str() + "\n").echo();

/* Test 10c: Zero-length matches */
result = input.grep("(?=foo)", "o");
("Zero-length matches: " + result.str() + "\n").echo();

/* Test 10d: Overlapping matches */
result = input.grep("aba", "o");
("Overlapping matches: " + result.str() + "\n").echo();

"---\n".echo();

/* Test 11: Grapa unique features */
"Test 11: Grapa unique features\n".echo();
input = "Hello world\nGoodbye world\nHello universe";

/* Test 11a: Match-only with context */
result = input.grep("Hello", "A1o");
("Match-only with context: " + result.str() + "\n").echo();

/* Test 11b: Match-only with JSON */
result = input.grep("\\w+", "oj");
("Match-only with JSON: " + result.str() + "\n").echo();

/* Test 11c: Match-only with line numbers */
result = input.grep("Hello", "on");
("Match-only with line numbers: " + result.str() + "\n").echo();

/* Test 11d: Match-only with color */
result = input.grep("world", "oL");
("Match-only with color: " + result.str() + "\n").echo();

"---\n".echo();

"=== RIPGREP PARITY SUMMARY ===\n".echo();
"All ripgrep features tested:\n".echo();
"- Basic options (i, v, n, c, l, o)\n".echo();
"- Context options (A, B, C, combinations)\n".echo();
"- Advanced options (w, x, a, d)\n".echo();
"- Output formatting (j, L, T, b)\n".echo();
"- Processing options (u, g)\n".echo();
"- Unicode and normalization (N)\n".echo();
"- Custom delimiters\n".echo();
"- Parallel processing\n".echo();
"- Binary mode\n".echo();
"- Edge cases and error handling\n".echo();
"- Grapa unique features\n".echo(); 