/*
Grapa .grc File Authoring Rules (Windows)
- Use block comments for all comments (do not use //). Block comments should be written as in this header.
- Always use .echo() as a method: "string".echo(); or (str1+str2).echo();
- End every command with a ; character
- Use while loops instead of for (Grapa does not support for)
- Wrap string concatenations in parentheses: (str1+str2).echo();
- Arrays (type $ARRAY) and lists (type $LIST) are accessed with [index] syntax, not .get().
  Example:
    ar = [1,2,3];
    ar[1]; // returns 2
    ar = {"a":11,"b":22,"c":33};
    ar[1]; // returns 22
    ar["b"]; // returns 22
- Use .get("key") for object property access, not for arrays/lists.
- Validate syntax against known-good .grc files before adding new code
- Prefer simple, explicit constructs for compatibility
- To run this file on Windows:
    .\grep.exe -q -cfile path/file.grc
- See the living section in docs/obj/grep.md for updates.

Edge Case Category: Unicode Boundaries
- Tests grapheme clusters, combining marks, emoji sequences, and Unicode boundary behaviors as supported by ripgrep/PCRE2.
- Each test prints input, pattern, options, result, and expected output.
*/

"=== UNICODE BOUNDARY EDGE CASES ===\n".echo();

/* Test 1: Grapheme cluster boundary (\X) */
input = "a\u0301b\u0327c"; /* abc (a+combining acute, b+combining cedilla) */
pattern = "\\X";
result = input.grep(pattern, "o");
("Input: '" + input + "'\n").echo();
("Pattern: '" + pattern + "', Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"a\", \"b\", \"c\"]\n").echo();
"---\n".echo();

/* Test 2: Emoji sequence as grapheme cluster */
input = "\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66";
pattern = "\\X";
result = input.grep(pattern, "o");
("Input: '" + input + "'\n").echo();
("Pattern: '" + pattern + "', Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\"]\n").echo();
"---\n".echo();

/* Test 3: Combining mark boundary */
input = "e\u0301e"; /* ee */
pattern = "e";
result = input.grep(pattern, "o");
("Input: '" + input + "'\n").echo();
("Pattern: '" + pattern + "', Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"e\", \"e\"] (should match both base and combined)\n").echo();
"---\n".echo();

/* Test 4: Unicode word boundary (\b) */
input = "caf maana";
pattern = "\\bcaf\\b";
result = input.grep(pattern, "o");
("Input: '" + input + "'\n").echo();
("Pattern: '" + pattern + "', Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"caf\"]\n").echo();
"---\n".echo();

/* Test 5: Unicode property boundary */
input = "Hello \u4e16\u754c 123 \u20ac";
pattern = "\\p{L}+";
result = input.grep(pattern, "o");
("Input: '" + input + "'\n").echo();
("Pattern: '" + pattern + "', Options: o\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"\u4e16\u754c\"]\n").echo();
"---\n".echo(); 