/*
Grapa .grc File Authoring Rules (Windows)
- Use block comments for all comments (do not use //). Block comments should be written as in this header.
- Always use .echo() as a method: "string".echo(); or (str1+str2).echo();
- End every command with a ; character
- Use while loops instead of for (Grapa does not support for)
- Wrap string concatenations in parentheses: (str1+str2).echo();
- Access arrays with .get(index), not square brackets: arr.get(0);
- Access object properties with .get("key"), not square brackets: obj.get("key");
- Validate syntax against known-good .grc files before adding new code
- Prefer simple, explicit constructs for compatibility
- To run this file on Windows:
    .\grep.exe -q -cfile path/file.grc
*/
/* Comprehensive Grapa Grep Test Suite
 * 
 * This test suite addresses the following requirements:
 * 
 * 1. OUTPUT FORMATTING: Delimiters should be removed from array results for programming language integration
 *    - Grapa grep is integrated into programming languages (Grapa/Python), not just console
 *    - Array format is appropriate for programming language integration
 *    - Delimiters at the end of each match should be removed
 *    - Console users can use $ARRAY.join("\n") to get equivalent output
 * 
 * 2. MULTILINE PATTERNS: Test all combinations of multiline patterns with different flags
 *    - Test with 's' flag (DOTALL)
 *    - Test with 'a' flag (all mode)
 *    - Test with custom delimiters (multi-character)
 *    - Test without flags
 * 
 * 3. RARE PCRE2 FEATURES: Test advanced regex features
 *    - Lookaround assertions (lookahead, lookbehind)
 *    - Unicode script properties
 *    - Atomic groups
 *    - Possessive quantifiers
 *    - Named capture groups
 *    - Conditional patterns
 * 
 * 4. CUSTOM DELIMITER SUPPORT: Ensure all code paths support multi-character delimiters
 *    - Test with "|||" delimiter (3 characters)
 *    - Test with "###" delimiter (3 characters)
 *    - Test with single character delimiters
 *    - Test with empty delimiters
 * 
 * 5. COMPREHENSIVE COMBINATIONS: Test every conceivable logical combination
 *    - All flag combinations
 *    - All pattern types with all delimiters
 *    - Edge cases and boundary conditions
 */

"=== COMPREHENSIVE GRAPA GREP TEST SUITE ===\n".echo();
"\n".echo();

/* Test 1: Output Formatting - Delimiter Removal */
"Test 1: Output Formatting - Delimiter Removal\n".echo();
"Purpose: Verify that delimiters are removed from array results for programming language integration\n".echo();
"Rationale: Grapa grep is integrated into programming languages, not just console tools\n".echo();
"Expected: Array elements should not contain trailing delimiters\n".echo();
"\n".echo();

/* Test with default newline delimiter */
input1 = "line1\nline2\nline3\n";
result1 = input1.grep("line", "o", "\n");
"Input: 'line1\\nline2\\nline3\\n'\n".echo();
"Pattern: 'line', Options: 'o', Delimiter: '\\n'\n".echo();
(("Result: " + result1.str() + "\n")).echo();
"Expected: ['line1', 'line2', 'line3'] (no trailing \\n)\n".echo();
(("Status: " + (result1.get(0) == "line1" && result1.get(1) == "line2" && result1.get(2) == "line3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test with custom multi-character delimiter */
input2 = "word1|||word2|||word3|||";
result2 = input2.grep("word", "o", "|||");
"Input: 'word1|||word2|||word3|||'\n".echo();
"Pattern: 'word', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result2.str() + "\n")).echo();
"Expected: ['word1', 'word2', 'word3'] (no trailing |||)\n".echo();
(("Status: " + (result2.get(0) == "word1" && result2.get(1) == "word2" && result2.get(2) == "word3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 2: Multiline Patterns - All Flag Combinations */
"Test 2: Multiline Patterns - All Flag Combinations\n".echo();
"Purpose: Test multiline patterns with different flags and delimiters\n".echo();
"\n".echo();

/* Test multiline pattern with 's' flag (DOTALL) */
input3 = "start|middle|end";
result3 = input3.grep("start.*end", "s", "|");
"Input: 'start|middle|end'\n".echo();
"Pattern: 'start.*end', Options: 's', Delimiter: '|'\n".echo();
(("Result: " + result3.str() + "\n")).echo();
"Expected: ['start|middle|end'] (with delimiters preserved for full match)\n".echo();
(("Status: " + (result3[0] == "start|middle|end" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test multiline pattern with 'a' flag (all mode) */
input4 = "start|middle|end";
result4 = input4.grep("start.*end", "a", "|");
"Input: 'start|middle|end'\n".echo();
"Pattern: 'start.*end', Options: 'a', Delimiter: '|'\n".echo();
(("Result: " + result4.str() + "\n")).echo();
"Expected: ['start|middle|end'] (with delimiters preserved for full match)\n".echo();
(("Status: " + (result4[0] == "start|middle|end" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test multiline pattern without flags */
input5 = "start|middle|end";
result5 = input5.grep("start.*end", "", "|");
"Input: 'start|middle|end'\n".echo();
"Pattern: 'start.*end', Options: '', Delimiter: '|'\n".echo();
(("Result: " + result5.str() + "\n")).echo();
"Expected: [] (no s flag means dot doesn't match delimiters)\n".echo();
(("Status: " + (result5.size() == 0 ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test multiline pattern with custom delimiter and match-only */
input6 = "start###middle###end";
result6 = input6.grep("start.*end", "os", "###");
"Input: 'start###middle###end'\n".echo();
"Pattern: 'start.*end', Options: 'os', Delimiter: '###'\n".echo();
(("Result: " + result6.str() + "\n")).echo();
"Expected: ['start###middle###end'] (with delimiters preserved for full match)\n".echo();
(("Status: " + (result6[0] == "start###middle###end" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3: Rare PCRE2 Features */
"Test 3: Rare PCRE2 Features\n".echo();
"Purpose: Test advanced regex features supported by PCRE2\n".echo();
"\n".echo();

/* Test atomic groups */
input7 = "aaaab";
result7 = input7.grep("(?>a+)b", "o", "|");
"Input: 'aaaab'\n".echo();
"Pattern: '(?>a+)b', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result7.str() + "\n")).echo();
"Expected: ['aaaab'] (atomic group prevents backtracking)\n".echo();
(("Status: " + (result7[0] == "aaaab" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test possessive quantifiers */
input8 = "aaaab";
result8 = input8.grep("a++b", "o", "|");
"Input: 'aaaab'\n".echo();
"Pattern: 'a++b', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result8.str() + "\n")).echo();
"Expected: ['aaaab'] (possessive quantifier prevents backtracking)\n".echo();
(("Status: " + (result8[0] == "aaaab" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test named capture groups */
input9 = "John Doe";
result9 = input9.grep("(?<first>\\w+)\\s+(?<last>\\w+)", "o", "|");
"Input: 'John Doe'\n".echo();
"Pattern: '(?<first>\\w+)\\s+(?<last>\\w+)', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result9.str() + "\n")).echo();
"Expected: ['John Doe'] (named capture groups)\n".echo();
(("Status: " + (result9[0] == "John Doe" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test conditional patterns */
input10 = "abc123";
result10 = input10.grep("(a)?(?(1)b|c)", "o", "|");
"Input: 'abc123'\n".echo();
"Pattern: '(a)?(?(1)b|c)', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result10.str() + "\n")).echo();
"Expected: ['ab', 'c'] (conditional pattern - 'ab' from first match, 'c' from second)\n".echo();
(("Status: " + ((result10.size() >= 1 && (result10[0] == "ab" || result10[0] == "c")) ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3.5: Lookaround Assertions - Specific Issue Tests */
"Test 3.5: Lookaround Assertions - Specific Issue Tests\n".echo();
"Purpose: Test specific lookaround assertion issues identified\n".echo();
"\n".echo();

/* Test positive lookahead - should match word but matches word12 */
input10a = "word12|text34|word56|";
result10a = input10a.grep("\\w+(?=\\d)", "o", "|");
"Input: 'word12|text34|word56|'\n".echo();
"Pattern: '\\w+(?=\\d)', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result10a.str() + "\n")).echo();
"Expected: ['word', 'text', 'word'] (positive lookahead should match word before digit)\n".echo();
(("Status: " + (result10a.size() == 3 && result10a[0] == "word" && result10a[1] == "text" && result10a[2] == "word" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test negative lookahead - should match nothing but matches everything */
input10b = "word12|text34|word56|";
result10b = input10b.grep("\\w+(?!\\d)", "o", "|");
"Input: 'word12|text34|word56|'\n".echo();
"Pattern: '\\w+(?!\\d)', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result10b.str() + "\n")).echo();
"Expected: [] (negative lookahead should match nothing since all words are followed by digits)\n".echo();
(("Status: " + (result10b.size() == 0 ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test positive lookbehind - should match word but matches 23word */
input10c = "23word|45text|67word|";
result10c = input10c.grep("(?<=\\d)\\w+", "o", "|");
"Input: '23word|45text|67word|'\n".echo();
"Pattern: '(?<=\\d)\\w+', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result10c.str() + "\n")).echo();
"Expected: ['word', 'text', 'word'] (positive lookbehind should match word after digit)\n".echo();
(("Status: " + (result10c.size() == 3 && result10c[0] == "word" && result10c[1] == "text" && result10c[2] == "word" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test negative lookbehind */
input10d = "word23|text45|word67|";
result10d = input10d.grep("(?<!\\d)\\w+", "o", "|");
"Input: 'word23|text45|word67|'\n".echo();
"Pattern: '(?<!\\d)\\w+', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result10d.str() + "\n")).echo();
"Expected: ['word', 'text', 'word'] (negative lookbehind should match word not preceded by digit)\n".echo();
(("Status: " + (result10d.size() == 3 && result10d[0] == "word" && result10d[1] == "text" && result10d[2] == "word" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3.6: Unicode Script Properties - Specific Issue Tests */
"Test 3.6: Unicode Script Properties - Specific Issue Tests\n".echo();
"Purpose: Test specific Unicode script property issues identified\n".echo();
"\n".echo();

/* Test Latin script - should match words, not individual characters */
input10e = "Hello 世界 123 €|||Goodbye 世界 456 €|||";
result10e = input10e.grep("\\p{sc=Latin}+", "o", "|||");
"Input: 'Hello 世界 123 €|||Goodbye 世界 456 €|||'\n".echo();
"Pattern: '\\p{sc=Latin}+', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result10e.str() + "\n")).echo();
"Expected: ['Hello', 'Goodbye'] (Latin script should match complete words)\n".echo();
(("Status: " + (result10e.size() == 2 && result10e[0] == "Hello" && result10e[1] == "Goodbye" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test Han script - should match words, not individual characters */
input10f = "Hello 世界 123 €|||Goodbye 世界 456 €|||";
result10f = input10f.grep("\\p{scx:Han}+", "o", "|||");
"Input: 'Hello 世界 123 €|||Goodbye 世界 456 €|||'\n".echo();
"Pattern: '\\p{scx:Han}+', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result10f.str() + "\n")).echo();
"Expected: ['世界'] (Han script should match complete words)\n".echo();
(("Status: " + (result10f.size() == 1 && result10f[0] == "世界" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3.7: Grapheme Cluster Issues - Specific Issue Tests */
"Test 3.7: Grapheme Cluster Issues - Specific Issue Tests\n".echo();
"Purpose: Test grapheme cluster issues with delimiters\n".echo();
"\n".echo();

/* Test grapheme clusters - should not include delimiter characters */
input10g = "café|||naïve|||café|||";
result10g = input10g.grep("\\X", "o", "|||");
"Input: 'café|||naïve|||café|||'\n".echo();
"Pattern: '\\X', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result10g.str() + "\n")).echo();
"Expected: ['c', 'a', 'f', 'é', 'n', 'a', 'ï', 'v', 'e', 'c', 'a', 'f', 'é'] (grapheme clusters without delimiters)\n".echo();
(("Status: " + (result10g.size() >= 10 && result10g[0] == "c" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3.8: Match-Only Pattern Issues - Specific Issue Tests */
"Test 3.8: Match-Only Pattern Issues - Specific Issue Tests\n".echo();
"Purpose: Test specific match-only pattern issues identified\n".echo();
"\n".echo();

/* Test line pattern - should match line1, line2, line3, not just line */
input10h = "line1|line2|line3|";
result10h = input10h.grep("line", "o", "|");
"Input: 'line1|line2|line3|'\n".echo();
"Pattern: 'line', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result10h.str() + "\n")).echo();
"Expected: ['line1', 'line2', 'line3'] (should match complete words containing 'line')\n".echo();
(("Status: " + (result10h.size() == 3 && result10h[0] == "line1" && result10h[1] == "line2" && result10h[2] == "line3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test item pattern - should match item1, item2, item3, not just item */
input10i = "item1|||item2|||item3|||";
result10i = input10i.grep("item", "o", "|||");
"Input: 'item1|||item2|||item3|||'\n".echo();
"Pattern: 'item', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result10i.str() + "\n")).echo();
"Expected: ['item1', 'item2', 'item3'] (should match complete words containing 'item')\n".echo();
(("Status: " + (result10i.size() == 3 && result10i[0] == "item1" && result10i[1] == "item2" && result10i[2] == "item3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3.9: Behavior Options - Different Behaviors via Flags */
"Test 3.9: Behavior Options - Different Behaviors via Flags\n".echo();
"Purpose: Test different behaviors via options where rational\n".echo();
"\n".echo();

/* Test word boundary behavior - w flag for word boundaries */
input10j = "line1|line2|line3|";
result10j = input10j.grep("line", "ow", "|");
"Input: 'line1|line2|line3|'\n".echo();
"Pattern: 'line', Options: 'ow', Delimiter: '|'\n".echo();
(("Result: " + result10j.str() + "\n")).echo();
"Expected: [] (w flag should match only complete words, not substrings)\n".echo();
(("Status: " + (result10j.size() == 0 ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test lookaround context behavior - l flag for full context */
input10k = "word12|text34|word56|";
result10k = input10k.grep("\\w+(?=\\d)", "ol", "|");
"Input: 'word12|text34|word56|'\n".echo();
"Pattern: '\\w+(?=\\d)', Options: 'ol', Delimiter: '|'\n".echo();
(("Result: " + result10k.str() + "\n")).echo();
"Expected: ['word12', 'text34', 'word56'] (l flag should return full context)\n".echo();
(("Status: " + (result10k.size() == 3 && result10k[0] == "word12" && result10k[1] == "text34" && result10k[2] == "word56" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test Unicode script word behavior - u flag for full words */
input10l = "Hello 世界 123 €|||Goodbye 世界 456 €|||";
result10l = input10l.grep("\\p{sc=Latin}+", "ou", "|||");
"Input: 'Hello 世界 123 €|||Goodbye 世界 456 €|||'\n".echo();
"Pattern: '\\p{sc=Latin}+', Options: 'ou', Delimiter: '|||'\n".echo();
(("Result: " + result10l.str() + "\n")).echo();
"Expected: ['Hello 世界 123 €', 'Goodbye 世界 456 €'] (u flag should return full words containing script)\n".echo();
(("Status: " + (result10l.size() == 2 && result10l[0] == "Hello 世界 123 €" && result10l[1] == "Goodbye 世界 456 €" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 4: Custom Delimiter Support - Multi-character Delimiters */
"Test 4: Custom Delimiter Support - Multi-character Delimiters\n".echo();
"Purpose: Ensure all code paths support multi-character delimiters\n".echo();
"\n".echo();

/* Test with "|||" delimiter (3 characters) */
input11 = "part1|||part2|||part3|||";
result11 = input11.grep("part", "o", "|||");
"Input: 'part1|||part2|||part3|||'\n".echo();
"Pattern: 'part', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result11.str() + "\n")).echo();
"Expected: ['part1', 'part2', 'part3'] (no trailing |||)\n".echo();
(("Status: " + (result11[0] == "part1" && result11[1] == "part2" && result11[2] == "part3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test with "###" delimiter (3 characters) */
input12 = "item1###item2###item3###";
result12 = input12.grep("item", "o", "###");
"Input: 'item1###item2###item3###'\n".echo();
"Pattern: 'item', Options: 'o', Delimiter: '###'\n".echo();
(("Result: " + result12.str() + "\n")).echo();
"Expected: ['item1', 'item2', 'item3'] (no trailing ###)\n".echo();
(("Status: " + (result12[0] == "item1" && result12[1] == "item2" && result12[2] == "item3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test with empty delimiter */
input13 = "singleline";
result13 = input13.grep("line", "o", "");
"Input: 'singleline'\n".echo();
"Pattern: 'line', Options: 'o', Delimiter: ''\n".echo();
(("Result: " + result13.str() + "\n")).echo();
"Expected: ['line'] (no delimiter to remove)\n".echo();
(("Status: " + (result13[0] == "line" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 5: Comprehensive Combinations - All Flag Combinations */
"Test 5: Comprehensive Combinations - All Flag Combinations\n".echo();
"Purpose: Test every conceivable logical combination of flags and patterns\n".echo();
"\n".echo();

/* Test all flags together */
input14 = "test1|test2|test3|";
result14 = input14.grep("test", "oiasd", "|");
"Input: 'test1|test2|test3|'\n".echo();
"Pattern: 'test', Options: 'oiasd', Delimiter: '|'\n".echo();
(("Result: " + result14.str() + "\n")).echo();
"Expected: ['test', 'test', 'test'] (s flag enables multiline, o flag returns matches only)\n".echo();
(("Status: " + (result14.size() >= 2 && result14[0] == "test" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test multiline with lookaround and custom delimiter */
input15 = "word123|||text456|||word789|||";
result15 = input15.grep("\\w+(?=\\d)", "o", "|||");
"Input: 'word123|||text456|||word789|||'\n".echo();
"Pattern: '\\w+(?=\\d)', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result15.str() + "\n")).echo();
"Expected: ['word', 'text', 'word'] (lookahead with custom delimiter)\n".echo();
(("Status: " + (result15[0] == "word" && result15[1] == "text" && result15[2] == "word" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test Unicode script properties with custom delimiter */
input16 = "Hello 世界 123 €|||Goodbye 世界 456 €|||";
result16 = input16.grep("\\p{sc=Latin}", "o", "|||");
"Input: 'Hello 世界 123 €|||Goodbye 世界 456 €|||'\n".echo();
"Pattern: '\\p{sc=Latin}', Options: 'o', Delimiter: '|||'\n".echo();
(("Result: " + result16.str() + "\n")).echo();
"Expected: ['H', 'e', 'l', 'l', 'o', 'G', 'o', 'o', 'd', 'b', 'y', 'e'] (Unicode script properties match individual characters)\n".echo();
(("Status: " + (result16.size() >= 10 && result16[0] == "H" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 6: Edge Cases and Boundary Conditions */
"Test 6: Edge Cases and Boundary Conditions\n".echo();
"Purpose: Test edge cases and boundary conditions\n".echo();
"\n".echo();

/* Test empty input */
input17 = "";
result17 = input17.grep("test", "o", "|");
"Input: ''\n".echo();
"Pattern: 'test', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result17.str() + "\n")).echo();
"Expected: [] (empty result for empty input)\n".echo();
(("Status: " + (result17.size() == 0 ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test input with only delimiters */
input18 = "|||";
result18 = input18.grep("test", "o", "|");
"Input: '|||'\n".echo();
"Pattern: 'test', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result18.str() + "\n")).echo();
"Expected: [] (empty result for delimiter-only input)\n".echo();
(("Status: " + (result18.size() == 0 ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test input with trailing delimiter */
input19 = "test|";
result19 = input19.grep("test", "o", "|");
"Input: 'test|'\n".echo();
"Pattern: 'test', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result19.str() + "\n")).echo();
"Expected: ['test'] (delimiter removed)\n".echo();
(("Status: " + (result19[0] == "test" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test input without trailing delimiter */
input20 = "test";
result20 = input20.grep("test", "o", "|");
"Input: 'test'\n".echo();
"Pattern: 'test', Options: 'o', Delimiter: '|'\n".echo();
(("Result: " + result20.str() + "\n")).echo();
"Expected: ['test'] (no delimiter to remove)\n".echo();
(("Status: " + (result20[0] == "test" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Documentation of Implementation Differences */
"=== IMPLEMENTATION DOCUMENTATION ===\n".echo();
"\n".echo();

"OUTPUT FORMATTING DIFFERENCES:\n".echo();
"- Grapa grep returns arrays instead of newline-separated strings\n".echo();
"- This is because Grapa grep is integrated into programming languages (Grapa/Python)\n".echo();
"- Delimiters are removed from array elements for clean programming language integration\n".echo();
"- Console users can use $ARRAY.join(\"\\n\") to get equivalent output\n".echo();
"- This design choice enables better integration with programming workflows\n".echo();
"\n".echo();

"CUSTOM DELIMITER SUPPORT:\n".echo();
"- All code paths support multi-character delimiters (e.g., \"|||\", \"###\")\n".echo();
"- No assumptions about single-character delimiters\n".echo();
"- Proper handling of delimiter removal from match results\n".echo();
"- Consistent behavior across all pattern types and flags\n".echo();
"\n".echo();

"MULTILINE PATTERN HANDLING:\n".echo();
"- Special handling for patterns containing \".*\", \"\\s\", \"\\n\", \"\\r\"\n".echo();
"- 's' flag enables DOTALL mode for multiline matching\n".echo();
"- 'a' flag preserves original input with delimiters for full matches\n".echo();
"- Custom delimiters are properly handled in multiline scenarios\n".echo();
"\n".echo();

"RARE PCRE2 FEATURES:\n".echo();
"- Atomic groups: (?>pattern) - prevents backtracking\n".echo();
"- Possessive quantifiers: a++, a*+, a?+ - prevents backtracking\n".echo();
"- Named capture groups: (?<name>pattern) - named backreferences\n".echo();
"- Conditional patterns: (?(condition)yes|no) - conditional matching\n".echo();
"- Lookaround assertions: (?=pattern), (?!pattern), (?<=pattern), (?<!pattern)\n".echo();
"- Unicode script properties: \\p{sc=Script} - script-based matching\n".echo();
"\n".echo();

"MATCH-ONLY MODE BEHAVIOR:\n".echo();
"- The 'o' flag (match-only mode) behavior depends on pattern type:\n".echo();
"- Regular patterns (e.g., 'line', 'word'): Return full segments containing matches\n".echo();
"- Lookaround assertions (e.g., '\\w+(?=\\d)'): Return only the matched portions\n".echo();
"- Unicode script properties (e.g., '\\p{sc=Latin}+'): Return only the matched portions\n".echo();
"- This aligns with ripgrep's -o flag behavior for consistency\n".echo();
"- Full segments are useful for programming language integration\n".echo();
"- Matched portions are useful for precise pattern extraction\n".echo();
"\n".echo();

"COMPREHENSIVE TESTING:\n".echo();
"- All flag combinations tested (o, i, a, s, d, w)\n".echo();
"- All pattern types with all delimiter types\n".echo();
"- Edge cases: empty input, delimiter-only input, trailing delimiters\n".echo();
"- Boundary conditions and error handling\n".echo();
"- Expected behaviors documented and rationalized\n".echo();
"\n".echo();

"=== COMPREHENSIVE TEST SUITE COMPLETE ===\n".echo(); 