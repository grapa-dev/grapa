/* Comprehensive Data Types and Access Patterns Test
   - Tests all data types: $ARRAY, $LIST, $OBJ
   - Tests all access patterns: bracket notation, dot notation, methods
   - Tests all instantiation methods: [], {}, and object creation
   - Provides clear examples for documentation
   - Identifies correct vs. incorrect usage patterns
*/

"=== GRAPA DATA TYPES AND ACCESS PATTERNS TEST ===\n".echo();

/* ======================================== */
/* 1. ARRAY INSTANTIATION AND ACCESS */
/* ======================================== */
"Test 1: Array Instantiation and Access\n".echo();
"Creating arrays with [] syntax:\n".echo();

arr1 = [1, 2, 3, 4, 5];
arr2 = ["a", "b", "c"];
arr3 = [1, "mixed", true, 3.14];

("arr1 type: " + arr1.type() + "\n").echo();
("arr2 type: " + arr2.type() + "\n").echo();
("arr3 type: " + arr3.type() + "\n").echo();

"Array access patterns:\n".echo();
("arr1[0]: " + arr1[0] + "\n").echo();
("arr1[2]: " + arr1[2] + "\n").echo();
("arr2[1]: " + arr2[1] + "\n").echo();

"Array methods:\n".echo();
("arr1.len(): " + arr1.len() + "\n").echo();
("arr1.size(): " + arr1.size() + "\n").echo();

"Array iteration:\n".echo();
i = 0;
while (i < arr1.len()) {
    ("  arr1[" + i.str() + "] = " + arr1[i] + "\n").echo();
    i += 1;
}

"---\n".echo();

/* ======================================== */
/* 2. LIST INSTANTIATION AND ACCESS */
/* ======================================== */
"Test 2: List Instantiation and Access\n".echo();
"Creating lists with {} syntax:\n".echo();

list1 = {"key1": "value1", "key2": "value2", "key3": "value3"};
list2 = {"numbers": [1, 2, 3], "strings": ["a", "b", "c"]};
list3 = {"nested": {"inner": "value"}};

("list1 type: " + list1.type() + "\n").echo();
("list2 type: " + list2.type() + "\n").echo();
("list3 type: " + list3.type() + "\n").echo();

"List access patterns:\n".echo();
("list1[\"key1\"]: " + list1["key1"] + "\n").echo();
("list1.key1: " + list1.key1 + "\n").echo();
("list2[\"numbers\"]: " + list2["numbers"] + "\n").echo();

"List methods:\n".echo();
("list1.keys(): " + list1.keys() + "\n").echo();
("list1.get(\"key1\"): " + list1.get("key1") + "\n").echo();
("list1.len(): " + list1.len() + "\n").echo();

"List iteration:\n".echo();
keys = list1.keys();
i = 0;
while (i < keys.len()) {
    key = keys[i];
    value = list1[key];
    ("  list1[\"" + key + "\"] = " + value + "\n").echo();
    i += 1;
}

"---\n".echo();

/* ======================================== */
/* 3. OBJECT INSTANTIATION AND ACCESS */
/* ======================================== */
"Test 3: Object Instantiation and Access\n".echo();
"Creating objects with class syntax:\n".echo();

/* Define a simple class */
TestClass = class {
    name = "";
    value = 0;
    
    init = op(n, v) {
        name = n;
        value = v;
    };
    
    getInfo = op() {
        ("Name: " + name + ", Value: " + value.str()).echo();
    };
};

/* Create object instances */
obj1 = obj TestClass;
obj1.init("test1", 42);
obj2 = obj TestClass;
obj2.init("test2", 100);

("obj1 type: " + obj1.type() + "\n").echo();
("obj2 type: " + obj2.type() + "\n").echo();

"Object access patterns:\n".echo();
("obj1.name: " + obj1.name + "\n").echo();
("obj1.value: " + obj1.value + "\n").echo();

"Object methods:\n".echo();
obj1.getInfo();
obj2.getInfo();

"---\n".echo();

/* ======================================== */
/* 4. COMPARISON OF ACCESS PATTERNS */
/* ======================================== */
"Test 4: Comparison of Access Patterns\n".echo();

/* Test data structures */
test_array = [10, 20, 30, 40, 50];
test_list = {"first": "alpha", "second": "beta", "third": "gamma"};
test_object = obj TestClass;
test_object.init("test_obj", 999);

"Array access patterns:\n".echo();
("test_array[0]: " + test_array[0] + " (bracket notation)\n").echo();
("test_array.get(0): " + test_array.get(0) + " (get method)\n").echo();
("test_array.len(): " + test_array.len() + " (length)\n").echo();

"List access patterns:\n".echo();
("test_list[\"first\"]: " + test_list["first"] + " (bracket notation)\n").echo();
("test_list.first: " + test_list.first + " (dot notation)\n").echo();
("test_list.get(\"first\"): " + test_list.get("first") + " (get method)\n").echo();
("test_list.len(): " + test_list.len() + " (length)\n").echo();

"Object access patterns:\n".echo();
("test_object.name: " + test_object.name + " (dot notation)\n").echo();
("test_object[\"name\"]: " + test_object["name"] + " (bracket notation)\n").echo();
("test_object.get(\"name\"): " + test_object.get("name") + " (get method)\n").echo();

"---\n".echo();

/* ======================================== */
/* 5. ERROR CASES AND EDGE CASES */
/* ======================================== */
"Test 5: Error Cases and Edge Cases\n".echo();

"Array error cases:\n".echo();
("test_array[10]: " + test_array[10] + " (out of bounds)\n").echo();
("test_array[\"key\"]: " + test_array["key"] + " (invalid key access)\n").echo();

"List error cases:\n".echo();
("test_list[\"nonexistent\"]: " + test_list["nonexistent"] + " (missing key)\n").echo();
("test_list.get(\"nonexistent\"): " + test_list.get("nonexistent") + " (missing key with get)\n").echo();

"Object error cases:\n".echo();
("test_object[\"nonexistent\"]: " + test_object["nonexistent"] + " (missing property)\n").echo();
("test_object.get(\"nonexistent\"): " + test_object.get("nonexistent") + " (missing property with get)\n").echo();

"---\n".echo();

/* ======================================== */
/* 6. NESTED STRUCTURES */
/* ======================================== */
"Test 6: Nested Structures\n".echo();

nested_list = {
    "level1": {
        "level2": {
            "level3": "deep_value"
        }
    },
    "array": [1, 2, 3, 4, 5],
    "mixed": {
        "numbers": [10, 20, 30],
        "strings": ["a", "b", "c"]
    }
};

"Nested list access:\n".echo();
("nested_list[\"level1\"][\"level2\"][\"level3\"]: " + nested_list["level1"]["level2"]["level3"] + "\n").echo();
("nested_list[\"array\"][2]: " + nested_list["array"][2] + "\n").echo();
("nested_list[\"mixed\"][\"numbers\"][1]: " + nested_list["mixed"]["numbers"][1] + "\n").echo();

"---\n".echo();

/* ======================================== */
/* 7. SUMMARY AND RECOMMENDATIONS */
/* ======================================== */
"Test 7: Summary and Recommendations\n".echo();

"DATA TYPE SUMMARY:\n".echo();
"• Arrays ([]): Index-based access, use array[index]\n".echo();
"• Lists ({}): Key-based access, use list[key] or list.key\n".echo();
"• Objects (class): Property access, use object.property\n".echo();

"ACCESS PATTERN RECOMMENDATIONS:\n".echo();
"• For arrays: Use bracket notation array[index]\n".echo();
"• For lists: Use bracket notation list[key] (preferred) or dot notation list.key\n".echo();
"• For objects: Use dot notation object.property (preferred) or bracket notation object[key]\n".echo();
"• For all: Use .len() for length, avoid .get() on lists\n".echo();

"=== DATA TYPES TEST COMPLETE ===\n".echo(); 