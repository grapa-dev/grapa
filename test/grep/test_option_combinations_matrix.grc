/*
Grapa .grc File Authoring Rules (Windows)
- Use only block comments: the type of coment brackets this comment block uses (do not use //)
- Always use .echo() as a method: "string".echo(); or (str1+str2).echo();
- End every command with a ; character
- Use while loops instead of for (Grapa does not support for)
- Wrap string concatenations in parentheses: (str1+str2).echo();
- Arrays (type $ARRAY) and lists (type $LIST) are accessed with [index] syntax, not .get().
  Example:
    ar = [1,2,3];
    ar[1];  /* returns */
    ar = {"a":11,"b":22,"c":33};
    ar[1];  /* returns 22 */
    ar["b"];  /* returns 22 */
- Use .get("key") for object property access, not for arrays/lists.
- Validate syntax against known-good .grc files before adding new code
- Prefer simple, explicit constructs for compatibility
- To run this file on Windows:
    .\grep.exe -q -cfile path/file.grc
*/

"=== SYSTEMATIC OPTION COMBINATION MATRIX TEST SUITE ===\n".echo();

/* === Advanced Combinations === */
"\n-- Advanced Combinations --\n".echo();
result_oid = input1.grep(pattern1, "oid");
("oid: " + result_oid.str() + "\n").echo();
result_odj = input1.grep(pattern1, "odj");
("odj: " + result_odj.str() + "\n").echo();
result_oNf = input1.grep(pattern1, "oNf");
("oNf: " + result_oNf.str() + "\n").echo();
"---\n".echo();

/* === Higher-Order Combinations === */
"\n-- Higher-Order Combinations --\n".echo();
result_oidj = input1.grep(pattern1, "oidj");
("oidj: " + result_oidj.str() + "\n").echo();
result_odjA1 = input1.grep(pattern1, "odjA1");
("odjA1: " + result_odjA1.str() + "\n").echo();
result_oNfB1 = input1.grep(pattern1, "oNfB1");
("oNfB1: " + result_oNfB1.str() + "\n").echo();
"---\n".echo();

/* === Basic Combinations === */
"\n-- Basic Combinations --\n".echo();
result_oi = input1.grep(pattern1, "oi");
("oi: " + result_oi.str() + "\n").echo();
result_od = input1.grep(pattern1, "od");
("od: " + result_od.str() + "\n").echo();
result_ow = input1.grep(pattern1, "ow");
("ow: " + result_ow.str() + "\n").echo();
"---\n".echo();

/* Section 1: Pairs with 'o' (match-only) */
"\n-- 1. Pairs with 'o' (match-only) --\n".echo();
input1 = "Hello World\nLine 2\nLine 3\nHello again";
pattern1 = "Hello";
result_oi = input1.grep(pattern1, "oi");
("oi: " + result_oi.str() + "\n").echo();
result_oj = input1.grep(pattern1, "oj");
("oj: " + result_oj.str() + "\n").echo();
result_on = input1.grep(pattern1, "on");
("on: " + result_on.str() + "\n").echo();

result_oa = input1.grep(pattern1, "oa");
("oa: " + result_oa.str() + "\n").echo();

result_ow = input1.grep(pattern1, "ow");
("ow: " + result_ow.str() + "\n").echo();
result_os = input1.grep(pattern1, "os");
("os: " + result_os.str() + "\n").echo();
result_ox = input1.grep(pattern1, "ox");
("ox: " + result_ox.str() + "\n").echo();
result_ov = input1.grep(pattern1, "ov");
("ov: " + result_ov.str() + "\n").echo();
result_oN = input1.grep(pattern1, "oN");
("oN: " + result_oN.str() + "\n").echo();
result_oT = input1.grep(pattern1, "oT");
("oT: " + result_oT.str() + "\n").echo();
result_oL = input1.grep(pattern1, "oL");
("oL: " + result_oL.str() + "\n").echo();
result_oA1 = input1.grep(pattern1, "oA1");
("oA1: " + result_oA1.str() + "\n").echo();
result_of = input1.grep(pattern1, "of");
("of: " + result_of.str() + "\n").echo();
"---\n".echo();

/* Section 2: Triples with 'o' (match-only) */
"\n-- 2. Triples with 'o' (match-only) --\n".echo();
result_oij = input1.grep(pattern1, "oij");
("oij: " + result_oij.str() + "\n").echo();
result_ojn = input1.grep(pattern1, "ojn");
("ojn: " + result_ojn.str() + "\n").echo();
result_oA1f = input1.grep(pattern1, "oA1f");
("oA1f: " + result_oA1f.str() + "\n").echo();
result_ojA1 = input1.grep(pattern1, "ojA1");
("ojA1: " + result_ojA1.str() + "\n").echo();
result_oA1B1 = input1.grep(pattern1, "oA1B1");
("oA1B1: " + result_oA1B1.str() + "\n").echo();
result_oA1B1f = input1.grep(pattern1, "oA1B1f");
("oA1B1f: " + result_oA1B1f.str() + "\n").echo();
"---\n".echo();

/* Section 3: Pairs and triples with 'c' (count/precedence) */
"\n-- 3. Pairs and triples with 'c' (count/precedence) --\n".echo();
result_co = input1.grep(pattern1, "co");
("co: " + result_co.str() + "\n").echo();
result_cj = input1.grep(pattern1, "cj");
("cj: " + result_cj.str() + "\n").echo();
result_cA1 = input1.grep(pattern1, "cA1");
("cA1: " + result_cA1.str() + "\n").echo();
result_coj = input1.grep(pattern1, "coj");
("coj: " + result_coj.str() + "\n").echo();
result_coA1 = input1.grep(pattern1, "coA1");
("coA1: " + result_coA1.str() + "\n").echo();
"---\n".echo();

/* Section 4: Pairs and triples with 'f' (full-segment) */
"\n-- 4. Pairs and triples with 'f' (full-segment) --\n".echo();
result_ofj = input1.grep(pattern1, "ofj");
("ofj: " + result_ofj.str() + "\n").echo();
result_ofA1 = input1.grep(pattern1, "ofA1");
("ofA1: " + result_ofA1.str() + "\n").echo();
result_ofA1B1 = input1.grep(pattern1, "ofA1B1");
("ofA1B1: " + result_ofA1B1.str() + "\n").echo();
result_ofA1B1j = input1.grep(pattern1, "ofA1B1j");
("ofA1B1j: " + result_ofA1B1j.str() + "\n").echo();
"---\n".echo();

/* Section 5: Unicode + output/context */
"\n-- 5. Unicode + output/context --\n".echo();
input2 = "caf rsum nave\nCafe Resume Naive\nCAF RSUM NAVE";
pattern2 = "cafe";
result_od = input2.grep(pattern2, "od");
("od: " + result_od.str() + "\n").echo();
result_odf = input2.grep(pattern2, "odf");
("odf: " + result_odf.str() + "\n").echo();
result_oN = input2.grep(pattern2, "oN");
("oN: " + result_oN.str() + "\n").echo();
result_oNd = input2.grep(pattern2, "oNd");
("oNd: " + result_oNd.str() + "\n").echo();
result_oNdA1 = input2.grep(pattern2, "oNdA1");
("oNdA1: " + result_oNdA1.str() + "\n").echo();
"---\n".echo();

"=== END OF SYSTEMATIC OPTION COMBINATION MATRIX TEST SUITE ===\n".echo(); 