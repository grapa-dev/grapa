/* Ripgrep Parity Test: Advanced Features
   Tests multiline patterns, lookaround assertions, and context options
*/

"=== RIPGREP PARITY TEST: ADVANCED FEATURES ===\n".echo();

/* Initialize file system access */
fs = $file();
fs.chd("test/grep/inputs");

/* Test 1: Multiline pattern */
"Test 1: Multiline pattern\n".echo();
input = fs.get("multiline.txt").str();
result = input.grep("^foo.*bar$", "m");
("Input file: multiline.txt\n").echo();
("Pattern: ^foo.*bar$, Options: m\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Lines matching multiline pattern\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 2: Lookahead assertion */
"Test 2: Lookahead assertion\n".echo();
input = fs.get("lookaround.txt").str();
result = input.grep("foo(?=bar)", "");
("Input file: lookaround.txt\n").echo();
("Pattern: foo(?=bar), Options: (none)\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: 'foo' followed by 'bar'\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 3: After context */
"Test 3: After context\n".echo();
input = fs.get("context.txt").str();
result = input.grep("foo", "A1");
("Input file: context.txt\n").echo();
("Pattern: foo, Options: A1\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Match plus 1 line after\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 4: Before context */
"Test 4: Before context\n".echo();
result = input.grep("bar", "B1");
("Pattern: bar, Options: B1\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Match plus 1 line before\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 5: Context (before and after) */
"Test 5: Context (before and after)\n".echo();
result = input.grep("foo", "C1");
("Pattern: foo, Options: C1\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Match plus 1 line before and after\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 6: Custom delimiter (if supported) */
"Test 6: Custom delimiter\n".echo();
input = fs.get("delimiter.txt").str();
result = input.grep("foo", "o", "|||");
("Input file: delimiter.txt\n").echo();
("Pattern: foo, Options: o, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Segments containing 'foo'\n").echo();
("Status: " + (result.len() > 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 7: Invalid pattern error handling */
"Test 7: Invalid pattern error handling\n".echo();
input = fs.get("error.txt").str();
result = input.grep("(unclosed", "");
("Input file: error.txt\n").echo();
("Pattern: (unclosed, Options: (none)\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Error or empty result for invalid pattern\n").echo();
("Status: " + (result.len() == 0 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

"=== ADVANCED FEATURES TESTS COMPLETE ===\n".echo(); 