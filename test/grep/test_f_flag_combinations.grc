/*
Grapa .grc File Authoring Rules (Windows)
- Use block comments for all comments (do not use //). Block comments should be written as in this header.
- Always use .echo() as a method: "string".echo(); or (str1+str2).echo();
- End every command with a ; character
- Use while loops instead of for (Grapa does not support for)
- Wrap string concatenations in parentheses: (str1+str2).echo();
- Arrays (type $ARRAY) and lists (type $LIST) are accessed with [index] syntax, not .get().
  Example:
    ar = [1,2,3];
    ar[1]; // returns 2
    ar = {"a":11,"b":22,"c":33};
    ar[1]; // returns 22
    ar["b"]; // returns 22
- Use .get("key") for object property access, not for arrays/lists.
- Validate syntax against known-good .grc files before adding new code
- Prefer simple, explicit constructs for compatibility
- To run this file on Windows:
    .\grep.exe -q -cfile path/file.grc
*/

/*
  Test: 'f' Flag (Force Full-Segment) Combinations
  Covers: All scenarios involving the 'f' flag, alone and in combination with other output/context/Unicode flags
  Location: test/grep/test_f_flag_combinations.grc
  Author: Grapa Project
  Date: 2024-06
*/

"=== 'F' FLAG (FORCE FULL-SEGMENT) COMBINATIONS TEST SUITE ===\n".echo();

/* Section 1: 'f' flag alone vs. 'o' (match-only) */
"\n-- 1. 'f' flag alone vs. 'o' (match-only) --\n".echo();
input1 = "line1\nline2\nline3";
pattern1 = "line";
result1a = input1.grep(pattern1, "o", "\n");
result1b = input1.grep(pattern1, "of", "\n");
("Input: '" + input1 + "'\n").echo();
("Pattern: '" + pattern1 + "', Options: 'o'\n").echo();
("Result (o): " + result1a.str() + "\n").echo();
("Pattern: '" + pattern1 + "', Options: 'of'\n").echo();
("Result (of): " + result1b.str() + "\n").echo();
("Expected: 'o' returns matched portions, 'of' returns full segments\n").echo();
"---\n".echo();

/* Section 2: 'f' with Unicode property and custom delimiter */
"\n-- 2. 'f' with Unicode property and custom delimiter --\n".echo();
input2 = "Hello \u4e16\u754c|||Goodbye \u4e16\u754c|||Hello caf\u00e9";
pattern2 = "\\p{L}+";
result2 = input2.grep(pattern2, "of", "|||");
("Input: '" + input2 + "'\n").echo();
("Pattern: '" + pattern2 + "', Options: 'of', Delimiter: '|||'\n").echo();
("Result: " + result2.str() + "\n").echo();
("Expected: Each full segment containing a match\n").echo();
"---\n".echo();

/* Section 3: 'f' with context lines (A1, B1, C1) */
"\n-- 3. 'f' with context lines (A1, B1, C1) --\n".echo();
input3 = "a\nb\nc\nd\ne\nf";
pattern3 = "c|d";
result3 = input3.grep(pattern3, "ofA1B1", "\n");
("Input: '" + input3 + "'\n").echo();
("Pattern: '" + pattern3 + "', Options: 'ofA1B1'\n").echo();
("Result: " + result3.str() + "\n").echo();
("Expected: Full segments for matches and their context\n").echo();
"---\n".echo();

/* Section 4: 'f' with JSON output */
"\n-- 4. 'f' with JSON output --\n".echo();
input4 = "foo bar baz|bar foo baz|baz bar foo";
pattern4 = "foo";
result4 = input4.grep(pattern4, "ofj", "|");
("Input: '" + input4 + "'\n").echo();
("Pattern: '" + pattern4 + "', Options: 'ofj', Delimiter: '|'\n").echo();
("Result: " + result4.str() + "\n").echo();
("Expected: JSON array of full segments containing matches\n").echo();
"---\n".echo();

/* Section 5: 'f' with parallel processing */
"\n-- 5. 'f' with parallel processing --\n".echo();
input5 = "apple|banana|pear|apple|banana|pear";
pattern5 = "apple|banana";
result5 = input5.grep(pattern5, "of", "|", "NONE", "UNICODE", 2);
("Input: '" + input5 + "'\n").echo();
("Pattern: '" + pattern5 + "', Options: 'of', Delimiter: '|', Workers: 2\n").echo();
("Result: " + result5.str() + "\n").echo();
("Expected: Full segments for all matches, processed in parallel\n").echo();
"---\n".echo();

/* Section 6: 'f' with edge-case precedence (e.g., with 'c' count) */
"\n-- 6. 'f' with edge-case precedence (with 'c' count) --\n".echo();
input6 = "foo|bar|baz|foo|bar|baz";
pattern6 = "foo|bar";
result6 = input6.grep(pattern6, "ofc", "|");
("Input: '" + input6 + "'\n").echo();
("Pattern: '" + pattern6 + "', Options: 'ofc', Delimiter: '|'\n").echo();
("Result: " + result6.str() + "\n").echo();
("Expected: Only the count of matches (precedence: c disables output)\n").echo();
"---\n".echo();

/* Section 7: Not-yet-implemented or ambiguous combos (expected failure) */
"\n-- 7. Not-yet-implemented or ambiguous combos (expected failure) --\n".echo();
input7 = "foo|bar|baz";
pattern7 = "foo|bar|baz";
result7 = input7.grep(pattern7, "ofz", "|");
("Input: '" + input7 + "'\n").echo();
("Pattern: '" + pattern7 + "', Options: 'ofz', Delimiter: '|'\n").echo();
("Result: " + result7.str() + "\n").echo();
("Expected: (May fail if 'z' is not yet implemented; update when supported)\n").echo();
"---\n".echo();

"=== END OF 'F' FLAG COMBINATIONS TEST SUITE ===\n".echo(); 