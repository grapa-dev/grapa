/* Smoke Test: Basic Custom Delimiter Support
   - Runs on every build to verify basic custom delimiter functionality
   - Execution time: < 30 seconds
   - Purpose: Quick validation of custom delimiter support
   - Status: Critical for development workflow
*/

"=== SMOKE TEST: BASIC CUSTOM DELIMITER SUPPORT ===\n".echo();
"Running basic custom delimiter validation...\n".echo();

/* Test 1: Basic custom delimiter */
"Test 1: Basic custom delimiter\n".echo();
input = "line1|||line2|||line3";
result = input.grep("line", "o", "|||");
("Input: " + input + "\n").echo();
("Pattern: line, Options: o, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"line1\", \"line2\", \"line3\"]\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 2: Single character custom delimiter */
"Test 2: Single character custom delimiter\n".echo();
input2 = "line1|line2|line3";
result = input2.grep("line", "o", "|");
("Input: " + input2 + "\n").echo();
("Pattern: line, Options: o, Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"line1\", \"line2\", \"line3\"]\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 3: Custom delimiter with case-insensitive */
"Test 3: Custom delimiter with case-insensitive\n".echo();
input3 = "Hello|||WORLD|||hello";
result = input3.grep("hello", "oi", "|||");
("Input: " + input3 + "\n").echo();
("Pattern: hello, Options: oi, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"Hello\", \"hello\"]\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 4: Custom delimiter with invert match */
"Test 4: Custom delimiter with invert match\n".echo();
input4 = "match1|||nomatch|||match2";
result = input4.grep("match", "ov", "|||");
("Input: " + input4 + "\n").echo();
("Pattern: match, Options: ov, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"nomatch\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 5: Custom delimiter with line numbers */
"Test 5: Custom delimiter with line numbers\n".echo();
input5 = "line1|||line2|||line3";
result = input5.grep("line", "on", "|||");
("Input: " + input5 + "\n").echo();
("Pattern: line, Options: on, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Lines with line numbers\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 6: Custom delimiter with count only */
"Test 6: Custom delimiter with count only\n".echo();
result = input5.grep("line", "c", "|||");
("Pattern: line, Options: c, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: 3\n").echo();
("Status: " + (result == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 7: Custom delimiter with JSON output */
"Test 7: Custom delimiter with JSON output\n".echo();
result = input5.grep("line", "oj", "|||");
("Pattern: line, Options: oj, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: JSON array\n").echo();
("Status: " + (result.len() == 3 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 8: Custom delimiter with context */
"Test 8: Custom delimiter with context\n".echo();
input6 = "header|||line1|||line2|||line3|||footer";
result = input6.grep("line2", "A1", "|||");
("Input: " + input6 + "\n").echo();
("Pattern: line2, Options: A1, Delimiter: |||\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: Match plus context\n").echo();
("Status: " + (result.len() == 2 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 9: Empty delimiter */
"Test 9: Empty delimiter\n".echo();
input7 = "singleline";
result = input7.grep("line", "o", "");
("Input: " + input7 + "\n").echo();
("Pattern: line, Options: o, Delimiter: (empty)\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"line\"]\n").echo();
("Status: " + (result.len() == 1 ? "PASS" : "FAIL") + "\n").echo();
"---\n".echo();

/* Test 10: Custom delimiter error handling */
"Test 10: Custom delimiter error handling\n".echo();
input8 = "test";
/*
NOTE: Grapa currently cannot pass a string containing a single 0x00 (null byte) as a delimiter.
If you write "\0" in a Grapa script, it is trimmed to a zero-length string before reaching C++.
This is a known limitation and requires Grapa core enhancement for full support.
For now, this test will always pass an empty string as the delimiter.
*/
result = input8.grep("test", "o", "\0"); /* Null delimiter (actually empty string in Grapa) */
("Input: " + input8 + "\n").echo();
("Pattern: test, Options: o, Delimiter: \\0\n").echo();
("Result: " + result.str() + "\n").echo();
("Expected: [\"test\"] (pending Grapa core support for true null delimiter)\n").echo();
("Status: " + (result.len() == 1 ? "PASS (pending core support)" : "FAIL") + "\n").echo();
"---\n".echo();

"=== SMOKE TEST COMPLETE ===\n".echo();
"Basic custom delimiter support validation complete.\n".echo(); 