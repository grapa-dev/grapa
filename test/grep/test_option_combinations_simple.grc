/* Simple Option Combination Test */
/* Testing key option combinations with correct expected values */

"=== SIMPLE OPTION COMBINATION TEST ===\n".echo();

result = "";
test_count = 0;

/* Test 1: Basic match-only */
test_count += 1;
input = "Hello World|Goodbye World";
actual = input.grep("Hello", "o", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": o (match-only) - " + actual.str() + "\n").echo();

/* Test 2: Case-insensitive */
test_count += 1;
actual = input.grep("hello", "i", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": i (case-insensitive) - " + actual.str() + "\n").echo();

/* Test 3: Match-only + case-insensitive */
test_count += 1;
actual = input.grep("hello", "oi", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": oi (match-only + case) - " + actual.str() + "\n").echo();

/* Test 4: JSON output */
test_count += 1;
actual = input.grep("Hello", "j", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": j (JSON) - " + actual.str() + "\n").echo();

/* Test 5: Match-only + JSON */
test_count += 1;
actual = input.grep("Hello", "oj", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": oj (match-only + JSON) - " + actual.str() + "\n").echo();

/* Test 6: Line numbers */
test_count += 1;
actual = input.grep("Hello", "n", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": n (line numbers) - " + actual.str() + "\n").echo();

/* Test 7: Match-only + line numbers */
test_count += 1;
actual = input.grep("Hello", "on", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": on (match-only + line numbers) - " + actual.str() + "\n").echo();

/* Test 8: Context */
test_count += 1;
actual = input.grep("Hello", "A1", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": A1 (context) - " + actual.str() + "\n").echo();

/* Test 9: Match-only + context */
test_count += 1;
actual = input.grep("Hello", "oA1", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": oA1 (match-only + context) - " + actual.str() + "\n").echo();

/* Test 10: 3-option combination */
test_count += 1;
actual = input.grep("Hello", "ojn", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": ojn (3 options) - " + actual.str() + "\n").echo();

/* Test 11: 4-option combination */
test_count += 1;
actual = input.grep("Hello", "ojnA1", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": ojnA1 (4 options) - " + actual.str() + "\n").echo();

/* Test 12: Count only */
test_count += 1;
actual = input.grep("Hello", "c", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": c (count) - " + actual.str() + "\n").echo();

/* Test 13: Invert match */
test_count += 1;
actual = input.grep("Hello", "v", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": v (invert) - " + actual.str() + "\n").echo();

/* Test 14: Exact match */
test_count += 1;
actual = input.grep("Hello World", "x", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": x (exact) - " + actual.str() + "\n").echo();

/* Test 15: All-mode */
test_count += 1;
actual = input.grep("Hello", "a", "|");
expected_len = 1;
if (actual.len() == expected_len) {
    result = (result + ".");
} else {
    result = (result + "F");
};
("Test " + test_count + ": a (all-mode) - " + actual.str() + "\n").echo();

/* ======================================== */
/* SUMMARY */
/* ======================================== */
("=== SIMPLE OPTION COMBINATION TEST COMPLETE ===\n").echo();
("Total tests: " + test_count + "\n").echo();
("Results: " + result + "\n").echo();
("Summary: . = PASS, F = FAIL\n").echo();

/* Count passes and failures */
pass_count = 0;
fail_count = 0;
i = 0;
while(i < result.len()) {
    if (result[i] == ".") {
        pass_count += 1;
    } else {
        fail_count += 1;
    };
    i += 1;
};

("Passed: " + pass_count + "\n").echo();
("Failed: " + fail_count + "\n").echo();
("Success rate: " + ((pass_count * 100) / test_count) + "%\n").echo();

if (fail_count == 0) {
    ("✅ ALL OPTION COMBINATIONS WORKING CORRECTLY\n").echo();
    ("🎉 100% RIPGREP PARITY ACHIEVED\n").echo();
} else {
    ("⚠️  Some option combinations need attention\n").echo();
    ("Next: Investigate failed combinations\n").echo();
}; 