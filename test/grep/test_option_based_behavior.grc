/* Test Option-Based Behavior for Grapa Grep
   Demonstrates the new 'f' flag to control full segments vs matched portions */

"=== OPTION-BASED BEHAVIOR TEST SUITE ===\n".echo();
"\n".echo();

"Test 1: Regular Patterns - Match Only (o) vs Full Segments (of)\n".echo();
"Purpose: Verify that 'o' returns matched portions and 'of' returns full segments\n".echo();
"\n".echo();

/* Test with regular pattern */
input = "line1\nline2\nline3\n";
pattern = "line";

/* Test 1.1: Match only (o) - should return matched portions */
result1 = input.grep(pattern, "o", "\n");
(("Input: '" + input + "'\n")).echo();
(("Pattern: '" + pattern + "', Options: 'o'\n")).echo();
(("Result: " + result1.str() + "\n")).echo();
"Expected: ['line', 'line', 'line'] (matched portions)\n".echo();
(("Status: " + (result1[0] == "line" && result1[1] == "line" && result1[2] == "line" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 1.2: Match only + full segments (of) - should return full segments */
result2 = input.grep(pattern, "of", "\n");
(("Input: '" + input + "'\n")).echo();
(("Pattern: '" + pattern + "', Options: 'of'\n")).echo();
(("Result: " + result2.str() + "\n")).echo();
"Expected: ['line1', 'line2', 'line3'] (full segments)\n".echo();
(("Status: " + (result2[0] == "line1" && result2[1] == "line2" && result2[2] == "line3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

"Test 2: Unicode Script Properties - Match Only (o) vs Full Segments (of)\n".echo();
"Purpose: Verify that Unicode script properties work with both options\n".echo();
"\n".echo();

/* Test with Unicode script properties */
input2 = "Hello World\nGoodbye World\n";
pattern2 = "\\p{L}+";

/* Test 2.1: Match only (o) - should return matched portions */
result3 = input2.grep(pattern2, "o", "\n");
(("Input: '" + input2 + "'\n")).echo();
(("Pattern: '" + pattern2 + "', Options: 'o'\n")).echo();
(("Result: " + result3.str() + "\n")).echo();
"Expected: ['Hello', 'World', 'Goodbye', 'World'] (matched portions)\n".echo();
(("Status: " + (result3[0] == "Hello" && result3[1] == "World" && result3[2] == "Goodbye" && result3[3] == "World" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 2.2: Match only + full segments (of) - should return full segments */
result4 = input2.grep(pattern2, "of", "\n");
(("Input: '" + input2 + "'\n")).echo();
(("Pattern: '" + pattern2 + "', Options: 'of'\n")).echo();
(("Result: " + result4.str() + "\n")).echo();
"Expected: ['Hello World', 'Goodbye World'] (full segments)\n".echo();
(("Status: " + (result4[0] == "Hello World" && result4[1] == "Goodbye World" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

"Test 3: Lookaround Assertions - Match Only (o) vs Full Segments (of)\n".echo();
"Purpose: Verify that lookaround assertions work with both options\n".echo();
"\n".echo();

/* Test with lookaround assertions */
input3 = "cat\nbat\nrat\n";
pattern3 = "(?=a)";

/* Test 3.1: Match only (o) - should return matched portions */
result5 = input3.grep(pattern3, "o", "\n");
(("Input: '" + input3 + "'\n")).echo();
(("Pattern: '" + pattern3 + "', Options: 'o'\n")).echo();
(("Result: " + result5.str() + "\n")).echo();
"Expected: ['', '', ''] (empty matches for lookahead)\n".echo();
(("Status: " + (result5[0] == "" && result5[1] == "" && result5[2] == "" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 3.2: Match only + full segments (of) - should return full segments */
result6 = input3.grep(pattern3, "of", "\n");
(("Input: '" + input3 + "'\n")).echo();
(("Pattern: '" + pattern3 + "', Options: 'of'\n")).echo();
(("Result: " + result6.str() + "\n")).echo();
"Expected: ['cat', 'bat', 'rat'] (full segments)\n".echo();
(("Status: " + (result6[0] == "cat" && result6[1] == "bat" && result6[2] == "rat" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

"Test 4: Conditional Patterns - Match Only (o) vs Full Segments (of)\n".echo();
"Purpose: Verify that conditional patterns work with both options\n".echo();
"\n".echo();

/* Test with conditional patterns */
input4 = "ab\nc\n";
pattern4 = "(a)?(?(1)b|c)";

/* Test 4.1: Match only (o) - should return matched portions */
result7 = input4.grep(pattern4, "o", "\n");
(("Input: '" + input4 + "'\n")).echo();
(("Pattern: '" + pattern4 + "', Options: 'o'\n")).echo();
(("Result: " + result7.str() + "\n")).echo();
"Expected: ['ab', 'c'] (matched portions)\n".echo();
(("Status: " + (result7[0] == "ab" && result7[1] == "c" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 4.2: Match only + full segments (of) - should return full segments */
result8 = input4.grep(pattern4, "of", "\n");
(("Input: '" + input4 + "'\n")).echo();
(("Pattern: '" + pattern4 + "', Options: 'of'\n")).echo();
(("Result: " + result8.str() + "\n")).echo();
"Expected: ['ab', 'c'] (full segments)\n".echo();
(("Status: " + (result8[0] == "ab" && result8[1] == "c" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

"Test 5: Grapheme Clusters - Match Only (o) vs Full Segments (of)\n".echo();
"Purpose: Verify that grapheme clusters work with both options\n".echo();
"\n".echo();

/* Test with grapheme clusters */
input5 = "café\nnaïve\n";
pattern5 = "\\X";

/* Test 5.1: Match only (o) - should return matched portions (individual graphemes) */
result9 = input5.grep(pattern5, "o", "\n");
(("Input: '" + input5 + "'\n")).echo();
(("Pattern: '" + pattern5 + "', Options: 'o'\n")).echo();
(("Result: " + result9.str() + "\n")).echo();
"Expected: ['c', 'a', 'f', 'é', 'n', 'a', 'ï', 'v', 'e'] (individual graphemes)\n".echo();
(("Status: " + (result9[0] == "c" && result9[1] == "a" && result9[2] == "f" && result9[3] == "é" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 5.2: Match only + full segments (of) - should return full segments */
result10 = input5.grep(pattern5, "of", "\n");
(("Input: '" + input5 + "'\n")).echo();
(("Pattern: '" + pattern5 + "', Options: 'of'\n")).echo();
(("Result: " + result10.str() + "\n")).echo();
"Expected: ['café', 'naïve'] (full segments)\n".echo();
(("Status: " + (result10[0] == "café" && result10[1] == "naïve" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

"Test 6: Default Behavior - No Options vs Full Segments Flag (f)\n".echo();
"Purpose: Verify that 'f' flag works without 'o' flag\n".echo();
"\n".echo();

/* Test 6.1: No options - should return full segments (default) */
result11 = input.grep(pattern, "", "\n");
(("Input: '" + input + "'\n")).echo();
(("Pattern: '" + pattern + "', Options: '' (no options)\n")).echo();
(("Result: " + result11.str() + "\n")).echo();
"Expected: ['line1', 'line2', 'line3'] (full segments)\n".echo();
(("Status: " + (result11[0] == "line1" && result11[1] == "line2" && result11[2] == "line3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

/* Test 6.2: Full segments flag (f) - should return full segments */
result12 = input.grep(pattern, "f", "\n");
(("Input: '" + input + "'\n")).echo();
(("Pattern: '" + pattern + "', Options: 'f'\n")).echo();
(("Result: " + result12.str() + "\n")).echo();
"Expected: ['line1', 'line2', 'line3'] (full segments)\n".echo();
(("Status: " + (result12[0] == "line1" && result12[1] == "line2" && result12[2] == "line3" ? "PASS" : "FAIL") + "\n")).echo();
"\n".echo();

"=== OPTION-BASED BEHAVIOR TEST SUMMARY ===\n".echo();
"The 'f' flag provides flexible control over grep output:\n".echo();
"- 'o' alone: Return matched portions (ripgrep -o behavior)\n".echo();
"- 'of': Return full segments containing matches\n".echo();
"- 'f' alone: Return full segments (default behavior)\n".echo();
"- No options: Return full segments (default behavior)\n".echo();
"\n".echo();
"This approach eliminates the need for hardcoded pattern-type-specific behavior\n".echo();
"and gives users full control over the output format.\n".echo(); 