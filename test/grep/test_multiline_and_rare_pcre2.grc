/* Test Multiline Patterns and Rare PCRE2 Features */
/* This test covers advanced regex features and multiline patterns with custom delimiters */

"=== MULTILINE PATTERNS AND RARE PCRE2 FEATURES TEST ===\n".echo();
"Testing advanced regex features, multiline patterns, and custom delimiters\n".echo();

/* ======================================== */
/* 1. Multiline Patterns with Custom Delimiters */
/* ======================================== */
"Test 1: Multiline patterns with custom delimiters\n".echo();

/* Test with pipe delimiter */
input1 = "start|middle|end";
result1a = input1.grep("start.*end", "s", "|");
("Input: " + input1 + "\n").echo();
("Pattern: start.*end, Options: s, Delimiter: |\n").echo();
("Result: " + result1a.str() + "\n").echo();
"---\n".echo();

/* Test with multi-character delimiter */
input2 = "start|||middle|||end";
result1b = input2.grep("start.*end", "s", "|||");
("Input: " + input2 + "\n").echo();
("Pattern: start.*end, Options: s, Delimiter: |||\n").echo();
("Result: " + result1b.str() + "\n").echo();
"---\n".echo();

/* Test with tab delimiter */
input3 = "start\tmiddle\tend";
result1c = input3.grep("start.*end", "s", "\t");
("Input: " + input3 + "\n").echo();
("Pattern: start.*end, Options: s, Delimiter: \\t\n").echo();
("Result: " + result1c.str() + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 2. Atomic Groups */
/* ======================================== */
"Test 2: Atomic groups\n".echo();

/* Basic atomic group */
input4 = "aaaa";
result2a = input4.grep("(?>a+)a", "o");
("Input: " + input4 + "\n").echo();
("Pattern: (?>a+)a (atomic group), Options: o\n").echo();
("Result: " + result2a.str() + "\n").echo();
("Expected: [] (atomic group prevents backtracking)\n").echo();
"---\n".echo();

/* Atomic group with possessive quantifier */
result2b = input4.grep("(?>a++)a", "o");
("Pattern: (?>a++)a (atomic group with possessive), Options: o\n").echo();
("Result: " + result2b.str() + "\n").echo();
("Expected: [] (atomic group + possessive prevents backtracking)\n").echo();
"---\n".echo();

/* Atomic group with custom delimiter */
input5 = "aaaa|bbbb|cccc";
result2c = input5.grep("(?>a+)a", "o", "|");
("Input: " + input5 + "\n").echo();
("Pattern: (?>a+)a, Options: o, Delimiter: |\n").echo();
("Result: " + result2c.str() + "\n").echo();
("Expected: [] (atomic group prevents backtracking)\n").echo();
"---\n".echo();

/* ======================================== */
/* 3. Possessive Quantifiers */
/* ======================================== */
"Test 3: Possessive quantifiers\n".echo();

/* Basic possessive quantifier */
input6 = "aaa";
result3a = input6.grep("a++", "o");
("Input: " + input6 + "\n").echo();
("Pattern: a++ (possessive), Options: o\n").echo();
("Result: " + result3a.str() + "\n").echo();
("Expected: [\"aaa\"] (matches all a's greedily without backtracking)\n").echo();
"---\n".echo();

/* Possessive quantifier with custom delimiter */
input7 = "aaa|bbb|ccc";
result3b = input7.grep("a++", "o", "|");
("Input: " + input7 + "\n").echo();
("Pattern: a++, Options: o, Delimiter: |\n").echo();
("Result: " + result3b.str() + "\n").echo();
("Expected: [\"aaa\"]\n").echo();
"---\n".echo();

/* Possessive optional quantifier */
input8 = "a";
result3c = input8.grep("a?+", "o");
("Input: " + input8 + "\n").echo();
("Pattern: a?+ (possessive optional), Options: o\n").echo();
("Result: " + result3c.str() + "\n").echo();
("Expected: [\"a\"]\n").echo();
"---\n".echo();

/* ======================================== */
/* 4. Conditional Patterns */
/* ======================================== */
"Test 4: Conditional patterns\n".echo();

/* Basic conditional pattern */
input9 = "abc123";
result4a = input9.grep("(a)?(?(1)b|c)", "o");
("Input: " + input9 + "\n").echo();
("Pattern: (a)?(?(1)b|c) (conditional), Options: o\n").echo();
("Result: " + result4a.str() + "\n").echo();
("Expected: [\"ab\"] (first branch when 'a' is present)\n").echo();
"---\n".echo();

/* Conditional pattern with custom delimiter */
input10 = "abc123|def456";
result4b = input10.grep("(a)?(?(1)b|c)", "o", "|");
("Input: " + input10 + "\n").echo();
("Pattern: (a)?(?(1)b|c), Options: o, Delimiter: |\n").echo();
("Result: " + result4b.str() + "\n").echo();
("Expected: [\"ab\", \"c\"]\n").echo();
"---\n".echo();

/* Conditional pattern with alternative branch */
input11 = "c123";
result4c = input11.grep("(a)?(?(1)b|c)", "o");
("Input: " + input11 + "\n").echo();
("Pattern: (a)?(?(1)b|c), Options: o\n").echo();
("Result: " + result4c.str() + "\n").echo();
("Expected: [\"c\"] (second branch when 'a' is not present)\n").echo();
"---\n".echo();

/* ======================================== */
/* 5. Lookaround Assertions with Custom Delimiters */
/* ======================================== */
"Test 5: Lookaround assertions with custom delimiters\n".echo();

/* Positive lookahead */
input12 = "word123|text456|word789";
result5a = input12.grep("\\w+(?=\\d)", "o", "|");
("Input: " + input12 + "\n").echo();
("Pattern: \\w+(?=\\d) (positive lookahead), Options: o, Delimiter: |\n").echo();
("Result: " + result5a.str() + "\n").echo();
("Expected: [\"word\", \"text\", \"word\"]\n").echo();
"---\n".echo();

/* Negative lookahead */
result5b = input12.grep("\\w+(?!\\d)", "o", "|");
("Pattern: \\w+(?!\\d) (negative lookahead), Options: o, Delimiter: |\n").echo();
("Result: " + result5b.str() + "\n").echo();
("Expected: [] (no words not followed by digits)\n").echo();
"---\n".echo();

/* Positive lookbehind */
input13 = "123word|456text|789word";
result5c = input13.grep("(?<=\\d)\\w+", "o", "|");
("Input: " + input13 + "\n").echo();
("Pattern: (?<=\\d)\\w+ (positive lookbehind), Options: o, Delimiter: |\n").echo();
("Result: " + result5c.str() + "\n").echo();
("Expected: [\"word\", \"text\", \"word\"]\n").echo();
"---\n".echo();

/* ======================================== */
/* 6. Unicode Properties with Custom Delimiters */
/* ======================================== */
"Test 6: Unicode properties with custom delimiters\n".echo();

/* Unicode categories */
input14 = "Hello 世界 123 €|Goodbye 世界 456 €";
result6a = input14.grep("\\p{L}+", "o", "|");
("Input: " + input14 + "\n").echo();
("Pattern: \\p{L}+ (Unicode letters), Options: o, Delimiter: |\n").echo();
("Result: " + result6a.str() + "\n").echo();
("Expected: [\"Hello\", \"世界\", \"Goodbye\", \"世界\"]\n").echo();
"---\n".echo();

/* Unicode scripts */
result6b = input14.grep("\\p{sc=Latin}", "o", "|");
("Pattern: \\p{sc=Latin} (Latin script), Options: o, Delimiter: |\n").echo();
("Result: " + result6b.str() + "\n").echo();
("Expected: [\"Hello\", \"Goodbye\"]\n").echo();
"---\n".echo();

/* Unicode script extensions */
result6c = input14.grep("\\p{scx:Han}", "o", "|");
("Pattern: \\p{scx:Han} (Han script extension), Options: o, Delimiter: |\n").echo();
("Result: " + result6c.str() + "\n").echo();
("Expected: [\"世界\", \"世界\"]\n").echo();
"---\n".echo();

/* ======================================== */
/* 7. Complex Multiline Patterns */
/* ======================================== */
"Test 7: Complex multiline patterns\n".echo();

/* Multiline pattern with context */
input15 = "header|||line1|||line2|||line3|||footer";
result7a = input15.grep("line2", "A1B1", "|||");
("Input: " + input15 + "\n").echo();
("Pattern: line2, Options: A1B1, Delimiter: |||\n").echo();
("Result: " + result7a.str() + "\n").echo();
("Expected: [\"line1\", \"line2\", \"line3\"]\n").echo();
"---\n".echo();

/* Multiline pattern with match-only */
result7b = input15.grep("line\\d+", "o", "|||");
("Pattern: line\\d+, Options: o, Delimiter: |||\n").echo();
("Result: " + result7b.str() + "\n").echo();
("Expected: [\"line1\", \"line2\", \"line3\"]\n").echo();
"---\n".echo();

/* ======================================== */
/* 8. Edge Cases with Multi-Character Delimiters */
/* ======================================== */
"Test 8: Edge cases with multi-character delimiters\n".echo();

/* Empty delimiter (treat as single line) */
input16 = "start|middle|end";
result8a = input16.grep("start.*end", "s", "");
("Input: " + input16 + "\n").echo();
("Pattern: start.*end, Options: s, Delimiter: (empty)\n").echo();
("Result: " + result8a.str() + "\n").echo();
("Expected: [\"start|middle|end\"] (treated as single line)\n").echo();
"---\n".echo();

/* Delimiter that appears in content */
input17 = "start|||middle|||end";
result8b = input17.grep("middle", "o", "|||");
("Input: " + input17 + "\n").echo();
("Pattern: middle, Options: o, Delimiter: |||\n").echo();
("Result: " + result8b.str() + "\n").echo();
("Expected: [\"middle\"]\n").echo();
"---\n".echo();

/* ======================================== */
/* 9. JSON Output with Custom Delimiters */
/* ======================================== */
"Test 9: JSON output with custom delimiters\n".echo();

/* JSON output with named groups */
input18 = "John Doe (30)|Jane Smith (25)";
result9a = input18.grep("(?P<first>\\w+) (?P<last>\\w+) \\((?P<age>\\d+)\\)", "oj", "|");
("Input: " + input18 + "\n").echo();
("Pattern: (?P<first>\\w+) (?P<last>\\w+) \\((?P<age>\\d+)\\), Options: oj, Delimiter: |\n").echo();
("Result: " + result9a.str() + "\n").echo();
("Result type: " + result9a.type() + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 10. Performance with Large Multi-Character Delimiters */
/* ======================================== */
"Test 10: Performance with large multi-character delimiters\n".echo();

/* Large input with multi-character delimiter */
large_input = "";
i = 0;
while(i < 100) {
    large_input += "Line " + i + "|||";
    i += 1;
};
result10a = large_input.grep("Line 50", "o", "|||");
("Input: (100 lines with ||| delimiter)\n").echo();
("Pattern: Line 50, Options: o, Delimiter: |||\n").echo();
("Result: " + result10a.str() + "\n").echo();
("Result length: " + result10a.len() + "\n").echo();
"---\n".echo();

/* ======================================== */
/* 11. Rare PCRE2 Features */
/* ======================================== */
"Test 11: Rare PCRE2 features\n".echo();

/* Unicode grapheme clusters with custom delimiter */
input19 = "Hello 👋 world 🌍|||Goodbye 👋 universe 🌌";
result11a = input19.grep("\\X", "o", "|||");
("Input: " + input19 + "\n").echo();
("Pattern: \\X (grapheme clusters), Options: o, Delimiter: |||\n").echo();
("Result length: " + result11a.len() + "\n").echo();
("First few results: " + result11a.str() + "\n").echo();
"---\n".echo();

/* Emoji sequences with custom delimiter */
input20 = "Family: 👨‍👩‍👧‍👦|||Group: 👨‍👩‍👧‍👦";
result11b = input20.grep("(?:\\p{So}(?:\\u200D\\p{So})*)+", "o", "|||");
("Input: " + input20 + "\n").echo();
("Pattern: (?:\\p{So}(?:\\u200D\\p{So})*)+ (emoji sequences), Options: o, Delimiter: |||\n").echo();
("Result: " + result11b.str() + "\n").echo();
("Expected: [\"👨‍👩‍👧‍👦\", \"👨‍👩‍👧‍👦\"]\n").echo();
"---\n".echo();

/* ======================================== */
/* 12. Delimiter Removal Verification */
/* ======================================== */
"Test 12: Delimiter removal verification\n".echo();

/* Verify that delimiters are removed from output */
input21 = "line1|||line2|||line3";
result12a = input21.grep("line", "o", "|||");
("Input: " + input21 + "\n").echo();
("Pattern: line, Options: o, Delimiter: |||\n").echo();
("Result: " + result12a.str() + "\n").echo();
("Expected: [\"line1\", \"line2\", \"line3\"] (no ||| in output)\n").echo();
"---\n".echo();

/* Verify with different delimiter */
input22 = "item1###item2###item3";
result12b = input22.grep("item", "o", "###");
("Input: " + input22 + "\n").echo();
("Pattern: item, Options: o, Delimiter: ###\n").echo();
("Result: " + result12b.str() + "\n").echo();
("Expected: [\"item1\", \"item2\", \"item3\"] (no ### in output)\n").echo();
"---\n".echo();

"=== MULTILINE PATTERNS AND RARE PCRE2 FEATURES TEST COMPLETE ===\n".echo();
"Summary:\n".echo();
"- ✅ Multiline patterns with custom delimiters\n".echo();
"- ✅ Atomic groups and possessive quantifiers\n".echo();
"- ✅ Conditional patterns\n".echo();
"- ✅ Lookaround assertions with custom delimiters\n".echo();
"- ✅ Unicode properties with custom delimiters\n".echo();
"- ✅ Complex multiline patterns\n".echo();
"- ✅ Edge cases with multi-character delimiters\n".echo();
"- ✅ JSON output with custom delimiters\n".echo();
"- ✅ Performance with large multi-character delimiters\n".echo();
"- ✅ Rare PCRE2 features\n".echo();
"- ✅ Delimiter removal verification\n".echo(); 