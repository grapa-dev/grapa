/* Test Custom Delimiters */
/* This test covers custom line delimiter functionality */

"=== CUSTOM DELIMITERS TEST ===\n".echo();
"Testing custom line delimiter functionality\n".echo();

/* Test 1: Default delimiter (newline) */
"Test 1: Default delimiter (newline)\n".echo();
input = "Line 1\nLine 2\nLine 3";
result = input.grep("Line", "", "\n");
("Input: Line 1\\nLine 2\\nLine 3\n").echo();
("Delimiter: \\n (default)\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 2: Custom single character delimiter */
"Test 2: Custom single character delimiter\n".echo();
input = "Line 1|Line 2|Line 3";
result = input.grep("Line", "", "|");
("Input: Line 1|Line 2|Line 3\n").echo();
("Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 3: Multi-character delimiter */
"Test 3: Multi-character delimiter\n".echo();
input = "Line 1\r\nLine 2\r\nLine 3";
result = input.grep("Line", "", "\r\n");
("Input: Line 1\\r\\nLine 2\\r\\nLine 3\n").echo();
("Delimiter: \\r\\n\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 4: Tab delimiter */
"Test 4: Tab delimiter\n".echo();
input = "Line 1\tLine 2\tLine 3";
result = input.grep("Line", "", "\t");
("Input: Line 1\\tLine 2\\tLine 3\n").echo();
("Delimiter: \\t\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 5: Space delimiter */
"Test 5: Space delimiter\n".echo();
input = "Line 1 Line 2 Line 3";
result = input.grep("Line", "", " ");
("Input: Line 1 Line 2 Line 3\n").echo();
("Delimiter: (space)\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 6: Unicode delimiter */
"Test 6: Unicode delimiter\n".echo();
input = "Line 1\u2028Line 2\u2028Line 3";
result = input.grep("Line", "", "\u2028");
("Input: Line 1\\u2028Line 2\\u2028Line 3\n").echo();
("Delimiter: \\u2028 (line separator)\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 7: Paragraph separator delimiter */
"Test 7: Paragraph separator delimiter\n".echo();
input = "Line 1\u2029Line 2\u2029Line 3";
result = input.grep("Line", "", "\u2029");
("Input: Line 1\\u2029Line 2\\u2029Line 3\n").echo();
("Delimiter: \\u2029 (paragraph separator)\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 8: Custom string delimiter */
"Test 8: Custom string delimiter\n".echo();
input = "Line 1<DELIM>Line 2<DELIM>Line 3";
result = input.grep("Line", "", "<DELIM>");
("Input: Line 1<DELIM>Line 2<DELIM>Line 3\n").echo();
("Delimiter: <DELIM>\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 9: Empty delimiter (treat as single line) */
"Test 9: Empty delimiter (treat as single line)\n".echo();
input = "Line 1\nLine 2\nLine 3";
result = input.grep("Line", "", "");
("Input: Line 1\\nLine 2\\nLine 3\n").echo();
("Delimiter: (empty)\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 10: Context with custom delimiter */
"Test 10: Context with custom delimiter\n".echo();
input = "Header|Line 1|Line 2|Line 3|Footer";
result = input.grep("Line 2", "A1B1", "|");
("Input: Header|Line 1|Line 2|Line 3|Footer\n").echo();
("Pattern: Line 2, Options: A1B1, Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 11: JSON output with custom delimiter */
"Test 11: JSON output with custom delimiter\n".echo();
input = "Line 1|Line 2|Line 3";
result = input.grep("Line", "oj", "|");
("Input: Line 1|Line 2|Line 3\n").echo();
("Pattern: Line, Options: oj, Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
("Result type: " + result.type() + "\n").echo();
"---\n".echo();

/* Test 12: Case-insensitive with custom delimiter */
"Test 12: Case-insensitive with custom delimiter\n".echo();
input = "LINE 1|line 2|Line 3";
result = input.grep("line", "i", "|");
("Input: LINE 1|line 2|Line 3\n").echo();
("Pattern: line (case-insensitive), Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 13: Invert match with custom delimiter */
"Test 13: Invert match with custom delimiter\n".echo();
input = "Line 1|Other 2|Line 3|Other 4";
result = input.grep("Line", "v", "|");
("Input: Line 1|Other 2|Line 3|Other 4\n").echo();
("Pattern: Line (inverted), Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 14: Match-only with custom delimiter */
"Test 14: Match-only with custom delimiter\n".echo();
input = "Hello World|Goodbye World|Hello Universe";
result = input.grep("Hello", "o", "|");
("Input: Hello World|Goodbye World|Hello Universe\n").echo();
("Pattern: Hello (match-only), Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 15: Line numbers with custom delimiter */
"Test 15: Line numbers with custom delimiter\n".echo();
input = "First|Second|Third|Fourth";
result = input.grep("Second", "n", "|");
("Input: First|Second|Third|Fourth\n").echo();
("Pattern: Second (with line numbers), Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 16: Large input with custom delimiter */
"Test 16: Large input with custom delimiter\n".echo();
large_input = "";
i = 0;
while(i < 100) {
    large_input += "Line " + i + "|";
    i += 1;
};
result = large_input.grep("Line 50", "", "|");
("Input: (100 lines with | delimiter)\n").echo();
("Pattern: Line 50, Delimiter: |\n").echo();
("Result length: " + result.len() + "\n").echo();
"---\n".echo();

/* Test 17: Binary data with custom delimiter */
"Test 17: Binary data with custom delimiter\n".echo();
input = "Hello\x00World|Line\x01with\x02control|More\x03data";
result = input.grep("Hello", "", "|");
("Input: Hello\\x00World|Line\\x01with\\x02control|More\\x03data\n").echo();
("Pattern: Hello, Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 18: Unicode text with custom delimiter */
"Test 18: Unicode text with custom delimiter\n".echo();
input = "café|CAFÉ|cafe\u0301|Cafe";
result = input.grep("café", "i", "|");
("Input: café|CAFÉ|café|Cafe\n").echo();
("Pattern: café (case-insensitive), Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 19: Diacritic-insensitive with custom delimiter */
"Test 19: Diacritic-insensitive with custom delimiter\n".echo();
input = "café|CAFÉ|cafe\u0301|Cafe";
result = input.grep("cafe", "d", "|");
("Input: café|CAFÉ|café|Cafe\n").echo();
("Pattern: cafe (diacritic-insensitive), Delimiter: |\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

/* Test 20: Parallel processing with custom delimiter */
"Test 20: Parallel processing with custom delimiter\n".echo();
input = "Line 1|Line 2|Line 3|Line 4|Line 5";
result = input.grep("Line", "", "|", "", "", 2);
("Input: Line 1|Line 2|Line 3|Line 4|Line 5\n").echo();
("Pattern: Line, Delimiter: |, Workers: 2\n").echo();
("Result: " + result.str() + "\n").echo();
"---\n".echo();

"=== CUSTOM DELIMITERS SUMMARY ===\n".echo();
"All custom delimiter tests completed.\n".echo();
"Key features tested:\n".echo();
"- Single character delimiters (|, \\t, space)\n".echo();
"- Multi-character delimiters (\\r\\n, <DELIM>)\n".echo();
"- Unicode delimiters (\\u2028, \\u2029)\n".echo();
"- Empty delimiter (treats as single line)\n".echo();
"- Context, JSON output, and other options with custom delimiters\n".echo();
"- Binary data and Unicode text with custom delimiters\n".echo(); 