/* Test GRZ Format Understanding */
"=== GRZ FORMAT TEST ===\n".echo();

/* Test 1: Pure $OP vs .grz format */
"1. Pure $OP vs .grz format\n".echo();

/* Create a pure $OP function */
pure_func = op(x,y){x * y + 1};
"Pure $OP function:".echo();
pure_func.echo();
"Result: " + pure_func(5,3).str() + "\n".echo();

/* Create .grz object manually */
grz_object = {
    op: pure_func,
    version: $sys().getenv($VERSION)
};
".grz object structure:".echo();
grz_object.echo();

/* Test 2: Compression and decompression */
"2. Compression and decompression\n".echo();

/* Compress to .grz format */
compressed = grz_object.encode("ZIP-GRAPA");
"Compressed .grz data (binary):".echo();
compressed.echo();

/* Decompress back to original */
decoded = compressed.decode("ZIP-GRAPA");
"Decoded object:".echo();
decoded.echo();

/* Extract the pure $OP */
extracted_func = decoded.op;
"Extracted pure $OP:".echo();
extracted_func.echo();
"Result: " + extracted_func(5,3).str() + "\n".echo();

/* Test 3: Version extraction */
"3. Version extraction\n".echo();
version = decoded.version;
"Version: " + version.str() + "\n".echo();

/* Test 4: Using $sys().compile() */
"4. Using $sys().compile()\n".echo();

/* Compile script to .grz format */
compiled = $sys().compile("result = a + b; result", "", "");
"Compiled .grz object:".echo();
compiled.echo();

/* Decode to check version */
decoded_compiled = compiled.decode("ZIP-GRAPA");
"Compiled version: " + decoded_compiled.version.str() + "\n".echo();

/* Test 5: Version compatibility check */
"5. Version compatibility check\n".echo();
current_version = $sys().getenv($VERSION);
"Current Grapa version: " + current_version.str().echo();

if (decoded.version == current_version) {
    "✓ Version compatible\n".echo();
} else {
    "✗ Version mismatch\n".echo();
}

/* Test 6: File operations with .grz */
"6. File operations with .grz\n".echo();

/* Save .grz object to file */
$file().set("test_grz_demo.grz", compressed);
"Saved .grz file: test_grz_demo.grz".echo();

/* Load .grz file */
loaded_data = $file().get("test_grz_demo.grz");
"Loaded .grz data:".echo();
loaded_data.echo();

/* Decode loaded data */
loaded_decoded = loaded_data.decode("ZIP-GRAPA");
"Loaded version: " + loaded_decoded.version.str().echo();

/* Execute loaded function */
loaded_func = loaded_decoded.op;
"Loaded function result: " + loaded_func(7,4).str() + "\n".echo();

/* Test 7: Utility function for version extraction */
"7. Version extraction utility\n".echo();

/* Create utility function */
get_grz_version = op(filename) {
    grz_data = $file().get(filename);
    decoded = grz_data.decode("ZIP-GRAPA");
    decoded.version;
};

/* Test the utility */
extracted_version = get_grz_version("test_grz_demo.grz");
"Extracted version: " + extracted_version.str() + "\n".echo();

/* Test 8: Performance comparison */
"8. Performance comparison\n".echo();

/* Pure $OP execution */
start_time = $sys().getenv($TIME);
i = 0;
while (i < 1000) {
    pure_func(5,3);
    i = i + 1;
}
end_time = $sys().getenv($TIME);
pure_time = end_time - start_time;

/* .grz execution */
start_time = $sys().getenv($TIME);
i = 0;
while (i < 1000) {
    extracted_func(5,3);
    i = i + 1;
}
end_time = $sys().getenv($TIME);
grz_time = end_time - start_time;

"Pure $OP execution time: " + pure_time.str() + " ms".echo();
".grz execution time: " + grz_time.str() + " ms".echo();

if (grz_time <= pure_time * 1.1) {
    "✓ .grz performance is acceptable\n".echo();
} else {
    "✗ .grz performance is slower than expected\n".echo();
}

/* Cleanup */
$file().rm("test_grz_demo.grz");

"=== GRZ FORMAT TEST COMPLETE ===\n".echo(); 