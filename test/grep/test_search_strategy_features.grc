/* Test Search Strategy Features */
/* This test verifies that Grapa grep has functional equivalents for ripgrep's search strategy features */

"=== TESTING GRAPA GREP SEARCH STRATEGY FEATURES ===\n".echo();
"Verifying functional equivalents for ripgrep's search strategy features\n".echo();

/* Test data */
text = "Hello WORLD hello world HELLO World";
"Test text: " + text + "\n".echo();

/* ======================================== */
/* 1. Smart-case Matching */
/* ======================================== */
"1. Smart-case Matching\n".echo();
"   ripgrep: rg 'hello' (case-insensitive for lowercase)\n".echo();
"   ripgrep: rg 'HELLO' (case-sensitive for uppercase)\n".echo();

/* Lowercase pattern - should be case-insensitive (like ripgrep smart-case) */
"   Grapa equivalent for 'rg hello':\n".echo();
result1 = text.grep("hello", "i");
"   " + result1 + "\n".echo();
"   Expected: ['Hello', 'hello']\n".echo();

/* Uppercase pattern - should be case-sensitive (like ripgrep smart-case) */
"   Grapa equivalent for 'rg HELLO':\n".echo();
result2 = text.grep("HELLO", "");
"   " + result2 + "\n".echo();
"   Expected: ['HELLO']\n".echo();

/* Mixed case pattern - should be case-sensitive */
"   Grapa equivalent for 'rg Hello':\n".echo();
result3 = text.grep("Hello", "");
"   " + result3 + "\n".echo();
"   Expected: ['Hello']\n".echo();

/* ======================================== */
/* 2. Word Boundary Mode */
/* ======================================== */
"\n".echo();
"2. Word Boundary Mode\n".echo();
"   ripgrep: rg --word-regexp 'hello'\n".echo();

/* Test with word boundaries */
"   Grapa equivalent for 'rg --word-regexp hello':\n".echo();
result4 = text.grep("\\bhello\\b", "o");
"   " + result4 + "\n".echo();
"   Expected: ['hello']\n".echo();

/* Test with word boundaries for uppercase */
"   Grapa equivalent for 'rg --word-regexp HELLO':\n".echo();
result5 = text.grep("\\bHELLO\\b", "o");
"   " + result5 + "\n".echo();
"   Expected: ['HELLO']\n".echo();

/* Test without word boundaries (for comparison) */
"   Without word boundaries (should match more):\n".echo();
result6 = text.grep("hello", "o");
"   " + result6 + "\n".echo();
"   Expected: ['Hello', 'hello']\n".echo();

/* ======================================== */
/* 3. Column Numbers */
/* ======================================== */
"\n".echo();
"3. Column Numbers\n".echo();
"   ripgrep: rg --column 'hello'\n".echo();

/* Test with byte offsets (Grapa's equivalent to column numbers) */
"   Grapa equivalent for 'rg --column hello':\n".echo();
result7 = text.grep("hello", "b");
"   " + result7 + "\n".echo();
"   Shows byte offsets (can calculate character position)\n".echo();

/* Test with byte offsets for word boundaries */
"   Grapa equivalent for 'rg --column --word-regexp hello':\n".echo();
result8 = text.grep("\\bhello\\b", "ob");
"   " + result8 + "\n".echo();
"   Shows byte offsets with word boundaries\n".echo();

/* ======================================== */
/* 4. Combined Features */
/* ======================================== */
"\n".echo();
"4. Combined Features\n".echo();
"   Testing smart-case + word boundaries + column numbers\n".echo();

/* Smart-case + word boundaries + byte offsets */
"   Grapa equivalent for 'rg --smart-case --word-regexp --column hello':\n".echo();
result9 = text.grep("\\bhello\\b", "ib");
"   " + result9 + "\n".echo();
"   Case-insensitive + word boundaries + byte offsets\n".echo();

/* ======================================== */
/* 5. Edge Cases */
/* ======================================== */
"\n".echo();
"5. Edge Cases\n".echo();

/* Test with numbers and special characters */
test_text2 = "hello123 world456 hello_test hello-world";
"   Test text: " + test_text2 + "\n".echo();

"   Word boundaries with numbers:\n".echo();
result10 = test_text2.grep("\\bhello\\b", "o");
"   " + result10 + "\n".echo();
"   Expected: ['hello'] (not 'hello123')\n".echo();

"   Word boundaries with underscores:\n".echo();
result11 = test_text2.grep("\\bhello\\b", "o");
"   " + result11 + "\n".echo();
"   Expected: ['hello'] (not 'hello_test')\n".echo();

"   Word boundaries with hyphens:\n".echo();
result12 = test_text2.grep("\\bhello\\b", "o");
"   " + result12 + "\n".echo();
"   Expected: ['hello'] (not 'hello-world')\n".echo();

/* ======================================== */
/* 6. Verification Tests */
/* ======================================== */
"\n".echo();
"6. Verification Tests\n".echo();

/* Test that smart-case behavior works correctly */
"   Testing smart-case behavior:\n".echo();
smart_case_test = "Hello WORLD hello world HELLO World";
result_lower = smart_case_test.grep("hello", "i");
result_upper = smart_case_test.grep("HELLO", "");
if (result_lower.len() > 0 && result_upper.len() > 0) {
    "   PASS - Smart-case behavior working correctly\n".echo();
} else {
    "   FAIL - Smart-case behavior not working\n".echo();
}

/* Test that word boundaries work correctly */
"   Testing word boundary behavior:\n".echo();
word_test = "hello123 hello_test hello";
result_word = word_test.grep("\\bhello\\b", "o");
if (result_word.len() == 1) {
    "   PASS - Word boundaries working correctly\n".echo();
} else {
    "   FAIL - Word boundaries not working correctly\n".echo();
}

/* Test that byte offsets work correctly */
"   Testing byte offset behavior:\n".echo();
offset_test = "hello world";
result_offset = offset_test.grep("hello", "b");
if (result_offset.type() != $ERR) {
    "   PASS - Byte offsets working correctly\n".echo();
} else {
    "   FAIL - Byte offsets not working\n".echo();
}

/* ======================================== */
/* 7. Summary */
/* ======================================== */
"\n".echo();
"=== SUMMARY ===\n".echo();
"✅ Smart-case matching: Use 'i' flag for lowercase patterns, no flag for uppercase\n".echo();
"✅ Word boundary mode: Use '\\b' pattern anchors\n".echo();
"✅ Column numbers: Use 'b' option for byte offsets\n".echo();
"\n".echo();
"All ripgrep search strategy features have functional equivalents in Grapa grep!\n".echo();
"Grapa grep can achieve the same results as ripgrep's smart-case, word boundaries, and column numbers.\n".echo(); 