"Simple ASCII match\n".echo();
input = "hello world\nfoo bar\nbaz qux";
result = input.grep(r"hello", "o");
if (result == ["hello"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Simple ASCII match 2\n".echo();
result = input.grep(r"foo", "o");
if (result == ["foo"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Simple ASCII match 3\n".echo();
result = input.grep(r"qux", "o");
if (result == ["qux"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Non-matching pattern\n".echo();
result = input.grep(r"notfound", "o");
if (result == []) "PASS\n".echo(); else "FAIL\n".echo();

"Wildcard match\n".echo();
result = input.grep(r"ba.", "o");
if (result == ["bar", "baz"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Line start anchor\n".echo();
result = input.grep(r"^foo", "om");
if (result == ["foo"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Line end anchor\n".echo();
result = input.grep(r"world$", "o");
if (result == ["world"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Double vowel (should not match)\n".echo();
result = input.grep(r"[aeiou]{2}", "o");
if (result == []) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Single vowel match\n".echo();
result = input.grep(r"[aeiou]", "o");
if (result == ["e", "o", "o", "o", "a", "a", "a", "u"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Word boundary test\n".echo();
input = "The quick brown fox jumps over the lazy dog";
result = input.grep(r"quick", "o");
if (result == ["quick"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Case insensitive match\n".echo();
result = input.grep(r"the", "oi");
if (result == ["the", "the"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Character class with space\n".echo();
result = input.grep(r"z.y", "o");
if (result == ["z y"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Word boundary with length\n".echo();
result = input.grep(r"\b\w{3}\b", "o");
if (result == ["The", "fox", "the", "dog"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Line start with multiline\n".echo();
input = "foo\nbar\nbaz\nqux";
result = input.grep(r"^b", "om");
if (result == ["bar", "baz"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Match all lines\n".echo();
result = input.grep(r".*", "om");
if (result == ["foo", "bar", "baz", "qux"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Digit matching\n".echo();
input = "abc123xyz";
result = input.grep(r"\d+", "o");
if (result == ["123"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Word character matching\n".echo();
result = input.grep(r"\w+", "o");
if (result == ["abc123xyz"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Unicode coffee in different scripts\n".echo();
input = "caf\u00e9\ncafe\u0301\nкофе\nκαφές\n咖啡";
result = input.grep(r"caf", "o");
if (result == ["caf", "caf", "caf"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Unicode normalization NFC/NFD\n".echo();
result = input.grep(r"café", "o");
if (result == ["café", "café"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Combining accent mark\n".echo();
result = input.grep(r"\u0301", "o");
if (result == ["́"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Cyrillic script\n".echo();
result = input.grep(r"кофе", "o");
if (result == ["кофе"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Greek script\n".echo();
result = input.grep(r"καφές", "o");
if (result == ["καφές"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"CJK script\n".echo();
result = input.grep(r"咖啡", "o");
if (result == ["咖啡"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Line start with Unicode\n".echo();
result = input.grep(r"^cafe", "om");
if (result == ["café", "café"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Greek line start\n".echo();
result = input.grep(r"^κα", "om");
if (result == ["καφές"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"CJK line start\n".echo();
result = input.grep(r"^咖", "om");
if (result == ["咖啡"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mathematical script\n".echo();
input = "𝒜𝒷𝒸𝒹𝑒𝒻";
result = input.grep(r"𝒸", "o");
if (result == ["𝒸"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mathematical script case\n".echo();
result = input.grep(r"𝒶", "o");
if (result == ["𝒶"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Spanish n with tilde normalization\n".echo();
input = "mañana\nmañana";
result = input.grep(r"mañana", "o");
if (result == ["mañana", "mañana"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Combining tilde\n".echo();
result = input.grep(r"ñ", "o");
if (result == ["ñ"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Precomposed n with tilde\n".echo();
result = input.grep(r"\u00f1", "o");
if (result == ["ñ"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Decomposed n with tilde\n".echo();
result = input.grep(r"\u006e\u0303", "o");
if (result == ["ñ"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"German sharp S case folding\n".echo();
input = "straße\nSTRASSE\nStraße";
result = input.grep(r"straße", "oi");
if (result == ["straße", "STRASSE", "Straße"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Turkish dotted I case folding\n".echo();
input = "İstanbul\nistanbul\nISTANBUL";
result = input.grep(r"istanbul", "oi");
if (result == ["İstanbul", "istanbul", "ISTANBUL"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Hebrew word boundary\n".echo();
input = "שלום\nשָׁלוֹם\nمرحبا\nhello";
result = input.grep(r"\bשלום\b", "o");
if (result == ["שלום"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Arabic word boundary\n".echo();
result = input.grep(r"\bمرحبا\b", "o");
if (result == ["مرحبا"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mixed script word characters\n".echo();
input = "кофе\nчай\n123٤٥٦";
result = input.grep(r"\w+", "o");
if (result == ["кофе", "чай", "123", "٤٥٦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mixed script digits\n".echo();
result = input.grep(r"\d+", "o");
if (result == ["123", "٤٥٦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Complex emoji sequences\n".echo();
input = "emoji: 👩‍👩‍👧‍👦\nflag: 🇺🇳\nmod: 👍🏽";
result = input.grep(r"👩‍👩‍👧‍👦", "o");
if (result == ["👩‍👩‍👧‍👦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Flag emoji\n".echo();
result = input.grep(r"🇺🇳", "o");
if (result == ["🇺🇳"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Emoji with modifier\n".echo();
result = input.grep(r"👍🏽", "o");
if (result == ["👍🏽"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Rare Unicode characters\n".echo();
input = "rare: 𐍈\nmath: 𝒜𝒷𝒸";
result = input.grep(r"𐍈", "o");
if (result == ["𐍈"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mathematical character\n".echo();
result = input.grep(r"𝒸", "o");
if (result == ["𝒸"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Multiple combining marks\n".echo();
input = "a\u0301\u0323\nạ́";
result = input.grep(r"a\u0301\u0323", "o");
if (result == ["ạ́"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Precomposed with combining marks\n".echo();
result = input.grep(r"ạ́", "o");
if (result == ["ạ́"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Unicode whitespace\n".echo();
input = "space: \u2003\nnewline:\n";
result = input.grep(r"\s", "o");
if (result == [" ", "\u2003", "\n"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Family emoji sequence\n".echo();
input = "family: 👨‍👩‍👧‍👦\nwoman: 👩\nman: 👨";
result = input.grep(r"👨‍👩‍👧‍👦", "o");
if (result == ["👨‍👩‍👧‍👦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Flag emoji sequences\n".echo();
input = "flag: 🇨🇦\nflag: 🇯🇵";
result = input.grep(r"🇨🇦", "o");
if (result == ["🇨🇦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Japanese flag\n".echo();
result = input.grep(r"🇯🇵", "o");
if (result == ["🇯🇵"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Arabic text\n".echo();
input = "arabic: مرحبا\nhebrew: שָׁלוֹם";
result = input.grep(r"مرحبا", "o");
if (result == ["مرحبا"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Hebrew with diacritics\n".echo();
result = input.grep(r"שָׁלוֹם", "o");
if (result == ["שָׁלוֹם"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Complex emoji with ZWJ\n".echo();
input = "emoji: 👩‍❤️‍💋‍👩";
result = input.grep(r"👩‍❤️‍💋‍👩", "o");
if (result == ["👩‍❤️‍💋‍👩"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Character class: whitespace\n".echo();
input = "a b\tc\u00A0d\u3000e";
result = input.grep(r"\s", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Fuzz: random Unicode (BMP, supplementary, emoji, combining, RTL, etc.)\n".echo();
input = "a\u0301😀𐍈שָׁלוֹםمرحبا";
result = input.grep(r".", "ou");
if (result == ["a", "́", "😀", "𐍈", "ש", "ָ", "ׁ", "ל", "ו", "ֹ", "ם", "م", "ر", "ح", "ب", "ا"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Performance: very long line with repeated Unicode\n".echo();
input = "";
i = 0;
while (i < 10000) { input += "😀"; i += 1; }
result = input.grep(r"😀+", "o");
if (result == [input]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Robustness: invalid UTF-8 (should not crash, may return empty or partial)\n".echo();
input = "\xC3\x28";
result = input.grep(r".", "o");
if (result == []) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Grapheme cluster: emoji with skin tone and ZWJ\n".echo();
input = "👍🏽 👩‍👩‍👧‍👦 👨‍👩‍👧‍👦";
result = input.grep(r"👍🏽", "o");
if (result == ["👍🏽"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Family emoji with ZWJ\n".echo();
result = input.grep(r"👩‍👩‍👧‍👦", "o");
if (result == ["👩‍👩‍👧‍👦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mixed family emoji\n".echo();
result = input.grep(r"👨‍👩‍👧‍👦", "o");
if (result == ["👨‍👩‍👧‍👦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Character class: symbols and currency\n".echo();
input = "$ € ¥ 𝛑 ∑";
result = input.grep(r"[$€¥]", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Character class: punctuation\n".echo();
input = r".,;:!?\"'—";
result = input.grep(r"[.,;:!?\"'—]+", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Character class: line and paragraph separators\n".echo();
input = "a\u2028b\u2029c";
result = input.grep("[\u2028\u2029]", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Character class: line and paragraph separators (raw)\n".echo();
input = "a" + "\xE2\x80\xA8" + "b" + "\xE2\x80\xA9" + "c";
result = input.grep("[\xE2\x80\xA8\xE2\x80\xA9]", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Turkish dotted/dotless I case folding\n".echo();
input = "I ı İ i";
result = input.grep(r"i", "oi");
if (result == ["I", "ı", "İ", "i"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Greek sigma case folding\n".echo();
input = "Σ σ ς";
result = input.grep(r"σ", "oi");
if (result == ["Σ", "σ", "ς"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Zero-width joiner in emoji\n".echo();
input = "👩‍👩‍👧‍👦 👩👩👧👦";
result = input.grep(r"👩‍👩‍👧‍👦", "o");
if (result == ["👩‍👩‍👧‍👦"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Bidirectional text\n".echo();
input = "english עברית english";
result = input.grep(r"עברית", "o");
if (result == ["עברית"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Surrogate pair edge case\n".echo();
input = "\uD83D\uDE00"; 
result = input.grep(r"😀", "o");
if (result == ["😀"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Lone surrogate (should not crash)\n".echo();
input = "\uD83D"; 
result = input.grep(r".", "o");
if (result == []) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Word boundary with emoji\n".echo();
input = "😀word😀";
result = input.grep(r"\bword\b", "o");
if (result == ["word"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Line boundary with Unicode\n".echo();
input = "😀\nword\n😀";
result = input.grep(r"^word$", "om");
if (result == ["word"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Mixed content performance test\n".echo();
input = "";
i = 0;
while (i < 1000) { if (i % 3 == 0) {input += "😀";} elseif (i % 3 == 1) { input += "café"; } else { input += "кофе"; };i += 1;};
result = input.grep(r"😀", "o");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Character class: letters and word characters\n".echo();
input = "abc ΑΒΓ абв 漢字 😀";
result = input.grep(r"\w+", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Character class: digits\n".echo();
input = "123 ٤٥٦ १२३ １２３";
result = input.grep(r"\d+", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Fuzz: long string with mixed scripts and emoji\n".echo();
input = "Latin: abc\nGreek: ΑΒΓ\nCyrillic: абв\nCJK: 漢字\nEmoji: 😀👍🏽🇺🇳";
result = input.grep(r"\w+", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"Character class: combining marks\n".echo();
input = "a\u0301 e\u0323 o\u0302\u0301";
result = input.grep("[\u0300-\u036F\u1AB0-\u1AFF\u20D0-\u20FF]+", "ou");
if (result.type() != $ERR && result.len() > 0) "PASS\n".echo(); else "FAIL\n".echo();
if (result.type() == $ERR) result.echo();
"---\n".echo();

"All tests completed\n".echo(); 

"Custom delimiter: basic match\n".echo();
input = "hello world|||foo bar|||baz qux";
result = input.grep(r"foo", "o", "|||");
if (result == ["foo"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Custom delimiter: match at start, middle, end\n".echo();
input = "start|||middle|||end";
result = input.grep(r"start", "o", "|||");
if (result == ["start"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"end", "o", "|||");
if (result == ["end"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Custom delimiter: trailing delimiter\n".echo();
input = "foo|||bar|||";
result = input.grep(r"bar", "o", "|||");
if (result == ["bar"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Custom delimiter: multi-character with regex special chars\n".echo();
input = "a.b|c.d|e.f";
result = input.grep(r"c.d", "o", "|");
if (result == ["c.d"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Custom delimiter: no matches\n".echo();
input = "foo|||bar|||baz";
result = input.grep(r"qux", "o", "|||");
if (result == []) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Custom delimiter: delimiter not present in input\n".echo();
input = "foo bar baz";
result = input.grep(r"foo", "o", "|||");
if (result == ["foo"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Custom delimiter: empty delimiter (should default to newline)\n".echo();
input = "foo\nbar\nbaz";
result = input.grep(r"bar", "o", "");
if (result == ["bar"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo(); 

"Explicit normalization: NONE (should not match decomposed with composed)\n".echo();
input = "cafe\u00e9\ncafe\u00e9";
result = input.grep(r"café", "o", "", "NONE");
if (result == ["café"]) "PASS\n".echo(); else "FAIL\n".echo();
input = "cafe\u00e9\ncafe\u00e9";
result = input.grep(r"cafe\u0301", "o", "", "NONE");
if (result == []) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Explicit normalization: NFC (should match composed and decomposed)\n".echo();
input = "café\ncafe\u0301";
result = input.grep(r"café", "o", "", "NFC");
if (result == ["café", "café"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"cafe\u0301", "o", "", "NFC");
if (result == ["café", "café"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Explicit normalization: NFD (should match composed and decomposed)\n".echo();
input = "café\ncafe\u0301";
result = input.grep(r"café", "o", "", "NFD");
if (result == ["café", "café"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"cafe\u0301", "o", "", "NFD");
if (result == ["café", "café"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Explicit normalization: NFKC (should match compatibility forms)\n".echo();
input = "A\n\u212B";
result = input.grep(r"Å", "o", "", "NFKC");
if (result == ["Å", "Å"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"\u212B", "o", "", "NFKC");
if (result == ["Å", "Å"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Explicit normalization: NFKD (should match compatibility forms)\n".echo();
input = "Å\u212B";
result = input.grep(r"Å", "o", "", "NFKD");
if (result == ["Å", "Å"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"\u212B", "o", "", "NFKD");
if (result == ["Å", "Å"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo(); 

"Hex output: ASCII character\n".echo();
if ("A".hex() == "41") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Latin-1 Supplement (é)\n".echo();
if ("é".hex() == "C3A9") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: BMP CJK character (漢)\n".echo();
if ("漢".hex() == "E6BCA2") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Emoji (😀)\n".echo();
if ("😀".hex() == "F09F9880") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Emoji with skin tone (👍🏽)\n".echo();
if ("👍🏽".hex() == "F09F918DF09F8FBD") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: ZWJ sequence (👩‍👩‍👧‍👦)\n".echo();
if ("👩‍👩‍👧‍👦".hex() == "F09F91A9E2808DF09F91A9E2808DF09F91A7E2808DF09F91A6") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: ZWJ sequence (👩‍👩‍)\n".echo();
if ("👩‍👩‍".hex() == "F09F91A9E2808DF09F91A9E2808D") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Combining mark (á)\n".echo();
if ("a\u0301".hex() == "61CC81") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: RTL character (א)\n".echo();
if ("א".hex() == "D790") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Surrogate pair (U+1F4A9, 💩)\n".echo();
if ("💩".hex() == "F09F92A9") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Multiple scripts (A漢😀)\n".echo();
if ("A漢😀".hex() == "41E6BCA2F09F9880") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Flag emoji (🇺🇳)\n".echo();
if ("🇺🇳".hex() == "F09F87BAF09F87B3") "PASS\n".echo(); else "FAIL\n".echo();

"Hex output: Family emoji (👨‍👩‍👧‍👦)\n".echo();
if ("👨‍👩‍👧‍👦".hex() == "F09F91A8E2808DF09F91A9E2808DF09F91A7E2808DF09F91A6") "PASS\n".echo(); else "FAIL\n".echo(); 

"Binary mode: composed vs decomposed é (should only match exact bytes)\n".echo();
input = "café\ncafe\u0301";
result = input.grep(r"café", "o", "", "NONE", "BINARY");
if (result == ["café"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"cafe\u0301", "o", "", "NONE", "BINARY");
if (result == ["café"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Binary mode: Unicode word boundary is ASCII-only\n".echo();
input = "кофе\ncafe\n123";
result = input.grep(r"\b\w+\b", "o", "", "NONE", "BINARY");
if (result == ["cafe", "123"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Binary mode: emoji is matched as bytes, not grapheme\n".echo();
input = "emoji: 😀";
result = input.grep(r"😀", "o", "", "NONE", "BINARY");
if (result == ["😀"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r".", "o", "", "NONE", "BINARY");
if (result == ["e", "m", "o", "j", "i", ":", " ", "\xF0", "\x9F", "\x98", "\x80"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Binary mode: combining marks are not combined\n".echo();
input = "a\u0301";
result = input.grep(r"a", "o", "", "NONE", "BINARY");
if (result == ["a"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"\u0301", "o", "", "NONE", "BINARY");
if (result == ["́"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo();

"Binary mode: ASCII case-insensitive works, Unicode does not\n".echo();
input = "straße\nSTRASSE\nStraße";
result = input.grep(r"straße", "oi", "", "NONE", "BINARY");
if (result == ["straße"]) "PASS\n".echo(); else "FAIL\n".echo();
result = input.grep(r"STRASSE", "oi", "", "NONE", "BINARY");
if (result == ["STRASSE"]) "PASS\n".echo(); else "FAIL\n".echo();
"---\n".echo(); 

"JSON output: named groups and offsets\n".echo();
input = "2023-04-27\n2022-12-31";
result = input.grep(r"(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})", "oj");
expected = '[{"match":"2023-04-27","year":"2023","month":"04","day":"27","offset":0,"line":1},{"match":"2022-12-31","year":"2022","month":"12","day":"31","offset":11,"line":2}]';
if (result[0] == expected) "PASS\n".echo(); else { "FAIL\n".echo(); result[0].echo(); }
"---\n".echo();

"JSON output: no named groups\n".echo();
input = "foo bar\nbaz qux";
result = input.grep(r"ba.", "oj");
expected = '[{"match":"bar","offset":4,"line":1},{"match":"baz","offset":8,"line":2}]';
if (result[0] == expected) "PASS\n".echo(); else { "FAIL\n".echo(); result[0].echo(); }
"---\n".echo();

"JSON output: Unicode and line numbers\n".echo();
input = "café\ncafe\u0301";
result = input.grep(r"café", "oj");
expected = '[{"match":"café","offset":0,"line":1}]';
if (result[0] == expected) "PASS\n".echo(); else { "FAIL\n".echo(); result[0].echo(); }
"---\n".echo(); 



